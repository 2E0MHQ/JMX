<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments">UpdateAz-V1</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="InputPath" elementType="Argument">
            <stringProp name="Argument.name">InputPath</stringProp>
            <stringProp name="Argument.value">#{JmeterInputPath}\</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OutputPath" elementType="Argument">
            <stringProp name="Argument.name">OutputPath</stringProp>
            <stringProp name="Argument.value">#{JmeterOutputPath}\</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OutputFolderName" elementType="Argument">
            <stringProp name="Argument.name">OutputFolderName</stringProp>
            <stringProp name="Argument.value">SDX-${__BeanShell(new java.text.SimpleDateFormat(&quot;YYYY-MMM-dd-HHmmss&quot;).format(new Date()))}\</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HostName" elementType="Argument">
            <stringProp name="Argument.name">HostName</stringProp>
            <stringProp name="Argument.value">#{HostName}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SAMHostName" elementType="Argument">
            <stringProp name="Argument.name">SAMHostName</stringProp>
            <stringProp name="Argument.value">#{SAMHostName}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SPFWC" elementType="Argument">
            <stringProp name="Argument.name">SPFWC</stringProp>
            <stringProp name="Argument.value">#{SPFWC}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SPFServer" elementType="Argument">
            <stringProp name="Argument.name">SPFServer</stringProp>
            <stringProp name="Argument.value">#{SPFServer}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserName" elementType="Argument">
            <stringProp name="Argument.name">UserName</stringProp>
            <stringProp name="Argument.value">#{LoginUserName}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Password" elementType="Argument">
            <stringProp name="Argument.name">Password</stringProp>
            <stringProp name="Argument.value">#{LoginPassword}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SPFConfigUID" elementType="Argument">
            <stringProp name="Argument.name">SPFConfigUID</stringProp>
            <stringProp name="Argument.value">#{SPFConfigUID}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SPFCreateConfigUID" elementType="Argument">
            <stringProp name="Argument.name">SPFCreateConfigUID</stringProp>
            <stringProp name="Argument.value">#{SPFCreateConfigUID}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SPFQueryConfigUID" elementType="Argument">
            <stringProp name="Argument.name">SPFQueryConfigUID</stringProp>
            <stringProp name="Argument.value">#{SPFQueryConfigUID}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Loop" elementType="Argument">
            <stringProp name="Argument.name">Loop</stringProp>
            <stringProp name="Argument.value">#{Loop}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserLoad" elementType="Argument">
            <stringProp name="Argument.name">UserLoad</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MSSQLConnectionString" elementType="Argument">
            <stringProp name="Argument.name">MSSQLConnectionString</stringProp>
            <stringProp name="Argument.value">#{DBInstanceName}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DBName" elementType="Argument">
            <stringProp name="Argument.name">DBName</stringProp>
            <stringProp name="Argument.value">#{DBName}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DBUserName" elementType="Argument">
            <stringProp name="Argument.name">DBUserName</stringProp>
            <stringProp name="Argument.value">#{DBAdminUser}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DBPassword" elementType="Argument">
            <stringProp name="Argument.name">DBPassword</stringProp>
            <stringProp name="Argument.value">#{DBAdminPwd}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Comments" elementType="Argument">
            <stringProp name="Argument.name">Comments</stringProp>
            <stringProp name="Argument.value">Azure Performance Tests</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${UserLoad}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">select 1</stringProp>
          <stringProp name="connectionAge">60000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">QUERYRESULT1</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://${MSSQLConnectionString};DatabaseName=${DBName}</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">${DBPassword}</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">${DBUserName}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">false</boolProp>
          <boolProp name="useExpires">true</boolProp>
          <boolProp name="CacheManager.controlledByThread">false</boolProp>
        </CacheManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">QUERYRESULT1</stringProp>
          <stringProp name="query">SELECT GetDate()</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;
String SQLStartTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm:ss.SSS&quot;).format(prev.getStartTime());
//log.info(&quot;SQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
//JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLStartTime);
//JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

//log.info(&quot;Before SQlStats = &gt; &quot;+JMeterUtils.getProperty(&quot;SQlStats-JP&quot;));

String Perfcsv= &quot;TransName,DatabaseID,StartTime,EndTime,SQLExecutions,BufferGets,PhysicalReads,CPUTime,ElapsedTime&quot;;

String PerfCSVFile =vars.get(&quot;OutputPath&quot;)+vars.get(&quot;OutputFolderName&quot;)+&quot;perf.csv&quot;;
FileWriter fstream = new FileWriter(PerfCSVFile,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(Perfcsv);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="User-Overall" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_LoginPage" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFWC}-268" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${SPFWC}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">none</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-User" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                    <stringProp name="Header.value">?1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFWC}/-269" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${SPFWC}/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Detected a redirect from the previous sample</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">none</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-User" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                    <stringProp name="Header.value">?1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFWC}/settings.json-272" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${SPFWC}/settings.json</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">no-cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${HostName}/${SPFWC}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">script</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">identityProvider</stringProp>
                <stringProp name="RegexExtractor.regex">AUTHORIZATION_IDENTITYPROVIDER&quot;: &quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">dummyClientSecret</stringProp>
                <stringProp name="RegexExtractor.regex">AUTHORIZATION_DUMMYCLIENTSECRET&quot;: &quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">clientId</stringProp>
                <stringProp name="RegexExtractor.regex">AUTHORIZATION_CLIENT_ID&quot;: &quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFWC}/SDAClientServices/api/localization-280" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${SPFWC}/SDAClientServices/api/localization</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${HostName}/${SPFWC}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_API_ServerInfo" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/ServerInfo-279" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/ServerInfo</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="JMXFileName" elementType="Argument">
                      <stringProp name="Argument.name">JMXFileName</stringProp>
                      <stringProp name="Argument.value">${__TestPlanName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="JmeterServerIP" elementType="Argument">
                      <stringProp name="Argument.name">JmeterServerIP</stringProp>
                      <stringProp name="Argument.value">${__machineIP()}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="JmeterServerName" elementType="Argument">
                      <stringProp name="Argument.name">JmeterServerName</stringProp>
                      <stringProp name="Argument.value">${__machineName()}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </Arguments>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${HostName}/${SPFWC}/</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">String ServerInfo = prev.getResponseDataAsString();
 
log.info(&quot;ServerInfo = &quot;+ServerInfo);
String OutputTXTFile =vars.get(&quot;OutputPath&quot;)+vars.get(&quot;OutputFolderName&quot;)+&quot;SDX-Version.txt&quot;;

FileWriter fstream = new FileWriter(OutputTXTFile,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(ServerInfo);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();
</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">String ServerInfo = prev.getResponseDataAsString();
String Comments = vars.get(&quot;Comments&quot;);
String OutputFolder1=  &quot;\&quot;OutputFolderName\&quot;:\&quot;&quot;+vars.get(&quot;OutputFolderName&quot;)+&quot;\&quot;,&quot;;
OutputFolder1=OutputFolder1.replace(&quot;\\&quot;,&quot;&quot;);
Comments = Comments.replace(&quot;,&quot;,&quot; &quot;);
Comments = &quot;  \&quot;Comments\&quot;: \&quot;&quot;+Comments+&quot;\&quot;,&quot;;
//log.info(&quot;Comments = &quot;+Comments);
String ConnStr  = &quot;  \&quot;MSSQLConnectionString\&quot;:\&quot;&quot;+vars.get(&quot;MSSQLConnectionString&quot;)+&quot;\&quot;,&quot;;
ConnStr=ConnStr.replace(&quot;\\&quot;,&quot;-&quot;);
ServerInfo = ServerInfo.replace(&quot;}&quot;,&quot;&quot;);
//log.info(&quot;ServerInfo = &quot;+ServerInfo);

String OutputTXTFile =vars.get(&quot;OutputPath&quot;)+vars.get(&quot;OutputFolderName&quot;)+&quot;SDX-Version.json&quot;;

FileWriter fstream = new FileWriter(OutputTXTFile,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(ServerInfo);
out.write(&quot;,&quot;);
//out.write(System.getProperty(&quot;line.separator&quot;));
out.write(Comments);
out.write(System.getProperty(&quot;line.separator&quot;));
out.write(ConnStr);

out.write(System.getProperty(&quot;line.separator&quot;));
out.write(&quot;  \&quot;DBName\&quot;:\&quot;&quot;+vars.get(&quot;DBName&quot;)+&quot;\&quot;,&quot;);
out.write(System.getProperty(&quot;line.separator&quot;));
out.write(&quot;  \&quot;HostName\&quot;:\&quot;&quot;+vars.get(&quot;HostName&quot;)+&quot;\&quot;,&quot;);
out.write(System.getProperty(&quot;line.separator&quot;));
out.write(&quot;  \&quot;SAMHostName\&quot;:\&quot;&quot;+vars.get(&quot;SAMHostName&quot;)+&quot;\&quot;,&quot;);
out.write(System.getProperty(&quot;line.separator&quot;));
out.write(&quot;  \&quot;SPFWC\&quot;:\&quot;&quot;+vars.get(&quot;SPFWC&quot;)+&quot;\&quot;,&quot;);
out.write(System.getProperty(&quot;line.separator&quot;));
out.write(&quot;  \&quot;SPFServer\&quot;:\&quot;&quot;+vars.get(&quot;SPFServer&quot;)+&quot;\&quot;,&quot;);
out.write(System.getProperty(&quot;line.separator&quot;));
out.write(&quot;  \&quot;JMXFileName\&quot;:\&quot;&quot;+vars.get(&quot;JMXFileName&quot;)+&quot;\&quot;,&quot;);
out.write(System.getProperty(&quot;line.separator&quot;));
out.write(&quot;  \&quot;JmeterServerIP\&quot;:\&quot;&quot;+vars.get(&quot;JmeterServerIP&quot;)+&quot;\&quot;,&quot;);
out.write(System.getProperty(&quot;line.separator&quot;));
out.write(&quot;  \&quot;JmeterServerName\&quot;:\&quot;&quot;+vars.get(&quot;JmeterServerName&quot;)+&quot;\&quot;,&quot;);
out.write(System.getProperty(&quot;line.separator&quot;));
out.write(OutputFolder1);
out.write(System.getProperty(&quot;line.separator&quot;));
out.write(&quot;  \&quot;SingleUser\&quot;:\&quot;&quot;+vars.get(&quot;UserLoad&quot;)+&quot;\&quot;,&quot;);
out.write(System.getProperty(&quot;line.separator&quot;));
out.write(&quot;  \&quot;Loop\&quot;:\&quot;&quot;+vars.get(&quot;Loop&quot;)+&quot;\&quot;,&quot;);
out.write(System.getProperty(&quot;line.separator&quot;));
out.write(&quot;  \&quot;MultiUser\&quot;:\&quot;Not Supported\&quot;,&quot;);
out.write(System.getProperty(&quot;line.separator&quot;));
out.write(&quot;  \&quot;Rampup\&quot;:\&quot;0\&quot;&quot;);
out.write(System.getProperty(&quot;line.separator&quot;));
out.write(&quot;}&quot;);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/description-286" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/description</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${HostName}/${SPFWC}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">TokenAudience</stringProp>
                <stringProp name="RegexExtractor.regex">TokenAudience&quot;: &quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/sam/oauth/.well-known/openid-configuration-287" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SAMHostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/sam/oauth/.well-known/openid-configuration</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${HostName}/${SPFWC}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/sam/oauth/connect/authorize-288" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="response_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">response_type</stringProp>
                    <stringProp name="Argument.value">code</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="scope" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">scope</stringProp>
                    <stringProp name="Argument.value">openid%20ingr.api</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                    <stringProp name="Argument.value">${clientId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="redirect_uri" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">redirect_uri</stringProp>
                    <stringProp name="Argument.value">https://${HostName}/${SPFWC}/_session.html</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="resource" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">resource</stringProp>
                    <stringProp name="Argument.value">${TokenAudience}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="nonce" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">nonce</stringProp>
                    <stringProp name="Argument.value">68ca92d5f18fbc8b872bdd98a4f5eadc96f86</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="state" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">state</stringProp>
                    <stringProp name="Argument.value">MjczMzJ3Y3QuaW5ncm5ldC5jb20=</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="acr_values" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">acr_values</stringProp>
                    <stringProp name="Argument.value">idp:${identityProvider}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="code_challenge" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">code_challenge</stringProp>
                    <stringProp name="Argument.value">gQ9eNkk44bcFAlAE9bPeUS59pNVNVas25kvNx3seAY0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="code_challenge_method" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">code_challenge_method</stringProp>
                    <stringProp name="Argument.value">S256</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="prompt" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">prompt</stringProp>
                    <stringProp name="Argument.value">none</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="client_secret" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">client_secret</stringProp>
                    <stringProp name="Argument.value">${dummyClientSecret}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SAMHostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/sam/oauth/connect/authorize</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${HostName}/${SPFWC}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">iframe</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/description-290" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/description</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${HostName}/${SPFWC}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/sam/oauth/.well-known/openid-configuration-291" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SAMHostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/sam/oauth/.well-known/openid-configuration</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${HostName}/${SPFWC}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/sam/oauth/connect/authorize-292" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="response_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">response_type</stringProp>
                    <stringProp name="Argument.value">code</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="scope" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">scope</stringProp>
                    <stringProp name="Argument.value">openid%20ingr.api</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                    <stringProp name="Argument.value">${clientId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="redirect_uri" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">redirect_uri</stringProp>
                    <stringProp name="Argument.value">https://${HostName}/${SPFWC}/</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="resource" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">resource</stringProp>
                    <stringProp name="Argument.value">${TokenAudience}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="nonce" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">nonce</stringProp>
                    <stringProp name="Argument.value">c493e6e6ff7487f2ba0861352f8dbe75baecb</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="state" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">state</stringProp>
                    <stringProp name="Argument.value">MjczMzJ3Y3QuaW5ncm5ldC5jb20=</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="acr_values" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">acr_values</stringProp>
                    <stringProp name="Argument.value">idp:${identityProvider}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="code_challenge" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">code_challenge</stringProp>
                    <stringProp name="Argument.value">BM4Xf8-wAafR08VZHJ0bPKVFT9FP-rw_j1D8kZs7oQI</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="code_challenge_method" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">code_challenge_method</stringProp>
                    <stringProp name="Argument.value">S256</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="client_secret" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">client_secret</stringProp>
                    <stringProp name="Argument.value">${dummyClientSecret}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SAMHostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/sam/oauth/connect/authorize</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Detected the start of a redirect chaindummyClientSecret</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${HostName}/${SPFWC}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">SessionID</stringProp>
                <stringProp name="RegexExtractor.regex">login.signin=(.+?)&amp;quot</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">idsrv</stringProp>
                <stringProp name="RegexExtractor.regex">idsrv.xsrf&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;(.+?)&amp;quot</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">Provider</stringProp>
                <stringProp name="RegexExtractor.regex">defaultProvider&amp;quot;:&amp;quot;(.+?)&amp;quot</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_HomePage" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/sam/oauth/login?signin=d018ff9b808d7873a4f52ead257eb70e-299" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="idsrv.xsrf" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">idsrv.xsrf</stringProp>
                    <stringProp name="Argument.value">${idsrv}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="provider" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">provider</stringProp>
                    <stringProp name="Argument.value">${Provider}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="username" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">username</stringProp>
                    <stringProp name="Argument.value">${UserName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="password" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">password</stringProp>
                    <stringProp name="Argument.value">${Password}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SAMHostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/sam/oauth/login?signin=${SessionID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${HostName}/sam/oauth/login?signin=d018ff9b808d7873a4f52ead257eb70e</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${HostName}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-User" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                    <stringProp name="Header.value">?1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">URL</stringProp>
                <stringProp name="RegexExtractor.refname">Code</stringProp>
                <stringProp name="RegexExtractor.regex">code=(.+?)&amp;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <stringProp name="Sample.scope">children</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFWC}/assets/unsupported-browser-page/unsupported-browser-page.js-303" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${SPFWC}/assets/unsupported-browser-page/unsupported-browser-page.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">no-cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${HostName}/${SPFWC}/?code=72968d34fb2abfc953e5fcc3d3ed4648&amp;state=MjczMzJ3Y3QuaW5ncm5ldC5jb20%3D&amp;session_state=sPrINNMvuoxsa2Sdx_vvdr8BHdDknwjEp7pLZazMtUI.aa1f200a2a7ed75a58a6e073d170c719</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">script</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFWC}/settings.json-304" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${SPFWC}/settings.json</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">no-cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${HostName}/${SPFWC}/?code=72968d34fb2abfc953e5fcc3d3ed4648&amp;state=MjczMzJ3Y3QuaW5ncm5ldC5jb20%3D&amp;session_state=sPrINNMvuoxsa2Sdx_vvdr8BHdDknwjEp7pLZazMtUI.aa1f200a2a7ed75a58a6e073d170c719</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">script</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/ServerInfo-313" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/ServerInfo</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${HostName}/${SPFWC}/?code=72968d34fb2abfc953e5fcc3d3ed4648&amp;state=MjczMzJ3Y3QuaW5ncm5ldC5jb20%3D&amp;session_state=sPrINNMvuoxsa2Sdx_vvdr8BHdDknwjEp7pLZazMtUI.aa1f200a2a7ed75a58a6e073d170c719</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/sam/oauth/connect/token-318" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                    <stringProp name="Argument.value">authorization_code</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                    <stringProp name="Argument.value">${clientId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="client_secret" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">client_secret</stringProp>
                    <stringProp name="Argument.value">${dummyClientSecret}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="code_verifier" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">code_verifier</stringProp>
                    <stringProp name="Argument.value">WE5icm9hLVptTkwwZlVZZXlVcGZsNDdWbTJLVXBwbUVhZklQd35HZWJVSzZ3</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">code</stringProp>
                    <stringProp name="Argument.value">${Code}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="redirect_uri" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">redirect_uri</stringProp>
                    <stringProp name="Argument.value">https%3A%2F%2F${HostName}%2F${SPFWC}%2F</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="resource" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">resource</stringProp>
                    <stringProp name="Argument.value">${TokenAudience}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SAMHostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/sam/oauth/connect/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${HostName}/${SPFWC}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${HostName}</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">Bearer</stringProp>
                <stringProp name="RegexExtractor.regex">access_token&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">id_token</stringProp>
                <stringProp name="RegexExtractor.regex">id_token&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.commons.codec.binary.Base64;
 
String response = vars.get(&quot;Bearer&quot;);
String[] arr=response.split(&quot;\\.&quot;);
String actualvalue=arr[1].replaceAll(&quot;-&quot;,&quot;+&quot;);
actualvalue=actualvalue.replaceAll(&quot;_&quot;,&quot;/&quot;);
byte[] decoded_response = Base64.decodeBase64(actualvalue);
// inserting decoded JWT token into B_IdToken
//vars.put(&quot;B_IdToken&quot;,new String(decoded_response));

 
//log.info(&quot;===================================&quot;);
log.info(new String(decoded_response));
String BearerInfo = new String(decoded_response);
//log.info(BearerInfo);
int SessionID_Start,SessionID_End;
SessionID_Start = BearerInfo.indexOf(&quot;session_id&quot;);
SessionID_End = BearerInfo.indexOf(&quot;amr&quot;);
//log.info(&quot;SessionID_Start = &quot;+SessionID_Start);
//log.info(&quot;SessionID_End = &quot;+SessionID_End);
String SessionID_Logout = BearerInfo.substring(SessionID_Start+13,SessionID_End-3);
log.info(SessionID_Logout);
vars.put(&quot;SessionID_Logout&quot;,SessionID_Logout);
//log.info(&quot;===================================&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_API_User" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/User-319" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/User</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${HostName}/${SPFWC}/</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFWC}/SDAClientServices/api/images-320" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${SPFWC}/SDAClientServices/api/images</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${HostName}/${SPFWC}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/SDAPreferences-325" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/SDAPreferences</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${HostName}/${SPFWC}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Configs-324" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Configs</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${HostName}/${SPFWC}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_API_Metadata" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/$metadata-323" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/$metadata</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${HostName}/${SPFWC}/</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/xml</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">text/xml</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/$batch-326" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">--batch_8e956f7e-6238-fbfa-0f84-ebc6448d3c52&#xd;
Content-Type: application/http&#xd;
Content-Transfer-Encoding: binary&#xd;
&#xd;
GET https://${HostName}/${SPFServer}/api/v2/SDA/User/Roles HTTP/1.1&#xd;
SPFConfigUID: ${SPFConfigUID}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/$batch</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${HostName}/${SPFWC}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${HostName}</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">multipart/mixed;boundary=batch_8e956f7e-6238-fbfa-0f84-ebc6448d3c52</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_API_GetFeatureSets" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSets-327" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;CreateObj&quot;,&quot;ManageFiles&quot;,&quot;CopyObj&quot;,&quot;CreateClassObj&quot;,&quot;CreateClassObjAndRel&quot;,&quot;CreateObjAndRel&quot;,&quot;CreateClassObjAndLoad&quot;,&quot;SDxCreateClassObjAndLoad&quot;,&quot;CreateWizardClassObj&quot;,&quot;CreateObjectFromSelectedObjects&quot;,&quot;EditObj&quot;,&quot;EditWizardObj&quot;,&quot;ShowInbox&quot;,&quot;ReplaceFiles&quot;,&quot;CheckInFiles&quot;,&quot;TaskReassignmentConfiguration&quot;,&quot;SDARelationshipBuilder&quot;,&quot;CreateEntryPointFromQFind&quot;,&quot;AdminEntryPoints&quot;,&quot;ShowWorkflow&quot;,&quot;ListEditContextMenu&quot;,&quot;FTRSearch&quot;,&quot;AssignRecipients&quot;,&quot;Revise&quot;,&quot;UploadDocument&quot;,&quot;SDAManageDataTree&quot;,&quot;ShowInboxForObject&quot;,&quot;SDACopyDataBookContent&quot;,&quot;ConfigRoleAssignment&quot;,&quot;DashboardCreatePage&quot;,&quot;DashboardUpdatePage&quot;,&quot;InsertHistRev&quot;,&quot;CopyDistributionMatrix&quot;,&quot;MultiStepReAssign&quot;,&quot;AddRecipient&quot;,&quot;ExpandDocNestedStructure&quot;,&quot;ExpandFileNestedStructure&quot;,&quot;TabOutletManagement&quot;,&quot;EditObjModal&quot;,&quot;RegenerateMetadata&quot;,&quot;QueryEntity&quot;,&quot;ShareUrl&quot;,&quot;ShowObj&quot;,&quot;TerminateObj&quot;,&quot;DeleteObj&quot;,&quot;AttachWorkflow&quot;,&quot;CancelDocument&quot;,&quot;UnCancelDocument&quot;,&quot;ExecuteSavedReportFromObject&quot;,&quot;UndoEditFiles&quot;,&quot;EditFiles&quot;,&quot;XmtlCancel&quot;,&quot;XmtlUndoCancel&quot;,&quot;StepRejectAction&quot;,&quot;StepAcceptAction&quot;,&quot;StepClaim&quot;,&quot;SharepointCreateDocument&quot;,&quot;SharepointDownloadFile&quot;,&quot;SharepointViewNative&quot;,&quot;GenerateAlternateRendition&quot;,&quot;OpenXMLWordReport&quot;,&quot;SignOff&quot;,&quot;SignOffWithForm&quot;,&quot;UndoSignOff&quot;,&quot;SPFExchangeData&quot;,&quot;LaunchURLWithDynamicArgs&quot;,&quot;SDARelationshipBuilder&quot;,&quot;LaunchURLFromFeatureSet&quot;,&quot;WebClientExtensibility&quot;,&quot;GenerateMergedRendition&quot;,&quot;ListEditUncontrolledItems&quot;,&quot;WorkflowDetailsReport&quot;,&quot;ShareFile&quot;,&quot;CopyToLocalFile&quot;,&quot;UnlockUserAccount&quot;,&quot;StartScheduler&quot;,&quot;StopScheduler&quot;,&quot;SPFCopyConfigAccess&quot;,&quot;Dashboard&quot;,&quot;UpdateReferences&quot;,&quot;UpdateReferredBy&quot;,&quot;CompareDocuments&quot;,&quot;CreateWebGLSchedulerTask&quot;,&quot;SDACompareFiles&quot;,&quot;Navigate&quot;,&quot;ViewInDocument&quot;,&quot;SmartPlantReview&quot;,&quot;ViewBatchRenditionLog&quot;,&quot;ClearBravaCache&quot;,&quot;ViewInVisualReport&quot;,&quot;SCLBQualityAssuranceReviewDetails&quot;,&quot;SCLBManageQualityAssuranceReviewPlan&quot;,&quot;SCLBQualityAssuranceReview&quot;,&quot;SDAImpactAnalysis&quot;,&quot;ConflictResolution&quot;,&quot;SCLBCommunicationManagementDetails&quot;,&quot;SCLBCommunicationManagement&quot;,&quot;SOPSCommunicationManagementDetails&quot;,&quot;SOPSCommunicationManagement&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;SCLBQualityAssuranceRegister&quot;,&quot;SDAManageMarkupLayersForRendition&quot;,&quot;SOPSManageMarkupLayersForRendition&quot;,&quot;SDAImpactAnalysis&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;ConflictResolution&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;ProjectHandover&quot;,&quot;SDAShowMySDVJobs&quot;,&quot;SDxShowMySDVJobs&quot;,&quot;SDAApproveSDVJob&quot;,&quot;SDAViewSDVJobSummary&quot;,&quot;SDADeleteSDVJob&quot;,&quot;SDASDVDownloadValidationReport&quot;,&quot;LScanViewSite&quot;,&quot;LScanViewScan&quot;,&quot;LScanSynchronizeSiteData&quot;,&quot;LScanViewTagInScan&quot;,&quot;ViewConsolidatedDataForObject&quot;,&quot;ViewSharedData&quot;,&quot;CreateWorkAreaDefinition&quot;,&quot;EditWorkAreaDefinition&quot;,&quot;RegisterAuthoringTool&quot;,&quot;InconsistencyReportWithStartingObject&quot;,&quot;InconsistencyReportByQuery&quot;,&quot;InconsistencyReport&quot;,&quot;RegenerateCommonSchema&quot;,&quot;CancelChangeAction&quot;,&quot;SIOInconsistencyReportByQuery&quot;,&quot;RelateObjectsToWorkArea&quot;,&quot;SPFNContentExtraction&quot;,&quot;UnClaimObj&quot;,&quot;ClaimObj&quot;,&quot;MergeConfig&quot;,&quot;MergeObj&quot;,&quot;MergeStructure&quot;,&quot;CancelProject&quot;,&quot;ChangeConfigStatus&quot;,&quot;SyncObjects&quot;,&quot;SPXSAPSync&quot;,&quot;SDxConnSync&quot;]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSets</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${HostName}/${SPFWC}/</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp name="Origin" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">https://${HostName}</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/IsAuditEnabled-330" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/IsAuditEnabled</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${HostName}/${SPFWC}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/IsFTRAvailable-329" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/IsFTRAvailable</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${HostName}/${SPFWC}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetClientApiMethods-331" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;ClientApi&quot;:&quot;SharePointSearchAccess&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetClientApiMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${HostName}/${SPFWC}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${HostName}</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/$batch-333" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">--batch_08fc0025-5ec3-5f52-c053-532ce7af52f2&#xd;
Content-Type: application/http&#xd;
Content-Transfer-Encoding: binary&#xd;
&#xd;
POST https://${HostName}/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetClientApiMethods HTTP/1.1&#xd;
SPFConfigUID: ${SPFConfigUID}&#xd;
&#xd;
{&quot;ClientApi&quot;:&quot;ShowInbox&quot;}&#xd;
&#xd;
--batch_08fc0025-5ec3-5f52-c053-532ce7af52f2&#xd;
Content-Type: application/http&#xd;
Content-Transfer-Encoding: binary&#xd;
&#xd;
POST https://${HostName}/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetClientApiMethods HTTP/1.1&#xd;
SPFConfigUID: CF_ConfigurationTop&#xd;
&#xd;
{&quot;ClientApi&quot;:&quot;ShowInbox&quot;}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/$batch</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${HostName}/${SPFWC}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${HostName}</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">multipart/mixed;boundary=batch_08fc0025-5ec3-5f52-c053-532ce7af52f2</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/Objects-334" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="$filter" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">$filter</stringProp>
                    <stringProp name="Argument.value">Class%20eq%20%27SPFClientAPI%27%20and%20Name%20eq%20%27HomeDashboard%27</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/Objects</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${HostName}/${SPFWC}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetPinGroups()-344" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;pblnIgnoreConfigsForPinCounts&quot;:false}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetPinGroups()</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${HostName}/${SPFWC}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${HostName}</stringProp>
                  </elementProp>
                  <elementProp name="SPFQueryConfigUID" elementType="Header">
                    <stringProp name="Header.name">SPFQueryConfigUID</stringProp>
                    <stringProp name="Header.value">PR_Turnaround_Project</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="SPFCreateConfigUID" elementType="Header">
                    <stringProp name="Header.name">SPFCreateConfigUID</stringProp>
                    <stringProp name="Header.value">PR_Turnaround_Project</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_API_GetToDolistItemsCountByCreateConfig" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetToDolistItemsCountByCreateConfig-363" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;ConfigUIDs&quot;:[&quot;PR_Turnaround_Project&quot;,&quot;CF_ConfigurationTop&quot;]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetToDolistItemsCountByCreateConfig</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${HostName}/${SPFWC}/</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                    </elementProp>
                    <elementProp name="Origin" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">https://${HostName}</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetClientApiMethods-362" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;ClientApi&quot;:&quot;ChangeUserPassword&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetClientApiMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${HostName}/${SPFWC}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${HostName}</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetPinsForPinGroup()-365" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;pstrObid&quot;:&quot;PINBOARD&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetPinsForPinGroup()</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${HostName}/${SPFWC}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${HostName}</stringProp>
                  </elementProp>
                  <elementProp name="SPFQueryConfigUID" elementType="Header">
                    <stringProp name="Header.name">SPFQueryConfigUID</stringProp>
                    <stringProp name="Header.value">PR_Turnaround_Project</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="SPFCreateConfigUID" elementType="Header">
                    <stringProp name="Header.name">SPFCreateConfigUID</stringProp>
                    <stringProp name="Header.value">PR_Turnaround_Project</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Notifications-400" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="$select" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">$select</stringProp>
                    <stringProp name="Argument.value">OBID,Name,Description,CreationDate,SPFContextObjectOBID</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="$top" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">$top</stringProp>
                    <stringProp name="Argument.value">25</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="$skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">$skip</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="$count" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">$count</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="$orderby" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">$orderby</stringProp>
                    <stringProp name="Argument.value">CreationDate+desc</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Notifications</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${HostName}/${SPFWC}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json,application/vnd.intergraph.data+json</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${Loop}</stringProp>
          </LoopController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${Latency}</stringProp>
              </ConstantTimer>
              <hashTree/>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="4" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">false</boolProp>
              </TransactionController>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="BeforeJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    Select 
     DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255), DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  As [SQL_Execution],
                   SUM(total_logical_reads)  As [BufferGets],
                                 SUM(total_physical_reads)  As [Physical Reads],
                 SUM(total_worker_time) As [CPU Time Ms],
       SUM(total_elapsed_time)  As [Elapsed Time]
      From sys.dm_exec_query_stats AS qs
    CROSS APPLY(
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  From sys.dm_exec_plan_attributes(qs.plan_handle)
                  Where Attribute = N&apos;dbid&apos;) As F_DB
               
    Group BY DatabaseID
)
Select 

       [DatabaseID], [SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
       [Elapsed Time] 
                  From DB_CPU_Stats
Where DatabaseName = &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable"> SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;
String SQLStartTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());
//log.info(&quot;SQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLStartTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

log.info(&quot;Before SQlStats = &gt; &quot;+JMeterUtils.getProperty(&quot;SQlStats-JP&quot;));</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_SearchTagWFullName" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">false</boolProp>
                </TransactionController>
                <hashTree>
                  <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="SearchTags03" elementType="Argument">
                        <stringProp name="Argument.name">SearchTags03</stringProp>
                        <stringProp name="Argument.value">PU32-PT-0027414</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </Arguments>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1FDWCriticalityRating&apos;)" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$expand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$expand</stringProp>
                          <stringProp name="Argument.value">Items,Descendants</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1FDWCriticalityRating&apos;)</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1FDWTagStatus&apos;)" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$expand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$expand</stringProp>
                          <stringProp name="Argument.value">Items,Descendants</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1FDWTagStatus&apos;)</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1CFIHOS_yesno&apos;)" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$expand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$expand</stringProp>
                          <stringProp name="Argument.value">Items,Descendants</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1CFIHOS_yesno&apos;)</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/Tags" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="%24format" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24format</stringProp>
                          <stringProp name="Argument.value">json</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24top</stringProp>
                          <stringProp name="Argument.value">25</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24filter</stringProp>
                          <stringProp name="Argument.value">contains(Name%2C%27${SearchTags03}%27)</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24count</stringProp>
                          <stringProp name="Argument.value">false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="_" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">_</stringProp>
                          <stringProp name="Argument.value">1656578516962</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/Tags</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">x-requested-with</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">
String DynamicOBID;
DynamicOBID = vars.get(&quot;DynamicOBID_ALL&quot;);
DynamicOBID = &quot;\&quot;&quot;+ DynamicOBID.replaceAll(&quot;,&quot;,&quot;\&quot;,\&quot;&quot;) + &quot;\&quot;&quot;;
vars.put(&quot;DynamicOBIDs&quot;, DynamicOBID);</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC003_SearchTagWFullName6IOX000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;PU32-PT-0027414&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC003_SearchTagWFullName6IOX000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC003_SearchTagWFullName6IOX000A} ${TC003_SearchTagWFullName6IOX000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC003_SearchTagWFullName6IOX000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC003_SearchTagWFullName6IOX000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;PU32-PT-0027414&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC003_SearchTagWFullName6IOX000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC003_SearchTagWFullName6IOX000A} ${TC003_SearchTagWFullName6IOX000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC003_SearchTagWFullName6IOX000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC003_SearchTagWFullName6IOX000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;PU32-PT-0027414&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC003_SearchTagWFullName6IOX000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC003_SearchTagWFullName6IOX000A} ${TC003_SearchTagWFullName6IOX000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC003_SearchTagWFullName6IOX000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC003_SearchTagWFullName6IOX000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;PU32-PT-0027414&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC003_SearchTagWFullName6IOX000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC003_SearchTagWFullName6IOX000A} ${TC003_SearchTagWFullName6IOX000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC003_SearchTagWFullName6IOX000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC003_SearchTagWFullName6IOX000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;PU32-PT-0027414&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC003_SearchTagWFullName6IOX000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC003_SearchTagWFullName6IOX000A} ${TC003_SearchTagWFullName6IOX000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC003_SearchTagWFullName6IOX000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
                    <stringProp name="delimiter">,</stringProp>
                    <stringProp name="fileEncoding"></stringProp>
                    <stringProp name="filename">${InputPath}SearchTags03.csv</stringProp>
                    <boolProp name="ignoreFirstLine">false</boolProp>
                    <boolProp name="quotedData">false</boolProp>
                    <boolProp name="recycle">true</boolProp>
                    <stringProp name="shareMode">shareMode.all</stringProp>
                    <boolProp name="stopThread">false</boolProp>
                    <stringProp name="variableNames">SearchTags03</stringProp>
                  </CSVDataSet>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Notifications" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$select" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$select</stringProp>
                          <stringProp name="Argument.value">OBID,Name,Description,CreationDate,SPFContextObjectOBID</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$top</stringProp>
                          <stringProp name="Argument.value">25</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$skip" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$skip</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$count</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$orderby" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$orderby</stringProp>
                          <stringProp name="Argument.value">CreationDate+desc</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Notifications</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json,application/vnd.intergraph.data+json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/Tags" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="%24format" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24format</stringProp>
                          <stringProp name="Argument.value">json</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24top</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24filter</stringProp>
                          <stringProp name="Argument.value">contains(Name%2C%27${SearchTags03}%27)</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24count</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="_" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">_</stringProp>
                          <stringProp name="Argument.value">1656578516962</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/Tags</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
                    <stringProp name="delimiter">,</stringProp>
                    <stringProp name="fileEncoding"></stringProp>
                    <stringProp name="filename">${InputPath}SearchTags03.csv</stringProp>
                    <boolProp name="ignoreFirstLine">false</boolProp>
                    <boolProp name="quotedData">false</boolProp>
                    <boolProp name="recycle">true</boolProp>
                    <stringProp name="shareMode">shareMode.all</stringProp>
                    <boolProp name="stopThread">false</boolProp>
                    <stringProp name="variableNames">SearchTags03</stringProp>
                  </CSVDataSet>
                  <hashTree/>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_API_GetDynIconName" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">false</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetDynIconName()" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&quot;ObjectObids&quot;: [${DynamicOBIDs}]}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetDynIconName()</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">accept-encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, br</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">accept-language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">content-length</stringProp>
                            <stringProp name="Header.value">28</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">content-type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">origin</stringProp>
                            <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">referer</stringProp>
                            <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">sec-ch-ua</stringProp>
                            <stringProp name="Header.value">${HostName}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                            <stringProp name="Header.value">?0</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                            <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">sec-fetch-dest</stringProp>
                            <stringProp name="Header.value">empty</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">sec-fetch-mode</stringProp>
                            <stringProp name="Header.value">cors</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">sec-fetch-site</stringProp>
                            <stringProp name="Header.value">same-origin</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                            <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                            <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">user-agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                        <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..OBID||</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                        <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                      </JSONPostProcessor>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_API_GetFeatureSetsByObject" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">false</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;ListEditContextMenu&quot;],&quot;ObjectObidAndDomains&quot;:[${DynamicOBIDs}]}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">accept-encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, br</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">accept-language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">content-length</stringProp>
                            <stringProp name="Header.value">74</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">content-type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">origin</stringProp>
                            <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">referer</stringProp>
                            <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">sec-ch-ua</stringProp>
                            <stringProp name="Header.value">${HostName}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                            <stringProp name="Header.value">?0</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                            <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">sec-fetch-dest</stringProp>
                            <stringProp name="Header.value">empty</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">sec-fetch-mode</stringProp>
                            <stringProp name="Header.value">cors</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">sec-fetch-site</stringProp>
                            <stringProp name="Header.value">same-origin</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                            <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                            <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">user-agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                        <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                        <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                      </JSONPostProcessor>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;CreateObj&quot;,&quot;ManageFiles&quot;,&quot;ManageSignedFiles&quot;,&quot;CopyObj&quot;,&quot;CreateClassObj&quot;,&quot;CreateClassObjAndRel&quot;,&quot;CreateObjAndRel&quot;,&quot;CreateClassObjAndLoad&quot;,&quot;SDxCreateClassObjAndLoad&quot;,&quot;CreateWizardClassObj&quot;,&quot;CreateSignWizardClassObj&quot;,&quot;CreateObjectFromSelectedObjects&quot;,&quot;CreateSignObjectFromSelectedObjects&quot;,&quot;EditObj&quot;,&quot;EditWizardObj&quot;,&quot;EditSignWizardObj&quot;,&quot;ShowInbox&quot;,&quot;ReplaceFiles&quot;,&quot;CheckInFiles&quot;,&quot;TaskReassignmentConfiguration&quot;,&quot;SDARelationshipBuilder&quot;,&quot;CreateEntryPointFromQFind&quot;,&quot;AdminEntryPoints&quot;,&quot;ShowWorkflow&quot;,&quot;SDxWorkflowTemplateEditor&quot;,&quot;SDxCreateWorkflowTemplate&quot;,&quot;ListEditContextMenu&quot;,&quot;FTRSearch&quot;,&quot;AssignRecipients&quot;,&quot;Revise&quot;,&quot;UploadDocument&quot;,&quot;EditObjWithClassification&quot;,&quot;SDAManageDataTree&quot;,&quot;ShowInboxForObject&quot;,&quot;SDACopyDataBookContent&quot;,&quot;ConfigRoleAssignment&quot;,&quot;DashboardCreatePage&quot;,&quot;DashboardUpdatePage&quot;,&quot;InsertHistRev&quot;,&quot;CopyDistributionMatrix&quot;,&quot;MultiStepReAssign&quot;,&quot;AddRecipient&quot;,&quot;ExpandDocNestedStructure&quot;,&quot;ExpandFileNestedStructure&quot;,&quot;TabOutletManagement&quot;,&quot;CompareWorkflowTemplates&quot;,&quot;MaintainCalendar&quot;,&quot;EditObjModal&quot;,&quot;RegenerateMetadata&quot;,&quot;QueryEntity&quot;,&quot;ShareUrl&quot;,&quot;ShowObj&quot;,&quot;TerminateObj&quot;,&quot;DeleteObj&quot;,&quot;AttachWorkflow&quot;,&quot;CancelDocument&quot;,&quot;UnCancelDocument&quot;,&quot;ExecuteSavedReportFromObject&quot;,&quot;UndoEditFiles&quot;,&quot;EditFiles&quot;,&quot;XmtlCancel&quot;,&quot;XmtlUndoCancel&quot;,&quot;StepRejectAction&quot;,&quot;StepAcceptAction&quot;,&quot;StepClaim&quot;,&quot;SharepointCreateDocument&quot;,&quot;SharepointDownloadFile&quot;,&quot;SharepointViewNative&quot;,&quot;GenerateAlternateRendition&quot;,&quot;OpenXMLWordReport&quot;,&quot;SignOff&quot;,&quot;SignOffWithForm&quot;,&quot;UndoSignOff&quot;,&quot;SPFExchangeData&quot;,&quot;LaunchURLWithDynamicArgs&quot;,&quot;SDARelationshipBuilder&quot;,&quot;LaunchURLFromFeatureSet&quot;,&quot;WebClientExtensibility&quot;,&quot;GenerateMergedRendition&quot;,&quot;ListEditUncontrolledItems&quot;,&quot;WorkflowDetailsReport&quot;,&quot;ShareFile&quot;,&quot;CopyToLocalFile&quot;,&quot;GenerateMergedRenditionForFiles&quot;,&quot;PrintFile&quot;,&quot;UnlockUserAccount&quot;,&quot;StartScheduler&quot;,&quot;StopScheduler&quot;,&quot;SPFCopyConfigAccess&quot;,&quot;Dashboard&quot;,&quot;UpdateReferences&quot;,&quot;UpdateReferredBy&quot;,&quot;RelationshipManagement&quot;,&quot;GenerateThumbnail&quot;,&quot;EditFilesOnline&quot;,&quot;FinishEditOnline&quot;,&quot;FinishEditOnlineSignOff&quot;,&quot;UndoEditOnline&quot;,&quot;ViewOnline&quot;,&quot;GoToOneDrive&quot;,&quot;UpdateWidget&quot;,&quot;ReplaceEditableCopyWithMasterCopy&quot;,&quot;RequestForESign&quot;,&quot;CompleteESign&quot;,&quot;CompareDocuments&quot;,&quot;CreateWebGLSchedulerTask&quot;,&quot;SDACompareFiles&quot;,&quot;Navigate&quot;,&quot;ViewInDocument&quot;,&quot;SmartPlantReview&quot;,&quot;ViewBatchRenditionLog&quot;,&quot;ClearBravaCache&quot;,&quot;ViewInVisualReport&quot;,&quot;SCLBQualityAssuranceReviewDetails&quot;,&quot;SCLBManageQualityAssuranceReviewPlan&quot;,&quot;SCLBQualityAssuranceReview&quot;,&quot;SDAImpactAnalysis&quot;,&quot;ConflictResolution&quot;,&quot;SCLBCommunicationManagementDetails&quot;,&quot;SCLBCommunicationManagement&quot;,&quot;SOPSCommunicationManagementDetails&quot;,&quot;SOPSCommunicationManagement&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;SCLBQualityAssuranceRegister&quot;,&quot;SDAManageMarkupLayersForRendition&quot;,&quot;SOPSManageMarkupLayersForRendition&quot;,&quot;SDAImpactAnalysis&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;ConflictResolution&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;ProjectHandover&quot;,&quot;SDAShowMySDVJobs&quot;,&quot;SDxShowMySDVJobs&quot;,&quot;SDAApproveSDVJob&quot;,&quot;SDAViewSDVJobSummary&quot;,&quot;SDADeleteSDVJob&quot;,&quot;SDASDVDownloadValidationReport&quot;,&quot;LScanViewSite&quot;,&quot;LScanViewScan&quot;,&quot;LScanSynchronizeSiteData&quot;,&quot;LScanViewTagInScan&quot;,&quot;ViewConsolidatedDataForObject&quot;,&quot;ViewSharedData&quot;,&quot;CreateWorkAreaDefinition&quot;,&quot;EditWorkAreaDefinition&quot;,&quot;RunDanglingRelsReport&quot;,&quot;RegisterAuthoringTool&quot;,&quot;InconsistencyReportWithStartingObject&quot;,&quot;InconsistencyReportByQuery&quot;,&quot;InconsistencyReport&quot;,&quot;RegenerateCommonSchema&quot;,&quot;CancelChangeAction&quot;,&quot;SIOInconsistencyReportByQuery&quot;,&quot;RelateObjectsToWorkArea&quot;,&quot;ResolveDuplicateDocuments&quot;,&quot;SPFNContentExtraction&quot;,&quot;UnClaimObj&quot;,&quot;ClaimObj&quot;,&quot;MergeConfig&quot;,&quot;MergeObj&quot;,&quot;MergeStructure&quot;,&quot;CancelProject&quot;,&quot;ChangeConfigStatus&quot;,&quot;SyncObjects&quot;,&quot;SPXSAPSync&quot;,&quot;SDxConnSync&quot;,&quot;ExampleClientAPIRoute&quot;,&quot;HistoryViewRoute&quot;,&quot;ExampleClientAPIAction&quot;,&quot;ExampleClientAPIModal&quot;,&quot;HistoryViewModal&quot;,&quot;ExampleClientAPIWidget&quot;],&quot;ObjectObidAndDomains&quot;:[&quot;${TC003_SearchTagWFullName6IOX000A}&quot;]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">3752</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC003_SearchTagWFullName6IOX000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;GenDetail&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC003_SearchTagWFullName6IOX000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC003_SearchTagWFullName6IOX000A} ${TC003_SearchTagWFullName6IOX000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC003_SearchTagWFullName6IOX000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC003_SearchTagWFullName6IOX000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;GenDetail&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC003_SearchTagWFullName6IOX000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC003_SearchTagWFullName6IOX000A} ${TC003_SearchTagWFullName6IOX000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC003_SearchTagWFullName6IOX000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC003_SearchTagWFullName6IOX000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;GenDetail&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC003_SearchTagWFullName6IOX000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC003_SearchTagWFullName6IOX000A} ${TC003_SearchTagWFullName6IOX000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC003_SearchTagWFullName6IOX000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="AfterJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    SELECT
               DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255),DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  AS [SQL_Execution],
                   SUM(total_logical_reads)  AS [BufferGets],
                                 SUM(total_physical_reads)  AS [Physical Reads],
                 SUM(total_worker_time) AS [CPU Time Ms],
       SUM(total_elapsed_time)  AS [Elapsed Time]
      FROM sys.dm_exec_query_stats AS qs
    CROSS APPLY (
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  FROM sys.dm_exec_plan_attributes(qs.plan_handle)
                 WHERE attribute = N&apos;dbid&apos;) AS F_DB
               
    GROUP BY DatabaseID

)
SELECT 
       
                  [DatabaseID],[SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
                  [Elapsed Time] 
                  FROM DB_CPU_Stats
where DatabaseName= &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable">SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;

String TransName=&quot;SearchTagWFullName&quot;;
String SQLStartTime = JMeterUtils.getProperty(&quot;SQLStartTime-JP&quot;);
String SQLEndTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());

log.info(&quot;aSQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
//int DatabaseID = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;);
//log.info(&quot;DatabaseID = &gt; &quot;+DatabaseID);
//log.info(&quot;SQLStartTime = &gt; &quot;+SQLStartTime);
//log.info(&quot;SQLEndTime = &gt; &quot;+SQLEndTime);
Long aSQL_Execution = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;SQL_Execution&quot;);
//log.info(&quot;aSQL_Execution = &gt; &quot;+aSQL_Execution);

Long aBufferGets = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;BufferGets&quot;);
//log.info(&quot;aBufferGets = &gt; &quot;+aBufferGets);
Long aPhysicalReads = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Physical Reads&quot;);
//log.info(&quot;aPhysicalReads = &gt; &quot;+aPhysicalReads);
Long aCPUTimeMs = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;CPU Time Ms&quot;);
//log.info(&quot;aCPUTimeMs = &gt; &quot;+aCPUTimeMs);
Long aElapsedTime = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Elapsed Time&quot;);
//log.info(&quot;aElapsedTime = &gt; &quot;+aElapsedTime);

String BSQlStats = JMeterUtils.getProperty(&quot;SQlStats-JP&quot;);
//log.info(&quot;BSQlStats = &gt; &quot;+BSQlStats);

Long bSQL_Execution = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;SQL_Execution=&quot;)+14, BSQlStats.indexOf(&quot;, BufferGets=&quot;)));
//log.info(&quot;bSQL_Execution = &gt; &quot;+bSQL_Execution);

//Long.parseLong
Long bBufferGets = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11, BSQlStats.indexOf(&quot;}&quot;)));
//int bBufferGets = Integer.parseInt(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11,BSQlStats.indexOf(&quot;}&quot;)));
//log.info(&quot;bBufferGets = &gt; &quot;+bBufferGets);

Long bPhysicalReads = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Physical Reads=&quot;)+15, BSQlStats.indexOf(&quot;, DatabaseID&quot;)));
//log.info(&quot;bPhysicalReads = &gt; &quot;+bPhysicalReads);

Long bCPUTimeMs = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;CPU Time Ms=&quot;)+12, BSQlStats.indexOf(&quot;, Elapsed Time&quot;)));
//log.info(&quot;bCPUTimeMs = &gt; &quot;+bCPUTimeMs);

Long bElapsedTime = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Elapsed Time=&quot;)+13, BSQlStats.indexOf(&quot;, SQL_Execution&quot;)));
//log.info(&quot;bElapsedTime = &gt; &quot;+bElapsedTime);

//log.info(&quot;SQL_Execution = &gt; &quot;+(aSQL_Execution-bSQL_Execution));
//log.info(&quot;BufferGets = &gt; &quot;+(aBufferGets-bBufferGets));
//log.info(&quot;PhysicalReads = &gt; &quot;+(aPhysicalReads-bPhysicalReads));
//log.info(&quot;CPUTimeMs = &gt; &quot;+(aCPUTimeMs-bCPUTimeMs));
//log.info(&quot;ElapsedTime = &gt; &quot;+(aElapsedTime-bElapsedTime));
log.info(&quot;===================================================&quot;);
String Perfcsv = TransName +&quot;,&quot;+String.valueOf(vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;))+&quot;,&quot;+SQLStartTime+&quot;,&quot;+SQLEndTime+&quot;,&quot;+String.valueOf(aSQL_Execution-bSQL_Execution)+&quot;,&quot;+String.valueOf(aBufferGets-bBufferGets)+&quot;,&quot;+String.valueOf(aPhysicalReads-bPhysicalReads)+&quot;,&quot;+String.valueOf(aCPUTimeMs-bCPUTimeMs)+&quot;,&quot;+String.valueOf(aElapsedTime-bElapsedTime);

log.info(&quot;Perfcsv = &gt;&quot;+Perfcsv);
log.info(&quot;===================================================&quot;);
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLEndTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

String PerfCSVFile = vars.get(&quot;OutputPath&quot;) + vars.get(&quot;OutputFolderName&quot;) +&quot;perf.csv&quot;;
FileWriter fstream = new FileWriter(PerfCSVFile,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(Perfcsv);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="5" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">false</boolProp>
              </TransactionController>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="BeforeJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    Select 
     DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255), DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  As [SQL_Execution],
                   SUM(total_logical_reads)  As [BufferGets],
                                 SUM(total_physical_reads)  As [Physical Reads],
                 SUM(total_worker_time) As [CPU Time Ms],
       SUM(total_elapsed_time)  As [Elapsed Time]
      From sys.dm_exec_query_stats AS qs
    CROSS APPLY(
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  From sys.dm_exec_plan_attributes(qs.plan_handle)
                  Where Attribute = N&apos;dbid&apos;) As F_DB
               
    Group BY DatabaseID
)
Select 

       [DatabaseID], [SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
       [Elapsed Time] 
                  From DB_CPU_Stats
Where DatabaseName = &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable"> SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;
String SQLStartTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());
//log.info(&quot;SQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLStartTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

log.info(&quot;Before SQlStats = &gt; &quot;+JMeterUtils.getProperty(&quot;SQlStats-JP&quot;));</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_ClickonInfomapTag" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">false</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/Objects" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$filter</stringProp>
                          <stringProp name="Argument.value">OBID%20eq%20%27${TC003_SearchTagWFullName6IOX000A}%27</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$top</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$count</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/Objects</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..OBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">
String DynamicOBID;
DynamicOBID = vars.get(&quot;DynamicOBID_ALL&quot;);
DynamicOBID = &quot;\&quot;&quot;+ DynamicOBID.replaceAll(&quot;,&quot;,&quot;\&quot;,\&quot;&quot;) + &quot;\&quot;&quot;;
vars.put(&quot;DynamicOBIDs&quot;, DynamicOBID);</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
                    <stringProp name="delimiter">,</stringProp>
                    <stringProp name="fileEncoding"></stringProp>
                    <stringProp name="filename">${InputPath}SearchObjects04.csv</stringProp>
                    <boolProp name="ignoreFirstLine">false</boolProp>
                    <boolProp name="quotedData">false</boolProp>
                    <boolProp name="recycle">true</boolProp>
                    <stringProp name="shareMode">shareMode.all</stringProp>
                    <boolProp name="stopThread">false</boolProp>
                    <stringProp name="variableNames">SearchObjects04</stringProp>
                  </CSVDataSet>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetNavigationOptions" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;StartingObjectOBID&quot;:&quot;${TC003_SearchTagWFullName6IOX000A}&quot;,&quot;RelLookAhead&quot;:true,&quot;EdgeLookAhead&quot;:true,&quot;IsInfoMap&quot;:true}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetNavigationOptions</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">91</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC004_ClickonInfomapTag6IOX000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Classification&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC004_ClickonInfomapTag6IOX000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC004_ClickonInfomapTag6IOX000A} ${TC004_ClickonInfomapTag6IOX000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC004_ClickonInfomapTag6IOX000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/Objects" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$filter</stringProp>
                          <stringProp name="Argument.value">OBID%20eq%20%27${TC004_ClickonInfomapTag6IOX000A}%27</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$expand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$expand</stringProp>
                          <stringProp name="Argument.value">SPFPrimaryClassification_21($count=true),FDWTagOriginatingOrg_12($count=true),FDWTagPurchaseOrder_12($count=true)</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/Objects</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">prefer</stringProp>
                          <stringProp name="Header.value">odata.include-annotations=&quot;*&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfresolvedocumentstoversion</stringProp>
                          <stringProp name="Header.value">false</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..OBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">
String DynamicOBID;
DynamicOBID = vars.get(&quot;DynamicOBID_ALL&quot;);
DynamicOBID = &quot;\&quot;&quot;+ DynamicOBID.replaceAll(&quot;,&quot;,&quot;\&quot;,\&quot;&quot;) + &quot;\&quot;&quot;;
vars.put(&quot;DynamicOBIDs&quot;, DynamicOBID);</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetDynIconName()" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ObjectObids&quot;: [${DynamicOBIDs}]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetDynIconName()</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">61</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..OBID||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetInterfacesForObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ObjectOBID&quot;:&quot;${TC003_SearchTagWFullName6IOX000A}&quot;}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetInterfacesForObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">25</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/Objects(&apos;${TC004_ClickonInfomapTag6IOX000A}&apos;)/SPFFileComposition_21" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/Objects(&apos;${TC004_ClickonInfomapTag6IOX000A}&apos;)/SPFFileComposition_21</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Notifications" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$select" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$select</stringProp>
                          <stringProp name="Argument.value">OBID,Name,Description,CreationDate,SPFContextObjectOBID</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$top</stringProp>
                          <stringProp name="Argument.value">25</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$skip" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$skip</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$count</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$orderby" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$orderby</stringProp>
                          <stringProp name="Argument.value">CreationDate+desc</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Notifications</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json,application/vnd.intergraph.data+json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="AfterJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    SELECT
               DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255),DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  AS [SQL_Execution],
                   SUM(total_logical_reads)  AS [BufferGets],
                                 SUM(total_physical_reads)  AS [Physical Reads],
                 SUM(total_worker_time) AS [CPU Time Ms],
       SUM(total_elapsed_time)  AS [Elapsed Time]
      FROM sys.dm_exec_query_stats AS qs
    CROSS APPLY (
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  FROM sys.dm_exec_plan_attributes(qs.plan_handle)
                 WHERE attribute = N&apos;dbid&apos;) AS F_DB
               
    GROUP BY DatabaseID

)
SELECT 
       
                  [DatabaseID],[SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
                  [Elapsed Time] 
                  FROM DB_CPU_Stats
where DatabaseName= &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable">SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;

String TransName=&quot;ClickonInfomapTag&quot;;
String SQLStartTime = JMeterUtils.getProperty(&quot;SQLStartTime-JP&quot;);
String SQLEndTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());

log.info(&quot;aSQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
//int DatabaseID = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;);
//log.info(&quot;DatabaseID = &gt; &quot;+DatabaseID);
//log.info(&quot;SQLStartTime = &gt; &quot;+SQLStartTime);
//log.info(&quot;SQLEndTime = &gt; &quot;+SQLEndTime);
Long aSQL_Execution = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;SQL_Execution&quot;);
//log.info(&quot;aSQL_Execution = &gt; &quot;+aSQL_Execution);

Long aBufferGets = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;BufferGets&quot;);
//log.info(&quot;aBufferGets = &gt; &quot;+aBufferGets);
Long aPhysicalReads = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Physical Reads&quot;);
//log.info(&quot;aPhysicalReads = &gt; &quot;+aPhysicalReads);
Long aCPUTimeMs = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;CPU Time Ms&quot;);
//log.info(&quot;aCPUTimeMs = &gt; &quot;+aCPUTimeMs);
Long aElapsedTime = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Elapsed Time&quot;);
//log.info(&quot;aElapsedTime = &gt; &quot;+aElapsedTime);

String BSQlStats = JMeterUtils.getProperty(&quot;SQlStats-JP&quot;);
//log.info(&quot;BSQlStats = &gt; &quot;+BSQlStats);

Long bSQL_Execution = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;SQL_Execution=&quot;)+14, BSQlStats.indexOf(&quot;, BufferGets=&quot;)));
//log.info(&quot;bSQL_Execution = &gt; &quot;+bSQL_Execution);

//Long.parseLong
Long bBufferGets = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11, BSQlStats.indexOf(&quot;}&quot;)));
//int bBufferGets = Integer.parseInt(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11,BSQlStats.indexOf(&quot;}&quot;)));
//log.info(&quot;bBufferGets = &gt; &quot;+bBufferGets);

Long bPhysicalReads = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Physical Reads=&quot;)+15, BSQlStats.indexOf(&quot;, DatabaseID&quot;)));
//log.info(&quot;bPhysicalReads = &gt; &quot;+bPhysicalReads);

Long bCPUTimeMs = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;CPU Time Ms=&quot;)+12, BSQlStats.indexOf(&quot;, Elapsed Time&quot;)));
//log.info(&quot;bCPUTimeMs = &gt; &quot;+bCPUTimeMs);

Long bElapsedTime = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Elapsed Time=&quot;)+13, BSQlStats.indexOf(&quot;, SQL_Execution&quot;)));
//log.info(&quot;bElapsedTime = &gt; &quot;+bElapsedTime);

//log.info(&quot;SQL_Execution = &gt; &quot;+(aSQL_Execution-bSQL_Execution));
//log.info(&quot;BufferGets = &gt; &quot;+(aBufferGets-bBufferGets));
//log.info(&quot;PhysicalReads = &gt; &quot;+(aPhysicalReads-bPhysicalReads));
//log.info(&quot;CPUTimeMs = &gt; &quot;+(aCPUTimeMs-bCPUTimeMs));
//log.info(&quot;ElapsedTime = &gt; &quot;+(aElapsedTime-bElapsedTime));
log.info(&quot;===================================================&quot;);
String Perfcsv = TransName +&quot;,&quot;+String.valueOf(vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;))+&quot;,&quot;+SQLStartTime+&quot;,&quot;+SQLEndTime+&quot;,&quot;+String.valueOf(aSQL_Execution-bSQL_Execution)+&quot;,&quot;+String.valueOf(aBufferGets-bBufferGets)+&quot;,&quot;+String.valueOf(aPhysicalReads-bPhysicalReads)+&quot;,&quot;+String.valueOf(aCPUTimeMs-bCPUTimeMs)+&quot;,&quot;+String.valueOf(aElapsedTime-bElapsedTime);

log.info(&quot;Perfcsv = &gt;&quot;+Perfcsv);
log.info(&quot;===================================================&quot;);
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLEndTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

String PerfCSVFile = vars.get(&quot;OutputPath&quot;) + vars.get(&quot;OutputFolderName&quot;) +&quot;perf.csv&quot;;
FileWriter fstream = new FileWriter(PerfCSVFile,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(Perfcsv);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="6" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">false</boolProp>
              </TransactionController>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="BeforeJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    Select 
     DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255), DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  As [SQL_Execution],
                   SUM(total_logical_reads)  As [BufferGets],
                                 SUM(total_physical_reads)  As [Physical Reads],
                 SUM(total_worker_time) As [CPU Time Ms],
       SUM(total_elapsed_time)  As [Elapsed Time]
      From sys.dm_exec_query_stats AS qs
    CROSS APPLY(
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  From sys.dm_exec_plan_attributes(qs.plan_handle)
                  Where Attribute = N&apos;dbid&apos;) As F_DB
               
    Group BY DatabaseID
)
Select 

       [DatabaseID], [SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
       [Elapsed Time] 
                  From DB_CPU_Stats
Where DatabaseName = &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable"> SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;
String SQLStartTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());
//log.info(&quot;SQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLStartTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

log.info(&quot;Before SQlStats = &gt; &quot;+JMeterUtils.getProperty(&quot;SQlStats-JP&quot;));</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_TagDetailsform" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">false</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/Objects(&apos;${TC004_ClickonInfomapTag6IOX000A}&apos;)" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/Objects(&apos;${TC004_ClickonInfomapTag6IOX000A}&apos;)</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_API_GetForm-Tag" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">false</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetForm" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&quot;key&quot;:&quot;${TC003_SearchTagWFullName6IOX000A}&quot;,&quot;getTodoListTaskForm&quot;:false}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetForm</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">accept-encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, br</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">accept-language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">content-length</stringProp>
                            <stringProp name="Header.value">46</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">content-type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">origin</stringProp>
                            <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">referer</stringProp>
                            <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">sec-ch-ua</stringProp>
                            <stringProp name="Header.value">${HostName}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                            <stringProp name="Header.value">?0</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                            <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">sec-fetch-dest</stringProp>
                            <stringProp name="Header.value">empty</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">sec-fetch-mode</stringProp>
                            <stringProp name="Header.value">cors</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">sec-fetch-site</stringProp>
                            <stringProp name="Header.value">same-origin</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                            <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                            <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">user-agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                        <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                        <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                      </JSONPostProcessor>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="AfterJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    SELECT
               DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255),DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  AS [SQL_Execution],
                   SUM(total_logical_reads)  AS [BufferGets],
                                 SUM(total_physical_reads)  AS [Physical Reads],
                 SUM(total_worker_time) AS [CPU Time Ms],
       SUM(total_elapsed_time)  AS [Elapsed Time]
      FROM sys.dm_exec_query_stats AS qs
    CROSS APPLY (
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  FROM sys.dm_exec_plan_attributes(qs.plan_handle)
                 WHERE attribute = N&apos;dbid&apos;) AS F_DB
               
    GROUP BY DatabaseID

)
SELECT 
       
                  [DatabaseID],[SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
                  [Elapsed Time] 
                  FROM DB_CPU_Stats
where DatabaseName= &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable">SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;

String TransName=&quot;TagDetailsform&quot;;
String SQLStartTime = JMeterUtils.getProperty(&quot;SQLStartTime-JP&quot;);
String SQLEndTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());

log.info(&quot;aSQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
//int DatabaseID = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;);
//log.info(&quot;DatabaseID = &gt; &quot;+DatabaseID);
//log.info(&quot;SQLStartTime = &gt; &quot;+SQLStartTime);
//log.info(&quot;SQLEndTime = &gt; &quot;+SQLEndTime);
Long aSQL_Execution = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;SQL_Execution&quot;);
//log.info(&quot;aSQL_Execution = &gt; &quot;+aSQL_Execution);

Long aBufferGets = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;BufferGets&quot;);
//log.info(&quot;aBufferGets = &gt; &quot;+aBufferGets);
Long aPhysicalReads = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Physical Reads&quot;);
//log.info(&quot;aPhysicalReads = &gt; &quot;+aPhysicalReads);
Long aCPUTimeMs = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;CPU Time Ms&quot;);
//log.info(&quot;aCPUTimeMs = &gt; &quot;+aCPUTimeMs);
Long aElapsedTime = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Elapsed Time&quot;);
//log.info(&quot;aElapsedTime = &gt; &quot;+aElapsedTime);

String BSQlStats = JMeterUtils.getProperty(&quot;SQlStats-JP&quot;);
//log.info(&quot;BSQlStats = &gt; &quot;+BSQlStats);

Long bSQL_Execution = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;SQL_Execution=&quot;)+14, BSQlStats.indexOf(&quot;, BufferGets=&quot;)));
//log.info(&quot;bSQL_Execution = &gt; &quot;+bSQL_Execution);

//Long.parseLong
Long bBufferGets = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11, BSQlStats.indexOf(&quot;}&quot;)));
//int bBufferGets = Integer.parseInt(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11,BSQlStats.indexOf(&quot;}&quot;)));
//log.info(&quot;bBufferGets = &gt; &quot;+bBufferGets);

Long bPhysicalReads = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Physical Reads=&quot;)+15, BSQlStats.indexOf(&quot;, DatabaseID&quot;)));
//log.info(&quot;bPhysicalReads = &gt; &quot;+bPhysicalReads);

Long bCPUTimeMs = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;CPU Time Ms=&quot;)+12, BSQlStats.indexOf(&quot;, Elapsed Time&quot;)));
//log.info(&quot;bCPUTimeMs = &gt; &quot;+bCPUTimeMs);

Long bElapsedTime = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Elapsed Time=&quot;)+13, BSQlStats.indexOf(&quot;, SQL_Execution&quot;)));
//log.info(&quot;bElapsedTime = &gt; &quot;+bElapsedTime);

//log.info(&quot;SQL_Execution = &gt; &quot;+(aSQL_Execution-bSQL_Execution));
//log.info(&quot;BufferGets = &gt; &quot;+(aBufferGets-bBufferGets));
//log.info(&quot;PhysicalReads = &gt; &quot;+(aPhysicalReads-bPhysicalReads));
//log.info(&quot;CPUTimeMs = &gt; &quot;+(aCPUTimeMs-bCPUTimeMs));
//log.info(&quot;ElapsedTime = &gt; &quot;+(aElapsedTime-bElapsedTime));
log.info(&quot;===================================================&quot;);
String Perfcsv = TransName +&quot;,&quot;+String.valueOf(vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;))+&quot;,&quot;+SQLStartTime+&quot;,&quot;+SQLEndTime+&quot;,&quot;+String.valueOf(aSQL_Execution-bSQL_Execution)+&quot;,&quot;+String.valueOf(aBufferGets-bBufferGets)+&quot;,&quot;+String.valueOf(aPhysicalReads-bPhysicalReads)+&quot;,&quot;+String.valueOf(aCPUTimeMs-bCPUTimeMs)+&quot;,&quot;+String.valueOf(aElapsedTime-bElapsedTime);

log.info(&quot;Perfcsv = &gt;&quot;+Perfcsv);
log.info(&quot;===================================================&quot;);
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLEndTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

String PerfCSVFile = vars.get(&quot;OutputPath&quot;) + vars.get(&quot;OutputFolderName&quot;) +&quot;perf.csv&quot;;
FileWriter fstream = new FileWriter(PerfCSVFile,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(Perfcsv);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="7" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">false</boolProp>
              </TransactionController>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="BeforeJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    Select 
     DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255), DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  As [SQL_Execution],
                   SUM(total_logical_reads)  As [BufferGets],
                                 SUM(total_physical_reads)  As [Physical Reads],
                 SUM(total_worker_time) As [CPU Time Ms],
       SUM(total_elapsed_time)  As [Elapsed Time]
      From sys.dm_exec_query_stats AS qs
    CROSS APPLY(
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  From sys.dm_exec_plan_attributes(qs.plan_handle)
                  Where Attribute = N&apos;dbid&apos;) As F_DB
               
    Group BY DatabaseID
)
Select 

       [DatabaseID], [SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
       [Elapsed Time] 
                  From DB_CPU_Stats
Where DatabaseName = &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable"> SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;
String SQLStartTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());
//log.info(&quot;SQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLStartTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

log.info(&quot;Before SQlStats = &gt; &quot;+JMeterUtils.getProperty(&quot;SQlStats-JP&quot;));</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_SearchAllTagsW3Char" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">false</boolProp>
                </TransactionController>
                <hashTree>
                  <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="SearchTags06" elementType="Argument">
                        <stringProp name="Argument.name">SearchTags06</stringProp>
                        <stringProp name="Argument.value">*406*</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </Arguments>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1FDWCriticalityRating&apos;)" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$expand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$expand</stringProp>
                          <stringProp name="Argument.value">Items,Descendants</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1FDWCriticalityRating&apos;)</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1FDWTagStatus&apos;)" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$expand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$expand</stringProp>
                          <stringProp name="Argument.value">Items,Descendants</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1FDWTagStatus&apos;)</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1CFIHOS_yesno&apos;)" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$expand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$expand</stringProp>
                          <stringProp name="Argument.value">Items,Descendants</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1CFIHOS_yesno&apos;)</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/Tags" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="%24format" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24format</stringProp>
                          <stringProp name="Argument.value">json</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24top</stringProp>
                          <stringProp name="Argument.value">25</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24filter</stringProp>
                          <stringProp name="Argument.value">contains(Name%2C%27${SearchTags06}%27)</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24count</stringProp>
                          <stringProp name="Argument.value">false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="_" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">_</stringProp>
                          <stringProp name="Argument.value">1656578516968</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/Tags</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">x-requested-with</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">
String DynamicOBID;
DynamicOBID = vars.get(&quot;DynamicOBID_ALL&quot;);
DynamicOBID = &quot;\&quot;&quot;+ DynamicOBID.replaceAll(&quot;,&quot;,&quot;\&quot;,\&quot;&quot;) + &quot;\&quot;&quot;;
vars.put(&quot;DynamicOBIDs&quot;, DynamicOBID);</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC006_SearchAllTagsW3Char6IP5NOXA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;PU40-C-0036406&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC006_SearchAllTagsW3Char6IP5NOXA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC006_SearchAllTagsW3Char6IP5NOXA} ${TC006_SearchAllTagsW3Char6IP5NOXA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC006_SearchAllTagsW3Char6IP5NOXA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC006_SearchAllTagsW3Char6IP5NOXA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;PU40-C-0036406&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC006_SearchAllTagsW3Char6IP5NOXA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC006_SearchAllTagsW3Char6IP5NOXA} ${TC006_SearchAllTagsW3Char6IP5NOXA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC006_SearchAllTagsW3Char6IP5NOXA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC006_SearchAllTagsW3Char6IP379HA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;PU24-MS-0023406&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC006_SearchAllTagsW3Char6IP379HA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC006_SearchAllTagsW3Char6IP379HA} ${TC006_SearchAllTagsW3Char6IP379HA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC006_SearchAllTagsW3Char6IP379HA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC006_SearchAllTagsW3Char6IOZFL2A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;PU15-DPLT-0040620&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC006_SearchAllTagsW3Char6IOZFL2A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC006_SearchAllTagsW3Char6IOZFL2A} ${TC006_SearchAllTagsW3Char6IOZFL2A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC006_SearchAllTagsW3Char6IOZFL2A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC006_SearchAllTagsW3Char6IP36LZA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;PU32-MS-0024060&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC006_SearchAllTagsW3Char6IP36LZA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC006_SearchAllTagsW3Char6IP36LZA} ${TC006_SearchAllTagsW3Char6IP36LZA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC006_SearchAllTagsW3Char6IP36LZA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC006_SearchAllTagsW3Char6IP3F9OA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;PU34-TT-0012406&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC006_SearchAllTagsW3Char6IP3F9OA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC006_SearchAllTagsW3Char6IP3F9OA} ${TC006_SearchAllTagsW3Char6IP3F9OA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC006_SearchAllTagsW3Char6IP3F9OA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC006_SearchAllTagsW3Char6IP38W2A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;PU10-DSV-0040617&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC006_SearchAllTagsW3Char6IP38W2A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC006_SearchAllTagsW3Char6IP38W2A} ${TC006_SearchAllTagsW3Char6IP38W2A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC006_SearchAllTagsW3Char6IP38W2A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC006_SearchAllTagsW3Char6IP3JIMA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;PU29-P-0040691&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC006_SearchAllTagsW3Char6IP3JIMA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC006_SearchAllTagsW3Char6IP3JIMA} ${TC006_SearchAllTagsW3Char6IP3JIMA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC006_SearchAllTagsW3Char6IP3JIMA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC006_SearchAllTagsW3Char6IOX73FA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;PU03-EB-0034063&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC006_SearchAllTagsW3Char6IOX73FA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC006_SearchAllTagsW3Char6IOX73FA} ${TC006_SearchAllTagsW3Char6IOX73FA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC006_SearchAllTagsW3Char6IOX73FA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC006_SearchAllTagsW3Char6IOX73FA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;PU03-EB-0034063&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC006_SearchAllTagsW3Char6IOX73FA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC006_SearchAllTagsW3Char6IOX73FA} ${TC006_SearchAllTagsW3Char6IOX73FA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC006_SearchAllTagsW3Char6IOX73FA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC006_SearchAllTagsW3Char6IOX73FA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;PU03-EB-0034063&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC006_SearchAllTagsW3Char6IOX73FA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC006_SearchAllTagsW3Char6IOX73FA} ${TC006_SearchAllTagsW3Char6IOX73FA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC006_SearchAllTagsW3Char6IOX73FA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC006_SearchAllTagsW3Char6IOX73FA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;PU03-EB-0034063&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC006_SearchAllTagsW3Char6IOX73FA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC006_SearchAllTagsW3Char6IOX73FA} ${TC006_SearchAllTagsW3Char6IOX73FA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC006_SearchAllTagsW3Char6IOX73FA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
                    <stringProp name="delimiter">,</stringProp>
                    <stringProp name="fileEncoding"></stringProp>
                    <stringProp name="filename">${InputPath}SearchTags06.csv</stringProp>
                    <boolProp name="ignoreFirstLine">false</boolProp>
                    <boolProp name="quotedData">false</boolProp>
                    <boolProp name="recycle">true</boolProp>
                    <stringProp name="shareMode">shareMode.all</stringProp>
                    <boolProp name="stopThread">false</boolProp>
                    <stringProp name="variableNames">SearchTags06</stringProp>
                  </CSVDataSet>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/Tags" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="%24format" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24format</stringProp>
                          <stringProp name="Argument.value">json</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24top</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24filter</stringProp>
                          <stringProp name="Argument.value">contains(Name%2C%27${SearchTags06}%27)</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24count</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="_" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">_</stringProp>
                          <stringProp name="Argument.value">1656578516968</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/Tags</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
                    <stringProp name="delimiter">,</stringProp>
                    <stringProp name="fileEncoding"></stringProp>
                    <stringProp name="filename">${InputPath}SearchTags06.csv</stringProp>
                    <boolProp name="ignoreFirstLine">false</boolProp>
                    <boolProp name="quotedData">false</boolProp>
                    <boolProp name="recycle">true</boolProp>
                    <stringProp name="shareMode">shareMode.all</stringProp>
                    <boolProp name="stopThread">false</boolProp>
                    <stringProp name="variableNames">SearchTags06</stringProp>
                  </CSVDataSet>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetDynIconName()" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ObjectObids&quot;: [${DynamicOBIDs}]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetDynIconName()</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">292</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..OBID||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;ListEditContextMenu&quot;],&quot;ObjectObidAndDomains&quot;:[${DynamicOBIDs}]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">338</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Notifications" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$select" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$select</stringProp>
                          <stringProp name="Argument.value">OBID,Name,Description,CreationDate,SPFContextObjectOBID</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$top</stringProp>
                          <stringProp name="Argument.value">25</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$skip" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$skip</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$count</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$orderby" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$orderby</stringProp>
                          <stringProp name="Argument.value">CreationDate+desc</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Notifications</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json,application/vnd.intergraph.data+json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;CreateObj&quot;,&quot;ManageFiles&quot;,&quot;ManageSignedFiles&quot;,&quot;CopyObj&quot;,&quot;CreateClassObj&quot;,&quot;CreateClassObjAndRel&quot;,&quot;CreateObjAndRel&quot;,&quot;CreateClassObjAndLoad&quot;,&quot;SDxCreateClassObjAndLoad&quot;,&quot;CreateWizardClassObj&quot;,&quot;CreateSignWizardClassObj&quot;,&quot;CreateObjectFromSelectedObjects&quot;,&quot;CreateSignObjectFromSelectedObjects&quot;,&quot;EditObj&quot;,&quot;EditWizardObj&quot;,&quot;EditSignWizardObj&quot;,&quot;ShowInbox&quot;,&quot;ReplaceFiles&quot;,&quot;CheckInFiles&quot;,&quot;TaskReassignmentConfiguration&quot;,&quot;SDARelationshipBuilder&quot;,&quot;CreateEntryPointFromQFind&quot;,&quot;AdminEntryPoints&quot;,&quot;ShowWorkflow&quot;,&quot;SDxWorkflowTemplateEditor&quot;,&quot;SDxCreateWorkflowTemplate&quot;,&quot;ListEditContextMenu&quot;,&quot;FTRSearch&quot;,&quot;AssignRecipients&quot;,&quot;Revise&quot;,&quot;UploadDocument&quot;,&quot;EditObjWithClassification&quot;,&quot;SDAManageDataTree&quot;,&quot;ShowInboxForObject&quot;,&quot;SDACopyDataBookContent&quot;,&quot;ConfigRoleAssignment&quot;,&quot;DashboardCreatePage&quot;,&quot;DashboardUpdatePage&quot;,&quot;InsertHistRev&quot;,&quot;CopyDistributionMatrix&quot;,&quot;MultiStepReAssign&quot;,&quot;AddRecipient&quot;,&quot;ExpandDocNestedStructure&quot;,&quot;ExpandFileNestedStructure&quot;,&quot;TabOutletManagement&quot;,&quot;CompareWorkflowTemplates&quot;,&quot;MaintainCalendar&quot;,&quot;EditObjModal&quot;,&quot;RegenerateMetadata&quot;,&quot;QueryEntity&quot;,&quot;ShareUrl&quot;,&quot;ShowObj&quot;,&quot;TerminateObj&quot;,&quot;DeleteObj&quot;,&quot;AttachWorkflow&quot;,&quot;CancelDocument&quot;,&quot;UnCancelDocument&quot;,&quot;ExecuteSavedReportFromObject&quot;,&quot;UndoEditFiles&quot;,&quot;EditFiles&quot;,&quot;XmtlCancel&quot;,&quot;XmtlUndoCancel&quot;,&quot;StepRejectAction&quot;,&quot;StepAcceptAction&quot;,&quot;StepClaim&quot;,&quot;SharepointCreateDocument&quot;,&quot;SharepointDownloadFile&quot;,&quot;SharepointViewNative&quot;,&quot;GenerateAlternateRendition&quot;,&quot;OpenXMLWordReport&quot;,&quot;SignOff&quot;,&quot;SignOffWithForm&quot;,&quot;UndoSignOff&quot;,&quot;SPFExchangeData&quot;,&quot;LaunchURLWithDynamicArgs&quot;,&quot;SDARelationshipBuilder&quot;,&quot;LaunchURLFromFeatureSet&quot;,&quot;WebClientExtensibility&quot;,&quot;GenerateMergedRendition&quot;,&quot;ListEditUncontrolledItems&quot;,&quot;WorkflowDetailsReport&quot;,&quot;ShareFile&quot;,&quot;CopyToLocalFile&quot;,&quot;GenerateMergedRenditionForFiles&quot;,&quot;PrintFile&quot;,&quot;UnlockUserAccount&quot;,&quot;StartScheduler&quot;,&quot;StopScheduler&quot;,&quot;SPFCopyConfigAccess&quot;,&quot;Dashboard&quot;,&quot;UpdateReferences&quot;,&quot;UpdateReferredBy&quot;,&quot;RelationshipManagement&quot;,&quot;GenerateThumbnail&quot;,&quot;EditFilesOnline&quot;,&quot;FinishEditOnline&quot;,&quot;FinishEditOnlineSignOff&quot;,&quot;UndoEditOnline&quot;,&quot;ViewOnline&quot;,&quot;GoToOneDrive&quot;,&quot;UpdateWidget&quot;,&quot;ReplaceEditableCopyWithMasterCopy&quot;,&quot;RequestForESign&quot;,&quot;CompleteESign&quot;,&quot;CompareDocuments&quot;,&quot;CreateWebGLSchedulerTask&quot;,&quot;SDACompareFiles&quot;,&quot;Navigate&quot;,&quot;ViewInDocument&quot;,&quot;SmartPlantReview&quot;,&quot;ViewBatchRenditionLog&quot;,&quot;ClearBravaCache&quot;,&quot;ViewInVisualReport&quot;,&quot;SCLBQualityAssuranceReviewDetails&quot;,&quot;SCLBManageQualityAssuranceReviewPlan&quot;,&quot;SCLBQualityAssuranceReview&quot;,&quot;SDAImpactAnalysis&quot;,&quot;ConflictResolution&quot;,&quot;SCLBCommunicationManagementDetails&quot;,&quot;SCLBCommunicationManagement&quot;,&quot;SOPSCommunicationManagementDetails&quot;,&quot;SOPSCommunicationManagement&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;SCLBQualityAssuranceRegister&quot;,&quot;SDAManageMarkupLayersForRendition&quot;,&quot;SOPSManageMarkupLayersForRendition&quot;,&quot;SDAImpactAnalysis&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;ConflictResolution&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;ProjectHandover&quot;,&quot;SDAShowMySDVJobs&quot;,&quot;SDxShowMySDVJobs&quot;,&quot;SDAApproveSDVJob&quot;,&quot;SDAViewSDVJobSummary&quot;,&quot;SDADeleteSDVJob&quot;,&quot;SDASDVDownloadValidationReport&quot;,&quot;LScanViewSite&quot;,&quot;LScanViewScan&quot;,&quot;LScanSynchronizeSiteData&quot;,&quot;LScanViewTagInScan&quot;,&quot;ViewConsolidatedDataForObject&quot;,&quot;ViewSharedData&quot;,&quot;CreateWorkAreaDefinition&quot;,&quot;EditWorkAreaDefinition&quot;,&quot;RunDanglingRelsReport&quot;,&quot;RegisterAuthoringTool&quot;,&quot;InconsistencyReportWithStartingObject&quot;,&quot;InconsistencyReportByQuery&quot;,&quot;InconsistencyReport&quot;,&quot;RegenerateCommonSchema&quot;,&quot;CancelChangeAction&quot;,&quot;SIOInconsistencyReportByQuery&quot;,&quot;RelateObjectsToWorkArea&quot;,&quot;ResolveDuplicateDocuments&quot;,&quot;SPFNContentExtraction&quot;,&quot;UnClaimObj&quot;,&quot;ClaimObj&quot;,&quot;MergeConfig&quot;,&quot;MergeObj&quot;,&quot;MergeStructure&quot;,&quot;CancelProject&quot;,&quot;ChangeConfigStatus&quot;,&quot;SyncObjects&quot;,&quot;SPXSAPSync&quot;,&quot;SDxConnSync&quot;,&quot;ExampleClientAPIRoute&quot;,&quot;HistoryViewRoute&quot;,&quot;ExampleClientAPIAction&quot;,&quot;ExampleClientAPIModal&quot;,&quot;HistoryViewModal&quot;,&quot;ExampleClientAPIWidget&quot;],&quot;ObjectObidAndDomains&quot;:[&quot;${TC006_SearchAllTagsW3Char6IP379HA}&quot;]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">3752</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC006_SearchAllTagsW3Char6IP379HA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;GenDetail&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC006_SearchAllTagsW3Char6IP379HA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC006_SearchAllTagsW3Char6IP379HA} ${TC006_SearchAllTagsW3Char6IP379HA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC006_SearchAllTagsW3Char6IP379HA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="AfterJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    SELECT
               DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255),DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  AS [SQL_Execution],
                   SUM(total_logical_reads)  AS [BufferGets],
                                 SUM(total_physical_reads)  AS [Physical Reads],
                 SUM(total_worker_time) AS [CPU Time Ms],
       SUM(total_elapsed_time)  AS [Elapsed Time]
      FROM sys.dm_exec_query_stats AS qs
    CROSS APPLY (
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  FROM sys.dm_exec_plan_attributes(qs.plan_handle)
                 WHERE attribute = N&apos;dbid&apos;) AS F_DB
               
    GROUP BY DatabaseID

)
SELECT 
       
                  [DatabaseID],[SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
                  [Elapsed Time] 
                  FROM DB_CPU_Stats
where DatabaseName= &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable">SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;

String TransName=&quot;SearchAllTagsW3Char&quot;;
String SQLStartTime = JMeterUtils.getProperty(&quot;SQLStartTime-JP&quot;);
String SQLEndTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());

log.info(&quot;aSQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
//int DatabaseID = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;);
//log.info(&quot;DatabaseID = &gt; &quot;+DatabaseID);
//log.info(&quot;SQLStartTime = &gt; &quot;+SQLStartTime);
//log.info(&quot;SQLEndTime = &gt; &quot;+SQLEndTime);
Long aSQL_Execution = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;SQL_Execution&quot;);
//log.info(&quot;aSQL_Execution = &gt; &quot;+aSQL_Execution);

Long aBufferGets = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;BufferGets&quot;);
//log.info(&quot;aBufferGets = &gt; &quot;+aBufferGets);
Long aPhysicalReads = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Physical Reads&quot;);
//log.info(&quot;aPhysicalReads = &gt; &quot;+aPhysicalReads);
Long aCPUTimeMs = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;CPU Time Ms&quot;);
//log.info(&quot;aCPUTimeMs = &gt; &quot;+aCPUTimeMs);
Long aElapsedTime = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Elapsed Time&quot;);
//log.info(&quot;aElapsedTime = &gt; &quot;+aElapsedTime);

String BSQlStats = JMeterUtils.getProperty(&quot;SQlStats-JP&quot;);
//log.info(&quot;BSQlStats = &gt; &quot;+BSQlStats);

Long bSQL_Execution = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;SQL_Execution=&quot;)+14, BSQlStats.indexOf(&quot;, BufferGets=&quot;)));
//log.info(&quot;bSQL_Execution = &gt; &quot;+bSQL_Execution);

//Long.parseLong
Long bBufferGets = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11, BSQlStats.indexOf(&quot;}&quot;)));
//int bBufferGets = Integer.parseInt(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11,BSQlStats.indexOf(&quot;}&quot;)));
//log.info(&quot;bBufferGets = &gt; &quot;+bBufferGets);

Long bPhysicalReads = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Physical Reads=&quot;)+15, BSQlStats.indexOf(&quot;, DatabaseID&quot;)));
//log.info(&quot;bPhysicalReads = &gt; &quot;+bPhysicalReads);

Long bCPUTimeMs = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;CPU Time Ms=&quot;)+12, BSQlStats.indexOf(&quot;, Elapsed Time&quot;)));
//log.info(&quot;bCPUTimeMs = &gt; &quot;+bCPUTimeMs);

Long bElapsedTime = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Elapsed Time=&quot;)+13, BSQlStats.indexOf(&quot;, SQL_Execution&quot;)));
//log.info(&quot;bElapsedTime = &gt; &quot;+bElapsedTime);

//log.info(&quot;SQL_Execution = &gt; &quot;+(aSQL_Execution-bSQL_Execution));
//log.info(&quot;BufferGets = &gt; &quot;+(aBufferGets-bBufferGets));
//log.info(&quot;PhysicalReads = &gt; &quot;+(aPhysicalReads-bPhysicalReads));
//log.info(&quot;CPUTimeMs = &gt; &quot;+(aCPUTimeMs-bCPUTimeMs));
//log.info(&quot;ElapsedTime = &gt; &quot;+(aElapsedTime-bElapsedTime));
log.info(&quot;===================================================&quot;);
String Perfcsv = TransName +&quot;,&quot;+String.valueOf(vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;))+&quot;,&quot;+SQLStartTime+&quot;,&quot;+SQLEndTime+&quot;,&quot;+String.valueOf(aSQL_Execution-bSQL_Execution)+&quot;,&quot;+String.valueOf(aBufferGets-bBufferGets)+&quot;,&quot;+String.valueOf(aPhysicalReads-bPhysicalReads)+&quot;,&quot;+String.valueOf(aCPUTimeMs-bCPUTimeMs)+&quot;,&quot;+String.valueOf(aElapsedTime-bElapsedTime);

log.info(&quot;Perfcsv = &gt;&quot;+Perfcsv);
log.info(&quot;===================================================&quot;);
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLEndTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

String PerfCSVFile = vars.get(&quot;OutputPath&quot;) + vars.get(&quot;OutputFolderName&quot;) +&quot;perf.csv&quot;;
FileWriter fstream = new FileWriter(PerfCSVFile,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(Perfcsv);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="8" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">false</boolProp>
              </TransactionController>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="BeforeJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    Select 
     DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255), DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  As [SQL_Execution],
                   SUM(total_logical_reads)  As [BufferGets],
                                 SUM(total_physical_reads)  As [Physical Reads],
                 SUM(total_worker_time) As [CPU Time Ms],
       SUM(total_elapsed_time)  As [Elapsed Time]
      From sys.dm_exec_query_stats AS qs
    CROSS APPLY(
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  From sys.dm_exec_plan_attributes(qs.plan_handle)
                  Where Attribute = N&apos;dbid&apos;) As F_DB
               
    Group BY DatabaseID
)
Select 

       [DatabaseID], [SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
       [Elapsed Time] 
                  From DB_CPU_Stats
Where DatabaseName = &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable"> SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;
String SQLStartTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());
//log.info(&quot;SQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLStartTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

log.info(&quot;Before SQlStats = &gt; &quot;+JMeterUtils.getProperty(&quot;SQlStats-JP&quot;));</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_ClickActionOnATag" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">false</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;CreateObj&quot;,&quot;ManageFiles&quot;,&quot;ManageSignedFiles&quot;,&quot;CopyObj&quot;,&quot;CreateClassObj&quot;,&quot;CreateClassObjAndRel&quot;,&quot;CreateObjAndRel&quot;,&quot;CreateClassObjAndLoad&quot;,&quot;SDxCreateClassObjAndLoad&quot;,&quot;CreateWizardClassObj&quot;,&quot;CreateSignWizardClassObj&quot;,&quot;CreateObjectFromSelectedObjects&quot;,&quot;CreateSignObjectFromSelectedObjects&quot;,&quot;EditObj&quot;,&quot;EditWizardObj&quot;,&quot;EditSignWizardObj&quot;,&quot;ShowInbox&quot;,&quot;ReplaceFiles&quot;,&quot;CheckInFiles&quot;,&quot;TaskReassignmentConfiguration&quot;,&quot;SDARelationshipBuilder&quot;,&quot;CreateEntryPointFromQFind&quot;,&quot;AdminEntryPoints&quot;,&quot;ShowWorkflow&quot;,&quot;SDxWorkflowTemplateEditor&quot;,&quot;SDxCreateWorkflowTemplate&quot;,&quot;ListEditContextMenu&quot;,&quot;FTRSearch&quot;,&quot;AssignRecipients&quot;,&quot;Revise&quot;,&quot;UploadDocument&quot;,&quot;EditObjWithClassification&quot;,&quot;SDAManageDataTree&quot;,&quot;ShowInboxForObject&quot;,&quot;SDACopyDataBookContent&quot;,&quot;ConfigRoleAssignment&quot;,&quot;DashboardCreatePage&quot;,&quot;DashboardUpdatePage&quot;,&quot;InsertHistRev&quot;,&quot;CopyDistributionMatrix&quot;,&quot;MultiStepReAssign&quot;,&quot;AddRecipient&quot;,&quot;ExpandDocNestedStructure&quot;,&quot;ExpandFileNestedStructure&quot;,&quot;TabOutletManagement&quot;,&quot;CompareWorkflowTemplates&quot;,&quot;MaintainCalendar&quot;,&quot;EditObjModal&quot;,&quot;RegenerateMetadata&quot;,&quot;QueryEntity&quot;,&quot;ShareUrl&quot;,&quot;ShowObj&quot;,&quot;TerminateObj&quot;,&quot;DeleteObj&quot;,&quot;AttachWorkflow&quot;,&quot;CancelDocument&quot;,&quot;UnCancelDocument&quot;,&quot;ExecuteSavedReportFromObject&quot;,&quot;UndoEditFiles&quot;,&quot;EditFiles&quot;,&quot;XmtlCancel&quot;,&quot;XmtlUndoCancel&quot;,&quot;StepRejectAction&quot;,&quot;StepAcceptAction&quot;,&quot;StepClaim&quot;,&quot;SharepointCreateDocument&quot;,&quot;SharepointDownloadFile&quot;,&quot;SharepointViewNative&quot;,&quot;GenerateAlternateRendition&quot;,&quot;OpenXMLWordReport&quot;,&quot;SignOff&quot;,&quot;SignOffWithForm&quot;,&quot;UndoSignOff&quot;,&quot;SPFExchangeData&quot;,&quot;LaunchURLWithDynamicArgs&quot;,&quot;SDARelationshipBuilder&quot;,&quot;LaunchURLFromFeatureSet&quot;,&quot;WebClientExtensibility&quot;,&quot;GenerateMergedRendition&quot;,&quot;ListEditUncontrolledItems&quot;,&quot;WorkflowDetailsReport&quot;,&quot;ShareFile&quot;,&quot;CopyToLocalFile&quot;,&quot;GenerateMergedRenditionForFiles&quot;,&quot;PrintFile&quot;,&quot;UnlockUserAccount&quot;,&quot;StartScheduler&quot;,&quot;StopScheduler&quot;,&quot;SPFCopyConfigAccess&quot;,&quot;Dashboard&quot;,&quot;UpdateReferences&quot;,&quot;UpdateReferredBy&quot;,&quot;RelationshipManagement&quot;,&quot;GenerateThumbnail&quot;,&quot;EditFilesOnline&quot;,&quot;FinishEditOnline&quot;,&quot;FinishEditOnlineSignOff&quot;,&quot;UndoEditOnline&quot;,&quot;ViewOnline&quot;,&quot;GoToOneDrive&quot;,&quot;UpdateWidget&quot;,&quot;ReplaceEditableCopyWithMasterCopy&quot;,&quot;RequestForESign&quot;,&quot;CompleteESign&quot;,&quot;CompareDocuments&quot;,&quot;CreateWebGLSchedulerTask&quot;,&quot;SDACompareFiles&quot;,&quot;Navigate&quot;,&quot;ViewInDocument&quot;,&quot;SmartPlantReview&quot;,&quot;ViewBatchRenditionLog&quot;,&quot;ClearBravaCache&quot;,&quot;ViewInVisualReport&quot;,&quot;SCLBQualityAssuranceReviewDetails&quot;,&quot;SCLBManageQualityAssuranceReviewPlan&quot;,&quot;SCLBQualityAssuranceReview&quot;,&quot;SDAImpactAnalysis&quot;,&quot;ConflictResolution&quot;,&quot;SCLBCommunicationManagementDetails&quot;,&quot;SCLBCommunicationManagement&quot;,&quot;SOPSCommunicationManagementDetails&quot;,&quot;SOPSCommunicationManagement&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;SCLBQualityAssuranceRegister&quot;,&quot;SDAManageMarkupLayersForRendition&quot;,&quot;SOPSManageMarkupLayersForRendition&quot;,&quot;SDAImpactAnalysis&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;ConflictResolution&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;ProjectHandover&quot;,&quot;SDAShowMySDVJobs&quot;,&quot;SDxShowMySDVJobs&quot;,&quot;SDAApproveSDVJob&quot;,&quot;SDAViewSDVJobSummary&quot;,&quot;SDADeleteSDVJob&quot;,&quot;SDASDVDownloadValidationReport&quot;,&quot;LScanViewSite&quot;,&quot;LScanViewScan&quot;,&quot;LScanSynchronizeSiteData&quot;,&quot;LScanViewTagInScan&quot;,&quot;ViewConsolidatedDataForObject&quot;,&quot;ViewSharedData&quot;,&quot;CreateWorkAreaDefinition&quot;,&quot;EditWorkAreaDefinition&quot;,&quot;RunDanglingRelsReport&quot;,&quot;RegisterAuthoringTool&quot;,&quot;InconsistencyReportWithStartingObject&quot;,&quot;InconsistencyReportByQuery&quot;,&quot;InconsistencyReport&quot;,&quot;RegenerateCommonSchema&quot;,&quot;CancelChangeAction&quot;,&quot;SIOInconsistencyReportByQuery&quot;,&quot;RelateObjectsToWorkArea&quot;,&quot;ResolveDuplicateDocuments&quot;,&quot;SPFNContentExtraction&quot;,&quot;UnClaimObj&quot;,&quot;ClaimObj&quot;,&quot;MergeConfig&quot;,&quot;MergeObj&quot;,&quot;MergeStructure&quot;,&quot;CancelProject&quot;,&quot;ChangeConfigStatus&quot;,&quot;SyncObjects&quot;,&quot;SPXSAPSync&quot;,&quot;SDxConnSync&quot;,&quot;ExampleClientAPIRoute&quot;,&quot;HistoryViewRoute&quot;,&quot;ExampleClientAPIAction&quot;,&quot;ExampleClientAPIModal&quot;,&quot;HistoryViewModal&quot;,&quot;ExampleClientAPIWidget&quot;],&quot;ObjectObidAndDomains&quot;:[&quot;${TC006_SearchAllTagsW3Char6IOX73FA}&quot;]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">3752</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC007_ClickActionOnATag6IOX73FA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;HistoryRoute&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC007_ClickActionOnATag6IOX73FA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC007_ClickActionOnATag6IOX73FA} ${TC007_ClickActionOnATag6IOX73FA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC007_ClickActionOnATag6IOX73FA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC007_ClickActionOnATag6IOX73FA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;HistoryRoute&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC007_ClickActionOnATag6IOX73FA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC007_ClickActionOnATag6IOX73FA} ${TC007_ClickActionOnATag6IOX73FA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC007_ClickActionOnATag6IOX73FA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC007_ClickActionOnATag000SNAA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Features[?(@.Name == &quot;FDWTagRelationshipBuilder&quot;)].MethodObid</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC007_ClickActionOnATag000SNAA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..MethodObid</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC007_ClickActionOnATag000SNAA} ${TC007_ClickActionOnATag000SNAA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC007_ClickActionOnATag000SNAA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC007_ClickActionOnATag6IOX73FA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;HistoryRoute&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC007_ClickActionOnATag6IOX73FA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC007_ClickActionOnATag6IOX73FA} ${TC007_ClickActionOnATag6IOX73FA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC007_ClickActionOnATag6IOX73FA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC007_ClickActionOnATag&apos;6IOX73FA&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;HistoryRoute&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC007_ClickActionOnATag&apos;6IOX73FA&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC007_ClickActionOnATag&apos;6IOX73FA&apos;} ${TC007_ClickActionOnATag&apos;6IOX73FA&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC007_ClickActionOnATag&apos;6IOX73FA&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetNavigationOptions" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;StartingObjectOBID&quot;:&quot;${TC006_SearchAllTagsW3Char6IOX73FA}&quot;,&quot;RelLookAhead&quot;:true,&quot;EdgeLookAhead&quot;:true,&quot;IsInfoMap&quot;:false}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetNavigationOptions</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">92</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC007_ClickActionOnATag6IOX73FA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Classification&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC007_ClickActionOnATag6IOX73FA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC007_ClickActionOnATag6IOX73FA} ${TC007_ClickActionOnATag6IOX73FA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC007_ClickActionOnATag6IOX73FA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC007_ClickActionOnATag6IOX73FA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Classification&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC007_ClickActionOnATag6IOX73FA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC007_ClickActionOnATag6IOX73FA} ${TC007_ClickActionOnATag6IOX73FA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC007_ClickActionOnATag6IOX73FA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC007_ClickActionOnATag&apos;6IOX73FA&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Classification&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC007_ClickActionOnATag&apos;6IOX73FA&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC007_ClickActionOnATag&apos;6IOX73FA&apos;} ${TC007_ClickActionOnATag&apos;6IOX73FA&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC007_ClickActionOnATag&apos;6IOX73FA&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;CreateObj&quot;,&quot;ManageFiles&quot;,&quot;ManageSignedFiles&quot;,&quot;CopyObj&quot;,&quot;CreateClassObj&quot;,&quot;CreateClassObjAndRel&quot;,&quot;CreateObjAndRel&quot;,&quot;CreateClassObjAndLoad&quot;,&quot;SDxCreateClassObjAndLoad&quot;,&quot;CreateWizardClassObj&quot;,&quot;CreateSignWizardClassObj&quot;,&quot;CreateObjectFromSelectedObjects&quot;,&quot;CreateSignObjectFromSelectedObjects&quot;,&quot;EditObj&quot;,&quot;EditWizardObj&quot;,&quot;EditSignWizardObj&quot;,&quot;ShowInbox&quot;,&quot;ReplaceFiles&quot;,&quot;CheckInFiles&quot;,&quot;TaskReassignmentConfiguration&quot;,&quot;SDARelationshipBuilder&quot;,&quot;CreateEntryPointFromQFind&quot;,&quot;AdminEntryPoints&quot;,&quot;ShowWorkflow&quot;,&quot;SDxWorkflowTemplateEditor&quot;,&quot;SDxCreateWorkflowTemplate&quot;,&quot;ListEditContextMenu&quot;,&quot;FTRSearch&quot;,&quot;AssignRecipients&quot;,&quot;Revise&quot;,&quot;UploadDocument&quot;,&quot;EditObjWithClassification&quot;,&quot;SDAManageDataTree&quot;,&quot;ShowInboxForObject&quot;,&quot;SDACopyDataBookContent&quot;,&quot;ConfigRoleAssignment&quot;,&quot;DashboardCreatePage&quot;,&quot;DashboardUpdatePage&quot;,&quot;InsertHistRev&quot;,&quot;CopyDistributionMatrix&quot;,&quot;MultiStepReAssign&quot;,&quot;AddRecipient&quot;,&quot;ExpandDocNestedStructure&quot;,&quot;ExpandFileNestedStructure&quot;,&quot;TabOutletManagement&quot;,&quot;CompareWorkflowTemplates&quot;,&quot;MaintainCalendar&quot;,&quot;EditObjModal&quot;,&quot;RegenerateMetadata&quot;,&quot;QueryEntity&quot;,&quot;ShareUrl&quot;,&quot;ShowObj&quot;,&quot;TerminateObj&quot;,&quot;DeleteObj&quot;,&quot;AttachWorkflow&quot;,&quot;CancelDocument&quot;,&quot;UnCancelDocument&quot;,&quot;ExecuteSavedReportFromObject&quot;,&quot;UndoEditFiles&quot;,&quot;EditFiles&quot;,&quot;XmtlCancel&quot;,&quot;XmtlUndoCancel&quot;,&quot;StepRejectAction&quot;,&quot;StepAcceptAction&quot;,&quot;StepClaim&quot;,&quot;SharepointCreateDocument&quot;,&quot;SharepointDownloadFile&quot;,&quot;SharepointViewNative&quot;,&quot;GenerateAlternateRendition&quot;,&quot;OpenXMLWordReport&quot;,&quot;SignOff&quot;,&quot;SignOffWithForm&quot;,&quot;UndoSignOff&quot;,&quot;SPFExchangeData&quot;,&quot;LaunchURLWithDynamicArgs&quot;,&quot;SDARelationshipBuilder&quot;,&quot;LaunchURLFromFeatureSet&quot;,&quot;WebClientExtensibility&quot;,&quot;GenerateMergedRendition&quot;,&quot;ListEditUncontrolledItems&quot;,&quot;WorkflowDetailsReport&quot;,&quot;ShareFile&quot;,&quot;CopyToLocalFile&quot;,&quot;GenerateMergedRenditionForFiles&quot;,&quot;PrintFile&quot;,&quot;UnlockUserAccount&quot;,&quot;StartScheduler&quot;,&quot;StopScheduler&quot;,&quot;SPFCopyConfigAccess&quot;,&quot;Dashboard&quot;,&quot;UpdateReferences&quot;,&quot;UpdateReferredBy&quot;,&quot;RelationshipManagement&quot;,&quot;GenerateThumbnail&quot;,&quot;EditFilesOnline&quot;,&quot;FinishEditOnline&quot;,&quot;FinishEditOnlineSignOff&quot;,&quot;UndoEditOnline&quot;,&quot;ViewOnline&quot;,&quot;GoToOneDrive&quot;,&quot;UpdateWidget&quot;,&quot;ReplaceEditableCopyWithMasterCopy&quot;,&quot;RequestForESign&quot;,&quot;CompleteESign&quot;,&quot;CompareDocuments&quot;,&quot;CreateWebGLSchedulerTask&quot;,&quot;SDACompareFiles&quot;,&quot;Navigate&quot;,&quot;ViewInDocument&quot;,&quot;SmartPlantReview&quot;,&quot;ViewBatchRenditionLog&quot;,&quot;ClearBravaCache&quot;,&quot;ViewInVisualReport&quot;,&quot;SCLBQualityAssuranceReviewDetails&quot;,&quot;SCLBManageQualityAssuranceReviewPlan&quot;,&quot;SCLBQualityAssuranceReview&quot;,&quot;SDAImpactAnalysis&quot;,&quot;ConflictResolution&quot;,&quot;SCLBCommunicationManagementDetails&quot;,&quot;SCLBCommunicationManagement&quot;,&quot;SOPSCommunicationManagementDetails&quot;,&quot;SOPSCommunicationManagement&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;SCLBQualityAssuranceRegister&quot;,&quot;SDAManageMarkupLayersForRendition&quot;,&quot;SOPSManageMarkupLayersForRendition&quot;,&quot;SDAImpactAnalysis&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;ConflictResolution&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;ProjectHandover&quot;,&quot;SDAShowMySDVJobs&quot;,&quot;SDxShowMySDVJobs&quot;,&quot;SDAApproveSDVJob&quot;,&quot;SDAViewSDVJobSummary&quot;,&quot;SDADeleteSDVJob&quot;,&quot;SDASDVDownloadValidationReport&quot;,&quot;LScanViewSite&quot;,&quot;LScanViewScan&quot;,&quot;LScanSynchronizeSiteData&quot;,&quot;LScanViewTagInScan&quot;,&quot;ViewConsolidatedDataForObject&quot;,&quot;ViewSharedData&quot;,&quot;CreateWorkAreaDefinition&quot;,&quot;EditWorkAreaDefinition&quot;,&quot;RunDanglingRelsReport&quot;,&quot;RegisterAuthoringTool&quot;,&quot;InconsistencyReportWithStartingObject&quot;,&quot;InconsistencyReportByQuery&quot;,&quot;InconsistencyReport&quot;,&quot;RegenerateCommonSchema&quot;,&quot;CancelChangeAction&quot;,&quot;SIOInconsistencyReportByQuery&quot;,&quot;RelateObjectsToWorkArea&quot;,&quot;ResolveDuplicateDocuments&quot;,&quot;SPFNContentExtraction&quot;,&quot;UnClaimObj&quot;,&quot;ClaimObj&quot;,&quot;MergeConfig&quot;,&quot;MergeObj&quot;,&quot;MergeStructure&quot;,&quot;CancelProject&quot;,&quot;ChangeConfigStatus&quot;,&quot;SyncObjects&quot;,&quot;SPXSAPSync&quot;,&quot;SDxConnSync&quot;,&quot;ExampleClientAPIRoute&quot;,&quot;HistoryViewRoute&quot;,&quot;ExampleClientAPIAction&quot;,&quot;ExampleClientAPIModal&quot;,&quot;HistoryViewModal&quot;,&quot;ExampleClientAPIWidget&quot;],&quot;ObjectObidAndDomains&quot;:[&quot;${TC006_SearchAllTagsW3Char6IOX73FA}&quot;]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">3752</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC007_ClickActionOnATag6IOX73FA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;GenDetail&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC007_ClickActionOnATag6IOX73FA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC007_ClickActionOnATag6IOX73FA} ${TC007_ClickActionOnATag6IOX73FA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC007_ClickActionOnATag6IOX73FA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC007_ClickActionOnATag&apos;6IOX73FA&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;GenDetail&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC007_ClickActionOnATag&apos;6IOX73FA&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC007_ClickActionOnATag&apos;6IOX73FA&apos;} ${TC007_ClickActionOnATag&apos;6IOX73FA&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC007_ClickActionOnATag&apos;6IOX73FA&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="AfterJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    SELECT
               DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255),DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  AS [SQL_Execution],
                   SUM(total_logical_reads)  AS [BufferGets],
                                 SUM(total_physical_reads)  AS [Physical Reads],
                 SUM(total_worker_time) AS [CPU Time Ms],
       SUM(total_elapsed_time)  AS [Elapsed Time]
      FROM sys.dm_exec_query_stats AS qs
    CROSS APPLY (
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  FROM sys.dm_exec_plan_attributes(qs.plan_handle)
                 WHERE attribute = N&apos;dbid&apos;) AS F_DB
               
    GROUP BY DatabaseID

)
SELECT 
       
                  [DatabaseID],[SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
                  [Elapsed Time] 
                  FROM DB_CPU_Stats
where DatabaseName= &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable">SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;

String TransName=&quot;ClickActionOnATag&quot;;
String SQLStartTime = JMeterUtils.getProperty(&quot;SQLStartTime-JP&quot;);
String SQLEndTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());

log.info(&quot;aSQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
//int DatabaseID = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;);
//log.info(&quot;DatabaseID = &gt; &quot;+DatabaseID);
//log.info(&quot;SQLStartTime = &gt; &quot;+SQLStartTime);
//log.info(&quot;SQLEndTime = &gt; &quot;+SQLEndTime);
Long aSQL_Execution = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;SQL_Execution&quot;);
//log.info(&quot;aSQL_Execution = &gt; &quot;+aSQL_Execution);

Long aBufferGets = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;BufferGets&quot;);
//log.info(&quot;aBufferGets = &gt; &quot;+aBufferGets);
Long aPhysicalReads = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Physical Reads&quot;);
//log.info(&quot;aPhysicalReads = &gt; &quot;+aPhysicalReads);
Long aCPUTimeMs = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;CPU Time Ms&quot;);
//log.info(&quot;aCPUTimeMs = &gt; &quot;+aCPUTimeMs);
Long aElapsedTime = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Elapsed Time&quot;);
//log.info(&quot;aElapsedTime = &gt; &quot;+aElapsedTime);

String BSQlStats = JMeterUtils.getProperty(&quot;SQlStats-JP&quot;);
//log.info(&quot;BSQlStats = &gt; &quot;+BSQlStats);

Long bSQL_Execution = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;SQL_Execution=&quot;)+14, BSQlStats.indexOf(&quot;, BufferGets=&quot;)));
//log.info(&quot;bSQL_Execution = &gt; &quot;+bSQL_Execution);

//Long.parseLong
Long bBufferGets = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11, BSQlStats.indexOf(&quot;}&quot;)));
//int bBufferGets = Integer.parseInt(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11,BSQlStats.indexOf(&quot;}&quot;)));
//log.info(&quot;bBufferGets = &gt; &quot;+bBufferGets);

Long bPhysicalReads = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Physical Reads=&quot;)+15, BSQlStats.indexOf(&quot;, DatabaseID&quot;)));
//log.info(&quot;bPhysicalReads = &gt; &quot;+bPhysicalReads);

Long bCPUTimeMs = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;CPU Time Ms=&quot;)+12, BSQlStats.indexOf(&quot;, Elapsed Time&quot;)));
//log.info(&quot;bCPUTimeMs = &gt; &quot;+bCPUTimeMs);

Long bElapsedTime = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Elapsed Time=&quot;)+13, BSQlStats.indexOf(&quot;, SQL_Execution&quot;)));
//log.info(&quot;bElapsedTime = &gt; &quot;+bElapsedTime);

//log.info(&quot;SQL_Execution = &gt; &quot;+(aSQL_Execution-bSQL_Execution));
//log.info(&quot;BufferGets = &gt; &quot;+(aBufferGets-bBufferGets));
//log.info(&quot;PhysicalReads = &gt; &quot;+(aPhysicalReads-bPhysicalReads));
//log.info(&quot;CPUTimeMs = &gt; &quot;+(aCPUTimeMs-bCPUTimeMs));
//log.info(&quot;ElapsedTime = &gt; &quot;+(aElapsedTime-bElapsedTime));
log.info(&quot;===================================================&quot;);
String Perfcsv = TransName +&quot;,&quot;+String.valueOf(vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;))+&quot;,&quot;+SQLStartTime+&quot;,&quot;+SQLEndTime+&quot;,&quot;+String.valueOf(aSQL_Execution-bSQL_Execution)+&quot;,&quot;+String.valueOf(aBufferGets-bBufferGets)+&quot;,&quot;+String.valueOf(aPhysicalReads-bPhysicalReads)+&quot;,&quot;+String.valueOf(aCPUTimeMs-bCPUTimeMs)+&quot;,&quot;+String.valueOf(aElapsedTime-bElapsedTime);

log.info(&quot;Perfcsv = &gt;&quot;+Perfcsv);
log.info(&quot;===================================================&quot;);
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLEndTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

String PerfCSVFile = vars.get(&quot;OutputPath&quot;) + vars.get(&quot;OutputFolderName&quot;) +&quot;perf.csv&quot;;
FileWriter fstream = new FileWriter(PerfCSVFile,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(Perfcsv);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="9" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">false</boolProp>
              </TransactionController>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="BeforeJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    Select 
     DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255), DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  As [SQL_Execution],
                   SUM(total_logical_reads)  As [BufferGets],
                                 SUM(total_physical_reads)  As [Physical Reads],
                 SUM(total_worker_time) As [CPU Time Ms],
       SUM(total_elapsed_time)  As [Elapsed Time]
      From sys.dm_exec_query_stats AS qs
    CROSS APPLY(
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  From sys.dm_exec_plan_attributes(qs.plan_handle)
                  Where Attribute = N&apos;dbid&apos;) As F_DB
               
    Group BY DatabaseID
)
Select 

       [DatabaseID], [SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
       [Elapsed Time] 
                  From DB_CPU_Stats
Where DatabaseName = &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable"> SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;
String SQLStartTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());
//log.info(&quot;SQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLStartTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

log.info(&quot;Before SQlStats = &gt; &quot;+JMeterUtils.getProperty(&quot;SQlStats-JP&quot;));</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_ClickRelBuilderOnATag" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">false</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.ValidateMethodAccess" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApi&quot;:&quot;SDARelationshipBuilder&quot;,&quot;MethodObid&quot;:&quot;${TC007_ClickActionOnATag000SNAA}&quot;,&quot;ObjectObidAndDomains&quot;:[&quot;${TC006_SearchAllTagsW3Char6IOX73FA}&quot;]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.ValidateMethodAccess</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">97</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/$batch" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">--batch_a0da064b-8cdb-04b5-67f0-2097ee683c0a&#xd;
Content-Type: application/http&#xd;
Content-Transfer-Encoding: binary&#xd;
&#xd;
GET https://${HostName}/${SPFServer}/api/v2/SDA/Objects?$filter=OBID eq &apos;${TC006_SearchAllTagsW3Char${TC006_SearchAllTagsW3Char&apos;6IOX73FA&apos;}}&apos;&amp;$top=1 HTTP/1.1&#xd;
SPFConfigUID:${SPFConfigUID}&#xd;
SPFResolveDocumentsToVersion: false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/$batch</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">297</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">multipart/mixed;boundary=batch_a0da064b-8cdb-04b5-67f0-2097ee683c0a</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">SubmitalOBID</stringProp>
                      <stringProp name="RegexExtractor.regex">&quot;OBID&quot;:&quot;(.+?)&quot;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">Not FOUND</stringProp>
                      <stringProp name="RegexExtractor.match_number"> 1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/Objects" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$filter</stringProp>
                          <stringProp name="Argument.value">OBID%20eq%20%27${TC007_ClickActionOnATag6IOX73FA}%27</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$top</stringProp>
                          <stringProp name="Argument.value">1</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/Objects</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json,application/vnd.intergraph.columnset.CS_SPFObject+json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..OBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">
String DynamicOBID;
DynamicOBID = vars.get(&quot;DynamicOBID_ALL&quot;);
DynamicOBID = &quot;\&quot;&quot;+ DynamicOBID.replaceAll(&quot;,&quot;,&quot;\&quot;,\&quot;&quot;) + &quot;\&quot;&quot;;
vars.put(&quot;DynamicOBIDs&quot;, DynamicOBID);</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetPinGroups()" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;pblnIgnoreConfigsForPinCounts&quot;:false}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetPinGroups()</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">39</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..GroupOBID||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC008_ClickRelBuilderOnATagPINBOARD</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..GroupOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC008_ClickRelBuilderOnATagPINBOARD-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.GroupOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC008_ClickRelBuilderOnATagPINBOARD} ${TC008_ClickRelBuilderOnATagPINBOARD-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC008_ClickRelBuilderOnATagPINBOARD&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetPinsForPinGroup()" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;pstrObid&quot;:&quot;${TC008_ClickRelBuilderOnATagPINBOARD}&quot;}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetPinsForPinGroup()</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">23</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Notifications" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$select" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$select</stringProp>
                          <stringProp name="Argument.value">OBID,Name,Description,CreationDate,SPFContextObjectOBID</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$top</stringProp>
                          <stringProp name="Argument.value">25</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$skip" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$skip</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$count</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$orderby" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$orderby</stringProp>
                          <stringProp name="Argument.value">CreationDate+desc</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Notifications</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json,application/vnd.intergraph.data+json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="AfterJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    SELECT
               DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255),DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  AS [SQL_Execution],
                   SUM(total_logical_reads)  AS [BufferGets],
                                 SUM(total_physical_reads)  AS [Physical Reads],
                 SUM(total_worker_time) AS [CPU Time Ms],
       SUM(total_elapsed_time)  AS [Elapsed Time]
      FROM sys.dm_exec_query_stats AS qs
    CROSS APPLY (
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  FROM sys.dm_exec_plan_attributes(qs.plan_handle)
                 WHERE attribute = N&apos;dbid&apos;) AS F_DB
               
    GROUP BY DatabaseID

)
SELECT 
       
                  [DatabaseID],[SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
                  [Elapsed Time] 
                  FROM DB_CPU_Stats
where DatabaseName= &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable">SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;

String TransName=&quot;ClickRelBuilderOnATag&quot;;
String SQLStartTime = JMeterUtils.getProperty(&quot;SQLStartTime-JP&quot;);
String SQLEndTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());

log.info(&quot;aSQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
//int DatabaseID = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;);
//log.info(&quot;DatabaseID = &gt; &quot;+DatabaseID);
//log.info(&quot;SQLStartTime = &gt; &quot;+SQLStartTime);
//log.info(&quot;SQLEndTime = &gt; &quot;+SQLEndTime);
Long aSQL_Execution = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;SQL_Execution&quot;);
//log.info(&quot;aSQL_Execution = &gt; &quot;+aSQL_Execution);

Long aBufferGets = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;BufferGets&quot;);
//log.info(&quot;aBufferGets = &gt; &quot;+aBufferGets);
Long aPhysicalReads = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Physical Reads&quot;);
//log.info(&quot;aPhysicalReads = &gt; &quot;+aPhysicalReads);
Long aCPUTimeMs = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;CPU Time Ms&quot;);
//log.info(&quot;aCPUTimeMs = &gt; &quot;+aCPUTimeMs);
Long aElapsedTime = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Elapsed Time&quot;);
//log.info(&quot;aElapsedTime = &gt; &quot;+aElapsedTime);

String BSQlStats = JMeterUtils.getProperty(&quot;SQlStats-JP&quot;);
//log.info(&quot;BSQlStats = &gt; &quot;+BSQlStats);

Long bSQL_Execution = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;SQL_Execution=&quot;)+14, BSQlStats.indexOf(&quot;, BufferGets=&quot;)));
//log.info(&quot;bSQL_Execution = &gt; &quot;+bSQL_Execution);

//Long.parseLong
Long bBufferGets = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11, BSQlStats.indexOf(&quot;}&quot;)));
//int bBufferGets = Integer.parseInt(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11,BSQlStats.indexOf(&quot;}&quot;)));
//log.info(&quot;bBufferGets = &gt; &quot;+bBufferGets);

Long bPhysicalReads = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Physical Reads=&quot;)+15, BSQlStats.indexOf(&quot;, DatabaseID&quot;)));
//log.info(&quot;bPhysicalReads = &gt; &quot;+bPhysicalReads);

Long bCPUTimeMs = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;CPU Time Ms=&quot;)+12, BSQlStats.indexOf(&quot;, Elapsed Time&quot;)));
//log.info(&quot;bCPUTimeMs = &gt; &quot;+bCPUTimeMs);

Long bElapsedTime = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Elapsed Time=&quot;)+13, BSQlStats.indexOf(&quot;, SQL_Execution&quot;)));
//log.info(&quot;bElapsedTime = &gt; &quot;+bElapsedTime);

//log.info(&quot;SQL_Execution = &gt; &quot;+(aSQL_Execution-bSQL_Execution));
//log.info(&quot;BufferGets = &gt; &quot;+(aBufferGets-bBufferGets));
//log.info(&quot;PhysicalReads = &gt; &quot;+(aPhysicalReads-bPhysicalReads));
//log.info(&quot;CPUTimeMs = &gt; &quot;+(aCPUTimeMs-bCPUTimeMs));
//log.info(&quot;ElapsedTime = &gt; &quot;+(aElapsedTime-bElapsedTime));
log.info(&quot;===================================================&quot;);
String Perfcsv = TransName +&quot;,&quot;+String.valueOf(vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;))+&quot;,&quot;+SQLStartTime+&quot;,&quot;+SQLEndTime+&quot;,&quot;+String.valueOf(aSQL_Execution-bSQL_Execution)+&quot;,&quot;+String.valueOf(aBufferGets-bBufferGets)+&quot;,&quot;+String.valueOf(aPhysicalReads-bPhysicalReads)+&quot;,&quot;+String.valueOf(aCPUTimeMs-bCPUTimeMs)+&quot;,&quot;+String.valueOf(aElapsedTime-bElapsedTime);

log.info(&quot;Perfcsv = &gt;&quot;+Perfcsv);
log.info(&quot;===================================================&quot;);
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLEndTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

String PerfCSVFile = vars.get(&quot;OutputPath&quot;) + vars.get(&quot;OutputFolderName&quot;) +&quot;perf.csv&quot;;
FileWriter fstream = new FileWriter(PerfCSVFile,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(Perfcsv);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="10" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">false</boolProp>
              </TransactionController>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="BeforeJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    Select 
     DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255), DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  As [SQL_Execution],
                   SUM(total_logical_reads)  As [BufferGets],
                                 SUM(total_physical_reads)  As [Physical Reads],
                 SUM(total_worker_time) As [CPU Time Ms],
       SUM(total_elapsed_time)  As [Elapsed Time]
      From sys.dm_exec_query_stats AS qs
    CROSS APPLY(
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  From sys.dm_exec_plan_attributes(qs.plan_handle)
                  Where Attribute = N&apos;dbid&apos;) As F_DB
               
    Group BY DatabaseID
)
Select 

       [DatabaseID], [SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
       [Elapsed Time] 
                  From DB_CPU_Stats
Where DatabaseName = &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable"> SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;
String SQLStartTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());
//log.info(&quot;SQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLStartTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

log.info(&quot;Before SQlStats = &gt; &quot;+JMeterUtils.getProperty(&quot;SQlStats-JP&quot;));</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_SearchDocWFullName" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">false</boolProp>
                </TransactionController>
                <hashTree>
                  <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="SearchFDWDocuments09" elementType="Argument">
                        <stringProp name="Argument.name">SearchFDWDocuments09</stringProp>
                        <stringProp name="Argument.value">C-INGR.HSV-AB-000-LT-001</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </Arguments>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/FDWDocuments" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$filter</stringProp>
                          <stringProp name="Argument.value">(contains(Name,%27${SearchFDWDocuments09}%27))</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$top</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$select" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$select</stringProp>
                          <stringProp name="Argument.value">Name</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$count</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/FDWDocuments</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
                    <stringProp name="delimiter">,</stringProp>
                    <stringProp name="fileEncoding"></stringProp>
                    <stringProp name="filename">${InputPath}SearchFDWDocuments09.csv</stringProp>
                    <boolProp name="ignoreFirstLine">false</boolProp>
                    <boolProp name="quotedData">false</boolProp>
                    <boolProp name="recycle">true</boolProp>
                    <stringProp name="shareMode">shareMode.all</stringProp>
                    <boolProp name="stopThread">false</boolProp>
                    <stringProp name="variableNames">SearchFDWDocuments09</stringProp>
                  </CSVDataSet>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/FDWDocuments" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$filter</stringProp>
                          <stringProp name="Argument.value">(contains(Name,%27${SearchFDWDocuments09}%27))</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$top</stringProp>
                          <stringProp name="Argument.value">4</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$select" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$select</stringProp>
                          <stringProp name="Argument.value">Name</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$count</stringProp>
                          <stringProp name="Argument.value">false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/FDWDocuments</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDADocCategories&apos;)" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$expand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$expand</stringProp>
                          <stringProp name="Argument.value">Items,Descendants</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDADocCategories&apos;)</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDADocTypes&apos;)" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$expand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$expand</stringProp>
                          <stringProp name="Argument.value">Items,Descendants</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDADocTypes&apos;)</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1RevisionStates&apos;)" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$expand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$expand</stringProp>
                          <stringProp name="Argument.value">Items,Descendants</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1RevisionStates&apos;)</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDAWorkflowPriorities&apos;)" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$expand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$expand</stringProp>
                          <stringProp name="Argument.value">Items,Descendants</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDAWorkflowPriorities&apos;)</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDAReturnCodes&apos;)" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$expand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$expand</stringProp>
                          <stringProp name="Argument.value">Items,Descendants</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDAReturnCodes&apos;)</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_API_FDWDocuments" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">false</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/FDWDocuments" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="%24format" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">%24format</stringProp>
                            <stringProp name="Argument.value">json</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="%24top" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">%24top</stringProp>
                            <stringProp name="Argument.value">25</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="%24filter" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">%24filter</stringProp>
                            <stringProp name="Argument.value">contains(Name%2C%27${SearchFDWDocuments09}%27)</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="%24count" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">%24count</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="_" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">_</stringProp>
                            <stringProp name="Argument.value">1656587150627</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/FDWDocuments</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">accept</stringProp>
                            <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">accept-encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, br</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">accept-language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">referer</stringProp>
                            <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">sec-ch-ua</stringProp>
                            <stringProp name="Header.value">${HostName}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                            <stringProp name="Header.value">?0</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                            <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">sec-fetch-dest</stringProp>
                            <stringProp name="Header.value">empty</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">sec-fetch-mode</stringProp>
                            <stringProp name="Header.value">cors</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">sec-fetch-site</stringProp>
                            <stringProp name="Header.value">same-origin</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">spfconfiguid</stringProp>
                            <stringProp name="Header.value">${SPFConfigUID}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                            <stringProp name="Header.value">true</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">user-agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">x-requested-with</stringProp>
                            <stringProp name="Header.value">XMLHttpRequest</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                        <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">
String DynamicOBID;
DynamicOBID = vars.get(&quot;DynamicOBID_ALL&quot;);
DynamicOBID = &quot;\&quot;&quot;+ DynamicOBID.replaceAll(&quot;,&quot;,&quot;\&quot;,\&quot;&quot;) + &quot;\&quot;&quot;;
vars.put(&quot;DynamicOBIDs&quot;, DynamicOBID);</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">TC009_SearchDocWFullName6S3W20BA</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-002&quot;)].Id</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                        <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">TC009_SearchDocWFullName6S3W20BA-ALL</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                        <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters">${TC009_SearchDocWFullName6S3W20BA} ${TC009_SearchDocWFullName6S3W20BA-ALL}</stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC009_SearchDocWFullName6S3W20BA&quot;, Second);}
</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">TC009_SearchDocWFullName6S3W20BA</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-002&quot;)].Id</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                        <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">TC009_SearchDocWFullName6S3W20BA-ALL</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                        <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters">${TC009_SearchDocWFullName6S3W20BA} ${TC009_SearchDocWFullName6S3W20BA-ALL}</stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC009_SearchDocWFullName6S3W20BA&quot;, Second);}
</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">TC009_SearchDocWFullName6S3W20BA</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-002&quot;)].Id</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                        <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">TC009_SearchDocWFullName6S3W20BA-ALL</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                        <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters">${TC009_SearchDocWFullName6S3W20BA} ${TC009_SearchDocWFullName6S3W20BA-ALL}</stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC009_SearchDocWFullName6S3W20BA&quot;, Second);}
</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">TC009_SearchDocWFullName6S3W20BA</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-002&quot;)].Id</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                        <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">TC009_SearchDocWFullName6S3W20BA-ALL</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                        <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters">${TC009_SearchDocWFullName6S3W20BA} ${TC009_SearchDocWFullName6S3W20BA-ALL}</stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC009_SearchDocWFullName6S3W20BA&quot;, Second);}
</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">TC009_SearchDocWFullName6S3W20BA</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;${SearchFDWDocuments09}&quot;)].Id</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                        <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">TC009_SearchDocWFullName6S3W20BA-ALL</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                        <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters">${TC009_SearchDocWFullName6S3W20BA} ${TC009_SearchDocWFullName6S3W20BA-ALL}</stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC009_SearchDocWFullName6S3W20BA&quot;, Second);}
</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
                    <stringProp name="delimiter">,</stringProp>
                    <stringProp name="fileEncoding"></stringProp>
                    <stringProp name="filename">${InputPath}SearchFDWDocuments09.csv</stringProp>
                    <boolProp name="ignoreFirstLine">false</boolProp>
                    <boolProp name="quotedData">false</boolProp>
                    <boolProp name="recycle">true</boolProp>
                    <stringProp name="shareMode">shareMode.all</stringProp>
                    <boolProp name="stopThread">false</boolProp>
                    <stringProp name="variableNames">SearchFDWDocuments09</stringProp>
                  </CSVDataSet>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Notifications" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$select" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$select</stringProp>
                          <stringProp name="Argument.value">OBID,Name,Description,CreationDate,SPFContextObjectOBID</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$top</stringProp>
                          <stringProp name="Argument.value">25</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$skip" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$skip</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$count</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$orderby" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$orderby</stringProp>
                          <stringProp name="Argument.value">CreationDate+desc</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Notifications</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json,application/vnd.intergraph.data+json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/FDWDocuments" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="%24format" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24format</stringProp>
                          <stringProp name="Argument.value">json</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24top</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24filter</stringProp>
                          <stringProp name="Argument.value">contains(Name%2C%27${SearchFDWDocuments09}%27)</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24count</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="_" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">_</stringProp>
                          <stringProp name="Argument.value">1656587150627</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/FDWDocuments</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
                    <stringProp name="delimiter">,</stringProp>
                    <stringProp name="fileEncoding"></stringProp>
                    <stringProp name="filename">${InputPath}SearchFDWDocuments09.csv</stringProp>
                    <boolProp name="ignoreFirstLine">false</boolProp>
                    <boolProp name="quotedData">false</boolProp>
                    <boolProp name="recycle">true</boolProp>
                    <stringProp name="shareMode">shareMode.all</stringProp>
                    <boolProp name="stopThread">false</boolProp>
                    <stringProp name="variableNames">SearchFDWDocuments09</stringProp>
                  </CSVDataSet>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetDynIconName()" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ObjectObids&quot;: [${DynamicOBIDs}]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetDynIconName()</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">28</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..OBID||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;ListEditContextMenu&quot;],&quot;ObjectObidAndDomains&quot;:[${DynamicOBIDs}]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">74</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;ListEditContextMenu&quot;],&quot;ObjectObidAndDomains&quot;:[${DynamicOBIDs}]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">74</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="AfterJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    SELECT
               DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255),DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  AS [SQL_Execution],
                   SUM(total_logical_reads)  AS [BufferGets],
                                 SUM(total_physical_reads)  AS [Physical Reads],
                 SUM(total_worker_time) AS [CPU Time Ms],
       SUM(total_elapsed_time)  AS [Elapsed Time]
      FROM sys.dm_exec_query_stats AS qs
    CROSS APPLY (
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  FROM sys.dm_exec_plan_attributes(qs.plan_handle)
                 WHERE attribute = N&apos;dbid&apos;) AS F_DB
               
    GROUP BY DatabaseID

)
SELECT 
       
                  [DatabaseID],[SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
                  [Elapsed Time] 
                  FROM DB_CPU_Stats
where DatabaseName= &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable">SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;

String TransName=&quot;SearchDocWFullName&quot;;
String SQLStartTime = JMeterUtils.getProperty(&quot;SQLStartTime-JP&quot;);
String SQLEndTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());

log.info(&quot;aSQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
//int DatabaseID = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;);
//log.info(&quot;DatabaseID = &gt; &quot;+DatabaseID);
//log.info(&quot;SQLStartTime = &gt; &quot;+SQLStartTime);
//log.info(&quot;SQLEndTime = &gt; &quot;+SQLEndTime);
Long aSQL_Execution = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;SQL_Execution&quot;);
//log.info(&quot;aSQL_Execution = &gt; &quot;+aSQL_Execution);

Long aBufferGets = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;BufferGets&quot;);
//log.info(&quot;aBufferGets = &gt; &quot;+aBufferGets);
Long aPhysicalReads = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Physical Reads&quot;);
//log.info(&quot;aPhysicalReads = &gt; &quot;+aPhysicalReads);
Long aCPUTimeMs = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;CPU Time Ms&quot;);
//log.info(&quot;aCPUTimeMs = &gt; &quot;+aCPUTimeMs);
Long aElapsedTime = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Elapsed Time&quot;);
//log.info(&quot;aElapsedTime = &gt; &quot;+aElapsedTime);

String BSQlStats = JMeterUtils.getProperty(&quot;SQlStats-JP&quot;);
//log.info(&quot;BSQlStats = &gt; &quot;+BSQlStats);

Long bSQL_Execution = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;SQL_Execution=&quot;)+14, BSQlStats.indexOf(&quot;, BufferGets=&quot;)));
//log.info(&quot;bSQL_Execution = &gt; &quot;+bSQL_Execution);

//Long.parseLong
Long bBufferGets = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11, BSQlStats.indexOf(&quot;}&quot;)));
//int bBufferGets = Integer.parseInt(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11,BSQlStats.indexOf(&quot;}&quot;)));
//log.info(&quot;bBufferGets = &gt; &quot;+bBufferGets);

Long bPhysicalReads = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Physical Reads=&quot;)+15, BSQlStats.indexOf(&quot;, DatabaseID&quot;)));
//log.info(&quot;bPhysicalReads = &gt; &quot;+bPhysicalReads);

Long bCPUTimeMs = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;CPU Time Ms=&quot;)+12, BSQlStats.indexOf(&quot;, Elapsed Time&quot;)));
//log.info(&quot;bCPUTimeMs = &gt; &quot;+bCPUTimeMs);

Long bElapsedTime = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Elapsed Time=&quot;)+13, BSQlStats.indexOf(&quot;, SQL_Execution&quot;)));
//log.info(&quot;bElapsedTime = &gt; &quot;+bElapsedTime);

//log.info(&quot;SQL_Execution = &gt; &quot;+(aSQL_Execution-bSQL_Execution));
//log.info(&quot;BufferGets = &gt; &quot;+(aBufferGets-bBufferGets));
//log.info(&quot;PhysicalReads = &gt; &quot;+(aPhysicalReads-bPhysicalReads));
//log.info(&quot;CPUTimeMs = &gt; &quot;+(aCPUTimeMs-bCPUTimeMs));
//log.info(&quot;ElapsedTime = &gt; &quot;+(aElapsedTime-bElapsedTime));
log.info(&quot;===================================================&quot;);
String Perfcsv = TransName +&quot;,&quot;+String.valueOf(vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;))+&quot;,&quot;+SQLStartTime+&quot;,&quot;+SQLEndTime+&quot;,&quot;+String.valueOf(aSQL_Execution-bSQL_Execution)+&quot;,&quot;+String.valueOf(aBufferGets-bBufferGets)+&quot;,&quot;+String.valueOf(aPhysicalReads-bPhysicalReads)+&quot;,&quot;+String.valueOf(aCPUTimeMs-bCPUTimeMs)+&quot;,&quot;+String.valueOf(aElapsedTime-bElapsedTime);

log.info(&quot;Perfcsv = &gt;&quot;+Perfcsv);
log.info(&quot;===================================================&quot;);
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLEndTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

String PerfCSVFile = vars.get(&quot;OutputPath&quot;) + vars.get(&quot;OutputFolderName&quot;) +&quot;perf.csv&quot;;
FileWriter fstream = new FileWriter(PerfCSVFile,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(Perfcsv);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="11" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">false</boolProp>
              </TransactionController>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="BeforeJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    Select 
     DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255), DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  As [SQL_Execution],
                   SUM(total_logical_reads)  As [BufferGets],
                                 SUM(total_physical_reads)  As [Physical Reads],
                 SUM(total_worker_time) As [CPU Time Ms],
       SUM(total_elapsed_time)  As [Elapsed Time]
      From sys.dm_exec_query_stats AS qs
    CROSS APPLY(
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  From sys.dm_exec_plan_attributes(qs.plan_handle)
                  Where Attribute = N&apos;dbid&apos;) As F_DB
               
    Group BY DatabaseID
)
Select 

       [DatabaseID], [SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
       [Elapsed Time] 
                  From DB_CPU_Stats
Where DatabaseName = &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable"> SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;
String SQLStartTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());
//log.info(&quot;SQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLStartTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

log.info(&quot;Before SQlStats = &gt; &quot;+JMeterUtils.getProperty(&quot;SQlStats-JP&quot;));</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_ClickActionMOnDoc" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">false</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;CreateObj&quot;,&quot;ManageFiles&quot;,&quot;ManageSignedFiles&quot;,&quot;CopyObj&quot;,&quot;CreateClassObj&quot;,&quot;CreateClassObjAndRel&quot;,&quot;CreateObjAndRel&quot;,&quot;CreateClassObjAndLoad&quot;,&quot;SDxCreateClassObjAndLoad&quot;,&quot;CreateWizardClassObj&quot;,&quot;CreateSignWizardClassObj&quot;,&quot;CreateObjectFromSelectedObjects&quot;,&quot;CreateSignObjectFromSelectedObjects&quot;,&quot;EditObj&quot;,&quot;EditWizardObj&quot;,&quot;EditSignWizardObj&quot;,&quot;ShowInbox&quot;,&quot;ReplaceFiles&quot;,&quot;CheckInFiles&quot;,&quot;TaskReassignmentConfiguration&quot;,&quot;SDARelationshipBuilder&quot;,&quot;CreateEntryPointFromQFind&quot;,&quot;AdminEntryPoints&quot;,&quot;ShowWorkflow&quot;,&quot;SDxWorkflowTemplateEditor&quot;,&quot;SDxCreateWorkflowTemplate&quot;,&quot;ListEditContextMenu&quot;,&quot;FTRSearch&quot;,&quot;AssignRecipients&quot;,&quot;Revise&quot;,&quot;UploadDocument&quot;,&quot;EditObjWithClassification&quot;,&quot;SDAManageDataTree&quot;,&quot;ShowInboxForObject&quot;,&quot;SDACopyDataBookContent&quot;,&quot;ConfigRoleAssignment&quot;,&quot;DashboardCreatePage&quot;,&quot;DashboardUpdatePage&quot;,&quot;InsertHistRev&quot;,&quot;CopyDistributionMatrix&quot;,&quot;MultiStepReAssign&quot;,&quot;AddRecipient&quot;,&quot;ExpandDocNestedStructure&quot;,&quot;ExpandFileNestedStructure&quot;,&quot;TabOutletManagement&quot;,&quot;CompareWorkflowTemplates&quot;,&quot;MaintainCalendar&quot;,&quot;EditObjModal&quot;,&quot;RegenerateMetadata&quot;,&quot;QueryEntity&quot;,&quot;ShareUrl&quot;,&quot;ShowObj&quot;,&quot;TerminateObj&quot;,&quot;DeleteObj&quot;,&quot;AttachWorkflow&quot;,&quot;CancelDocument&quot;,&quot;UnCancelDocument&quot;,&quot;ExecuteSavedReportFromObject&quot;,&quot;UndoEditFiles&quot;,&quot;EditFiles&quot;,&quot;XmtlCancel&quot;,&quot;XmtlUndoCancel&quot;,&quot;StepRejectAction&quot;,&quot;StepAcceptAction&quot;,&quot;StepClaim&quot;,&quot;SharepointCreateDocument&quot;,&quot;SharepointDownloadFile&quot;,&quot;SharepointViewNative&quot;,&quot;GenerateAlternateRendition&quot;,&quot;OpenXMLWordReport&quot;,&quot;SignOff&quot;,&quot;SignOffWithForm&quot;,&quot;UndoSignOff&quot;,&quot;SPFExchangeData&quot;,&quot;LaunchURLWithDynamicArgs&quot;,&quot;SDARelationshipBuilder&quot;,&quot;LaunchURLFromFeatureSet&quot;,&quot;WebClientExtensibility&quot;,&quot;GenerateMergedRendition&quot;,&quot;ListEditUncontrolledItems&quot;,&quot;WorkflowDetailsReport&quot;,&quot;ShareFile&quot;,&quot;CopyToLocalFile&quot;,&quot;GenerateMergedRenditionForFiles&quot;,&quot;PrintFile&quot;,&quot;UnlockUserAccount&quot;,&quot;StartScheduler&quot;,&quot;StopScheduler&quot;,&quot;SPFCopyConfigAccess&quot;,&quot;Dashboard&quot;,&quot;UpdateReferences&quot;,&quot;UpdateReferredBy&quot;,&quot;RelationshipManagement&quot;,&quot;GenerateThumbnail&quot;,&quot;EditFilesOnline&quot;,&quot;FinishEditOnline&quot;,&quot;FinishEditOnlineSignOff&quot;,&quot;UndoEditOnline&quot;,&quot;ViewOnline&quot;,&quot;GoToOneDrive&quot;,&quot;UpdateWidget&quot;,&quot;ReplaceEditableCopyWithMasterCopy&quot;,&quot;RequestForESign&quot;,&quot;CompleteESign&quot;,&quot;CompareDocuments&quot;,&quot;CreateWebGLSchedulerTask&quot;,&quot;SDACompareFiles&quot;,&quot;Navigate&quot;,&quot;ViewInDocument&quot;,&quot;SmartPlantReview&quot;,&quot;ViewBatchRenditionLog&quot;,&quot;ClearBravaCache&quot;,&quot;ViewInVisualReport&quot;,&quot;SCLBQualityAssuranceReviewDetails&quot;,&quot;SCLBManageQualityAssuranceReviewPlan&quot;,&quot;SCLBQualityAssuranceReview&quot;,&quot;SDAImpactAnalysis&quot;,&quot;ConflictResolution&quot;,&quot;SCLBCommunicationManagementDetails&quot;,&quot;SCLBCommunicationManagement&quot;,&quot;SOPSCommunicationManagementDetails&quot;,&quot;SOPSCommunicationManagement&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;SCLBQualityAssuranceRegister&quot;,&quot;SDAManageMarkupLayersForRendition&quot;,&quot;SOPSManageMarkupLayersForRendition&quot;,&quot;SDAImpactAnalysis&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;ConflictResolution&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;ProjectHandover&quot;,&quot;SDAShowMySDVJobs&quot;,&quot;SDxShowMySDVJobs&quot;,&quot;SDAApproveSDVJob&quot;,&quot;SDAViewSDVJobSummary&quot;,&quot;SDADeleteSDVJob&quot;,&quot;SDASDVDownloadValidationReport&quot;,&quot;LScanViewSite&quot;,&quot;LScanViewScan&quot;,&quot;LScanSynchronizeSiteData&quot;,&quot;LScanViewTagInScan&quot;,&quot;ViewConsolidatedDataForObject&quot;,&quot;ViewSharedData&quot;,&quot;CreateWorkAreaDefinition&quot;,&quot;EditWorkAreaDefinition&quot;,&quot;RunDanglingRelsReport&quot;,&quot;RegisterAuthoringTool&quot;,&quot;InconsistencyReportWithStartingObject&quot;,&quot;InconsistencyReportByQuery&quot;,&quot;InconsistencyReport&quot;,&quot;RegenerateCommonSchema&quot;,&quot;CancelChangeAction&quot;,&quot;SIOInconsistencyReportByQuery&quot;,&quot;RelateObjectsToWorkArea&quot;,&quot;ResolveDuplicateDocuments&quot;,&quot;SPFNContentExtraction&quot;,&quot;UnClaimObj&quot;,&quot;ClaimObj&quot;,&quot;MergeConfig&quot;,&quot;MergeObj&quot;,&quot;MergeStructure&quot;,&quot;CancelProject&quot;,&quot;ChangeConfigStatus&quot;,&quot;SyncObjects&quot;,&quot;SPXSAPSync&quot;,&quot;SDxConnSync&quot;,&quot;ExampleClientAPIRoute&quot;,&quot;HistoryViewRoute&quot;,&quot;ExampleClientAPIAction&quot;,&quot;ExampleClientAPIModal&quot;,&quot;HistoryViewModal&quot;,&quot;ExampleClientAPIWidget&quot;],&quot;ObjectObidAndDomains&quot;:[&quot;${TC009_SearchDocWFullName6S3W20BA}&quot;]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">3752</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;EditWorkingDocFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC010_ClickActionMOnDoc6S3W20BA} ${TC010_ClickActionMOnDoc6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC010_ClickActionMOnDoc6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;EditWorkingDocFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC010_ClickActionMOnDoc6S3W20BA} ${TC010_ClickActionMOnDoc6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC010_ClickActionMOnDoc6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;EditWorkingDocFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC010_ClickActionMOnDoc6S3W20BA} ${TC010_ClickActionMOnDoc6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC010_ClickActionMOnDoc6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;EditWorkingDocFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC010_ClickActionMOnDoc6S3W20BA} ${TC010_ClickActionMOnDoc6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC010_ClickActionMOnDoc6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc&apos;6S3W20BA&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;EditWorkingDocFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc&apos;6S3W20BA&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC010_ClickActionMOnDoc&apos;6S3W20BA&apos;} ${TC010_ClickActionMOnDoc&apos;6S3W20BA&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC010_ClickActionMOnDoc&apos;6S3W20BA&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;EditWorkingDocFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC010_ClickActionMOnDoc6S3W20BA} ${TC010_ClickActionMOnDoc6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC010_ClickActionMOnDoc6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_API_GetNavigationOptions" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">false</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetNavigationOptions" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&quot;StartingObjectOBID&quot;:&quot;${TC009_SearchDocWFullName6S3W20BA}&quot;,&quot;RelLookAhead&quot;:true,&quot;EdgeLookAhead&quot;:true,&quot;IsInfoMap&quot;:false}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetNavigationOptions</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">accept-encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, br</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">accept-language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">content-length</stringProp>
                            <stringProp name="Header.value">92</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">content-type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">origin</stringProp>
                            <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">referer</stringProp>
                            <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">sec-ch-ua</stringProp>
                            <stringProp name="Header.value">${HostName}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                            <stringProp name="Header.value">?0</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                            <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">sec-fetch-dest</stringProp>
                            <stringProp name="Header.value">empty</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">sec-fetch-mode</stringProp>
                            <stringProp name="Header.value">cors</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">sec-fetch-site</stringProp>
                            <stringProp name="Header.value">same-origin</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                            <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                            <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                            <stringProp name="Header.value">true</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">user-agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                        <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID||</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                        <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc6S3W20BA</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Viewable Files&quot;)].StartingOBID</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                        <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc6S3W20BA-ALL</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                        <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters">${TC010_ClickActionMOnDoc6S3W20BA} ${TC010_ClickActionMOnDoc6S3W20BA-ALL}</stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC010_ClickActionMOnDoc6S3W20BA&quot;, Second);}
</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc6S3W20BA</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Viewable Files&quot;)].StartingOBID</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                        <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc6S3W20BA-ALL</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                        <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters">${TC010_ClickActionMOnDoc6S3W20BA} ${TC010_ClickActionMOnDoc6S3W20BA-ALL}</stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC010_ClickActionMOnDoc6S3W20BA&quot;, Second);}
</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc6S3W20BA</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Viewable Files&quot;)].StartingOBID</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                        <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc6S3W20BA-ALL</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                        <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters">${TC010_ClickActionMOnDoc6S3W20BA} ${TC010_ClickActionMOnDoc6S3W20BA-ALL}</stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC010_ClickActionMOnDoc6S3W20BA&quot;, Second);}
</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc6S3W20BA</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Viewable Files&quot;)].StartingOBID</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                        <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc6S3W20BA-ALL</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                        <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters">${TC010_ClickActionMOnDoc6S3W20BA} ${TC010_ClickActionMOnDoc6S3W20BA-ALL}</stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC010_ClickActionMOnDoc6S3W20BA&quot;, Second);}
</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc&apos;6S3W20BA&apos;</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Viewable Files&quot;)].StartingOBID</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                        <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc&apos;6S3W20BA&apos;-ALL</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                        <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters">${TC010_ClickActionMOnDoc&apos;6S3W20BA&apos;} ${TC010_ClickActionMOnDoc&apos;6S3W20BA&apos;-ALL}</stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC010_ClickActionMOnDoc&apos;6S3W20BA&apos;&quot;, Second);}
</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc6S3W20BA</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Viewable Files&quot;)].StartingOBID</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                        <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc6S3W20BA-ALL</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                        <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters">${TC010_ClickActionMOnDoc6S3W20BA} ${TC010_ClickActionMOnDoc6S3W20BA-ALL}</stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC010_ClickActionMOnDoc6S3W20BA&quot;, Second);}
</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;CreateObj&quot;,&quot;ManageFiles&quot;,&quot;ManageSignedFiles&quot;,&quot;CopyObj&quot;,&quot;CreateClassObj&quot;,&quot;CreateClassObjAndRel&quot;,&quot;CreateObjAndRel&quot;,&quot;CreateClassObjAndLoad&quot;,&quot;SDxCreateClassObjAndLoad&quot;,&quot;CreateWizardClassObj&quot;,&quot;CreateSignWizardClassObj&quot;,&quot;CreateObjectFromSelectedObjects&quot;,&quot;CreateSignObjectFromSelectedObjects&quot;,&quot;EditObj&quot;,&quot;EditWizardObj&quot;,&quot;EditSignWizardObj&quot;,&quot;ShowInbox&quot;,&quot;ReplaceFiles&quot;,&quot;CheckInFiles&quot;,&quot;TaskReassignmentConfiguration&quot;,&quot;SDARelationshipBuilder&quot;,&quot;CreateEntryPointFromQFind&quot;,&quot;AdminEntryPoints&quot;,&quot;ShowWorkflow&quot;,&quot;SDxWorkflowTemplateEditor&quot;,&quot;SDxCreateWorkflowTemplate&quot;,&quot;ListEditContextMenu&quot;,&quot;FTRSearch&quot;,&quot;AssignRecipients&quot;,&quot;Revise&quot;,&quot;UploadDocument&quot;,&quot;EditObjWithClassification&quot;,&quot;SDAManageDataTree&quot;,&quot;ShowInboxForObject&quot;,&quot;SDACopyDataBookContent&quot;,&quot;ConfigRoleAssignment&quot;,&quot;DashboardCreatePage&quot;,&quot;DashboardUpdatePage&quot;,&quot;InsertHistRev&quot;,&quot;CopyDistributionMatrix&quot;,&quot;MultiStepReAssign&quot;,&quot;AddRecipient&quot;,&quot;ExpandDocNestedStructure&quot;,&quot;ExpandFileNestedStructure&quot;,&quot;TabOutletManagement&quot;,&quot;CompareWorkflowTemplates&quot;,&quot;MaintainCalendar&quot;,&quot;EditObjModal&quot;,&quot;RegenerateMetadata&quot;,&quot;QueryEntity&quot;,&quot;ShareUrl&quot;,&quot;ShowObj&quot;,&quot;TerminateObj&quot;,&quot;DeleteObj&quot;,&quot;AttachWorkflow&quot;,&quot;CancelDocument&quot;,&quot;UnCancelDocument&quot;,&quot;ExecuteSavedReportFromObject&quot;,&quot;UndoEditFiles&quot;,&quot;EditFiles&quot;,&quot;XmtlCancel&quot;,&quot;XmtlUndoCancel&quot;,&quot;StepRejectAction&quot;,&quot;StepAcceptAction&quot;,&quot;StepClaim&quot;,&quot;SharepointCreateDocument&quot;,&quot;SharepointDownloadFile&quot;,&quot;SharepointViewNative&quot;,&quot;GenerateAlternateRendition&quot;,&quot;OpenXMLWordReport&quot;,&quot;SignOff&quot;,&quot;SignOffWithForm&quot;,&quot;UndoSignOff&quot;,&quot;SPFExchangeData&quot;,&quot;LaunchURLWithDynamicArgs&quot;,&quot;SDARelationshipBuilder&quot;,&quot;LaunchURLFromFeatureSet&quot;,&quot;WebClientExtensibility&quot;,&quot;GenerateMergedRendition&quot;,&quot;ListEditUncontrolledItems&quot;,&quot;WorkflowDetailsReport&quot;,&quot;ShareFile&quot;,&quot;CopyToLocalFile&quot;,&quot;GenerateMergedRenditionForFiles&quot;,&quot;PrintFile&quot;,&quot;UnlockUserAccount&quot;,&quot;StartScheduler&quot;,&quot;StopScheduler&quot;,&quot;SPFCopyConfigAccess&quot;,&quot;Dashboard&quot;,&quot;UpdateReferences&quot;,&quot;UpdateReferredBy&quot;,&quot;RelationshipManagement&quot;,&quot;GenerateThumbnail&quot;,&quot;EditFilesOnline&quot;,&quot;FinishEditOnline&quot;,&quot;FinishEditOnlineSignOff&quot;,&quot;UndoEditOnline&quot;,&quot;ViewOnline&quot;,&quot;GoToOneDrive&quot;,&quot;UpdateWidget&quot;,&quot;ReplaceEditableCopyWithMasterCopy&quot;,&quot;RequestForESign&quot;,&quot;CompleteESign&quot;,&quot;CompareDocuments&quot;,&quot;CreateWebGLSchedulerTask&quot;,&quot;SDACompareFiles&quot;,&quot;Navigate&quot;,&quot;ViewInDocument&quot;,&quot;SmartPlantReview&quot;,&quot;ViewBatchRenditionLog&quot;,&quot;ClearBravaCache&quot;,&quot;ViewInVisualReport&quot;,&quot;SCLBQualityAssuranceReviewDetails&quot;,&quot;SCLBManageQualityAssuranceReviewPlan&quot;,&quot;SCLBQualityAssuranceReview&quot;,&quot;SDAImpactAnalysis&quot;,&quot;ConflictResolution&quot;,&quot;SCLBCommunicationManagementDetails&quot;,&quot;SCLBCommunicationManagement&quot;,&quot;SOPSCommunicationManagementDetails&quot;,&quot;SOPSCommunicationManagement&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;SCLBQualityAssuranceRegister&quot;,&quot;SDAManageMarkupLayersForRendition&quot;,&quot;SOPSManageMarkupLayersForRendition&quot;,&quot;SDAImpactAnalysis&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;ConflictResolution&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;ProjectHandover&quot;,&quot;SDAShowMySDVJobs&quot;,&quot;SDxShowMySDVJobs&quot;,&quot;SDAApproveSDVJob&quot;,&quot;SDAViewSDVJobSummary&quot;,&quot;SDADeleteSDVJob&quot;,&quot;SDASDVDownloadValidationReport&quot;,&quot;LScanViewSite&quot;,&quot;LScanViewScan&quot;,&quot;LScanSynchronizeSiteData&quot;,&quot;LScanViewTagInScan&quot;,&quot;ViewConsolidatedDataForObject&quot;,&quot;ViewSharedData&quot;,&quot;CreateWorkAreaDefinition&quot;,&quot;EditWorkAreaDefinition&quot;,&quot;RunDanglingRelsReport&quot;,&quot;RegisterAuthoringTool&quot;,&quot;InconsistencyReportWithStartingObject&quot;,&quot;InconsistencyReportByQuery&quot;,&quot;InconsistencyReport&quot;,&quot;RegenerateCommonSchema&quot;,&quot;CancelChangeAction&quot;,&quot;SIOInconsistencyReportByQuery&quot;,&quot;RelateObjectsToWorkArea&quot;,&quot;ResolveDuplicateDocuments&quot;,&quot;SPFNContentExtraction&quot;,&quot;UnClaimObj&quot;,&quot;ClaimObj&quot;,&quot;MergeConfig&quot;,&quot;MergeObj&quot;,&quot;MergeStructure&quot;,&quot;CancelProject&quot;,&quot;ChangeConfigStatus&quot;,&quot;SyncObjects&quot;,&quot;SPXSAPSync&quot;,&quot;SDxConnSync&quot;,&quot;ExampleClientAPIRoute&quot;,&quot;HistoryViewRoute&quot;,&quot;ExampleClientAPIAction&quot;,&quot;ExampleClientAPIModal&quot;,&quot;HistoryViewModal&quot;,&quot;ExampleClientAPIWidget&quot;],&quot;ObjectObidAndDomains&quot;:[&quot;${TC009_SearchDocWFullName6S3W20BA}&quot;]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">3752</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC010_ClickActionMOnDoc6S3W20BA} ${TC010_ClickActionMOnDoc6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC010_ClickActionMOnDoc6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC010_ClickActionMOnDoc6S3W20BA} ${TC010_ClickActionMOnDoc6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC010_ClickActionMOnDoc6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC010_ClickActionMOnDoc6S3W20BA} ${TC010_ClickActionMOnDoc6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC010_ClickActionMOnDoc6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC010_ClickActionMOnDoc6S3W20BA} ${TC010_ClickActionMOnDoc6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC010_ClickActionMOnDoc6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc&apos;6S3W20BA&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc&apos;6S3W20BA&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC010_ClickActionMOnDoc&apos;6S3W20BA&apos;} ${TC010_ClickActionMOnDoc&apos;6S3W20BA&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC010_ClickActionMOnDoc&apos;6S3W20BA&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC010_ClickActionMOnDoc6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC010_ClickActionMOnDoc6S3W20BA} ${TC010_ClickActionMOnDoc6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC010_ClickActionMOnDoc6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="AfterJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    SELECT
               DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255),DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  AS [SQL_Execution],
                   SUM(total_logical_reads)  AS [BufferGets],
                                 SUM(total_physical_reads)  AS [Physical Reads],
                 SUM(total_worker_time) AS [CPU Time Ms],
       SUM(total_elapsed_time)  AS [Elapsed Time]
      FROM sys.dm_exec_query_stats AS qs
    CROSS APPLY (
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  FROM sys.dm_exec_plan_attributes(qs.plan_handle)
                 WHERE attribute = N&apos;dbid&apos;) AS F_DB
               
    GROUP BY DatabaseID

)
SELECT 
       
                  [DatabaseID],[SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
                  [Elapsed Time] 
                  FROM DB_CPU_Stats
where DatabaseName= &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable">SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;

String TransName=&quot;ClickActionMOnDoc&quot;;
String SQLStartTime = JMeterUtils.getProperty(&quot;SQLStartTime-JP&quot;);
String SQLEndTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());

log.info(&quot;aSQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
//int DatabaseID = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;);
//log.info(&quot;DatabaseID = &gt; &quot;+DatabaseID);
//log.info(&quot;SQLStartTime = &gt; &quot;+SQLStartTime);
//log.info(&quot;SQLEndTime = &gt; &quot;+SQLEndTime);
Long aSQL_Execution = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;SQL_Execution&quot;);
//log.info(&quot;aSQL_Execution = &gt; &quot;+aSQL_Execution);

Long aBufferGets = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;BufferGets&quot;);
//log.info(&quot;aBufferGets = &gt; &quot;+aBufferGets);
Long aPhysicalReads = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Physical Reads&quot;);
//log.info(&quot;aPhysicalReads = &gt; &quot;+aPhysicalReads);
Long aCPUTimeMs = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;CPU Time Ms&quot;);
//log.info(&quot;aCPUTimeMs = &gt; &quot;+aCPUTimeMs);
Long aElapsedTime = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Elapsed Time&quot;);
//log.info(&quot;aElapsedTime = &gt; &quot;+aElapsedTime);

String BSQlStats = JMeterUtils.getProperty(&quot;SQlStats-JP&quot;);
//log.info(&quot;BSQlStats = &gt; &quot;+BSQlStats);

Long bSQL_Execution = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;SQL_Execution=&quot;)+14, BSQlStats.indexOf(&quot;, BufferGets=&quot;)));
//log.info(&quot;bSQL_Execution = &gt; &quot;+bSQL_Execution);

//Long.parseLong
Long bBufferGets = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11, BSQlStats.indexOf(&quot;}&quot;)));
//int bBufferGets = Integer.parseInt(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11,BSQlStats.indexOf(&quot;}&quot;)));
//log.info(&quot;bBufferGets = &gt; &quot;+bBufferGets);

Long bPhysicalReads = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Physical Reads=&quot;)+15, BSQlStats.indexOf(&quot;, DatabaseID&quot;)));
//log.info(&quot;bPhysicalReads = &gt; &quot;+bPhysicalReads);

Long bCPUTimeMs = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;CPU Time Ms=&quot;)+12, BSQlStats.indexOf(&quot;, Elapsed Time&quot;)));
//log.info(&quot;bCPUTimeMs = &gt; &quot;+bCPUTimeMs);

Long bElapsedTime = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Elapsed Time=&quot;)+13, BSQlStats.indexOf(&quot;, SQL_Execution&quot;)));
//log.info(&quot;bElapsedTime = &gt; &quot;+bElapsedTime);

//log.info(&quot;SQL_Execution = &gt; &quot;+(aSQL_Execution-bSQL_Execution));
//log.info(&quot;BufferGets = &gt; &quot;+(aBufferGets-bBufferGets));
//log.info(&quot;PhysicalReads = &gt; &quot;+(aPhysicalReads-bPhysicalReads));
//log.info(&quot;CPUTimeMs = &gt; &quot;+(aCPUTimeMs-bCPUTimeMs));
//log.info(&quot;ElapsedTime = &gt; &quot;+(aElapsedTime-bElapsedTime));
log.info(&quot;===================================================&quot;);
String Perfcsv = TransName +&quot;,&quot;+String.valueOf(vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;))+&quot;,&quot;+SQLStartTime+&quot;,&quot;+SQLEndTime+&quot;,&quot;+String.valueOf(aSQL_Execution-bSQL_Execution)+&quot;,&quot;+String.valueOf(aBufferGets-bBufferGets)+&quot;,&quot;+String.valueOf(aPhysicalReads-bPhysicalReads)+&quot;,&quot;+String.valueOf(aCPUTimeMs-bCPUTimeMs)+&quot;,&quot;+String.valueOf(aElapsedTime-bElapsedTime);

log.info(&quot;Perfcsv = &gt;&quot;+Perfcsv);
log.info(&quot;===================================================&quot;);
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLEndTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

String PerfCSVFile = vars.get(&quot;OutputPath&quot;) + vars.get(&quot;OutputFolderName&quot;) +&quot;perf.csv&quot;;
FileWriter fstream = new FileWriter(PerfCSVFile,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(Perfcsv);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="12" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">false</boolProp>
              </TransactionController>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="BeforeJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    Select 
     DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255), DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  As [SQL_Execution],
                   SUM(total_logical_reads)  As [BufferGets],
                                 SUM(total_physical_reads)  As [Physical Reads],
                 SUM(total_worker_time) As [CPU Time Ms],
       SUM(total_elapsed_time)  As [Elapsed Time]
      From sys.dm_exec_query_stats AS qs
    CROSS APPLY(
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  From sys.dm_exec_plan_attributes(qs.plan_handle)
                  Where Attribute = N&apos;dbid&apos;) As F_DB
               
    Group BY DatabaseID
)
Select 

       [DatabaseID], [SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
       [Elapsed Time] 
                  From DB_CPU_Stats
Where DatabaseName = &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable"> SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;
String SQLStartTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());
//log.info(&quot;SQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLStartTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

log.info(&quot;Before SQlStats = &gt; &quot;+JMeterUtils.getProperty(&quot;SQlStats-JP&quot;));</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_ShowAllRevs" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">false</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetColumnSetByUID(ColumnSetUID=&apos;CS_SPFDocumentVersion&apos;)" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetColumnSetByUID(ColumnSetUID=&apos;CS_SPFDocumentVersion&apos;)</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/Objects(&apos;6S3W000A&apos;)/SPFDocumentRevisions_12" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="%24format" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24format</stringProp>
                          <stringProp name="Argument.value">json</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24top</stringProp>
                          <stringProp name="Argument.value">25</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24count</stringProp>
                          <stringProp name="Argument.value">false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="_" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">_</stringProp>
                          <stringProp name="Argument.value">1656657012952</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/Objects(&apos;6IQY001A&apos;)/SPFDocumentRevisions_12</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json,application/vnd.intergraph.columnset.CS_SPFDocumentVersion+json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">x-requested-with</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..OBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">
String DynamicOBID;
DynamicOBID = vars.get(&quot;DynamicOBID_ALL&quot;);
DynamicOBID = &quot;\&quot;&quot;+ DynamicOBID.replaceAll(&quot;,&quot;,&quot;\&quot;,\&quot;&quot;) + &quot;\&quot;&quot;;
vars.put(&quot;DynamicOBIDs&quot;, DynamicOBID);</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC011_ShowAllRevs6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-002&quot;)].OBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC011_ShowAllRevs6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..OBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC011_ShowAllRevs6S3W20BA} ${TC011_ShowAllRevs6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC011_ShowAllRevs6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC011_ShowAllRevs6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-002&quot;)].OBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC011_ShowAllRevs6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..OBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC011_ShowAllRevs6S3W20BA} ${TC011_ShowAllRevs6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC011_ShowAllRevs6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC011_ShowAllRevs6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-002&quot;)].OBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC011_ShowAllRevs6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..OBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC011_ShowAllRevs6S3W20BA} ${TC011_ShowAllRevs6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC011_ShowAllRevs6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC011_ShowAllRevs6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-002&quot;)].OBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC011_ShowAllRevs6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..OBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC011_ShowAllRevs6S3W20BA} ${TC011_ShowAllRevs6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC011_ShowAllRevs6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC011_ShowAllRevs6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-002&quot;)].OBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC011_ShowAllRevs6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..OBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC011_ShowAllRevs6S3W20BA} ${TC011_ShowAllRevs6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC011_ShowAllRevs6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/Objects(&apos;6S3W000A&apos;)/SPFDocumentRevisions_12" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="%24format" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24format</stringProp>
                          <stringProp name="Argument.value">json</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24top</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24count</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="_" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">_</stringProp>
                          <stringProp name="Argument.value">1656657012952</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/Objects(&apos;6IQY001A&apos;)/SPFDocumentRevisions_12</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json,application/vnd.intergraph.columnset.CS_SPFDocumentVersion+json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetDynIconName()" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ObjectObids&quot;: [${DynamicOBIDs}]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetDynIconName()</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">28</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..OBID||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;ListEditContextMenu&quot;],&quot;ObjectObidAndDomains&quot;:[${DynamicOBIDs}]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">74</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Notifications" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$select" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$select</stringProp>
                          <stringProp name="Argument.value">OBID,Name,Description,CreationDate,SPFContextObjectOBID</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$top</stringProp>
                          <stringProp name="Argument.value">25</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$skip" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$skip</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$count</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$orderby" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$orderby</stringProp>
                          <stringProp name="Argument.value">CreationDate+desc</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Notifications</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json,application/vnd.intergraph.data+json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="AfterJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    SELECT
               DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255),DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  AS [SQL_Execution],
                   SUM(total_logical_reads)  AS [BufferGets],
                                 SUM(total_physical_reads)  AS [Physical Reads],
                 SUM(total_worker_time) AS [CPU Time Ms],
       SUM(total_elapsed_time)  AS [Elapsed Time]
      FROM sys.dm_exec_query_stats AS qs
    CROSS APPLY (
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  FROM sys.dm_exec_plan_attributes(qs.plan_handle)
                 WHERE attribute = N&apos;dbid&apos;) AS F_DB
               
    GROUP BY DatabaseID

)
SELECT 
       
                  [DatabaseID],[SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
                  [Elapsed Time] 
                  FROM DB_CPU_Stats
where DatabaseName= &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable">SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;

String TransName=&quot;ShowAllRevs&quot;;
String SQLStartTime = JMeterUtils.getProperty(&quot;SQLStartTime-JP&quot;);
String SQLEndTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());

log.info(&quot;aSQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
//int DatabaseID = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;);
//log.info(&quot;DatabaseID = &gt; &quot;+DatabaseID);
//log.info(&quot;SQLStartTime = &gt; &quot;+SQLStartTime);
//log.info(&quot;SQLEndTime = &gt; &quot;+SQLEndTime);
Long aSQL_Execution = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;SQL_Execution&quot;);
//log.info(&quot;aSQL_Execution = &gt; &quot;+aSQL_Execution);

Long aBufferGets = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;BufferGets&quot;);
//log.info(&quot;aBufferGets = &gt; &quot;+aBufferGets);
Long aPhysicalReads = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Physical Reads&quot;);
//log.info(&quot;aPhysicalReads = &gt; &quot;+aPhysicalReads);
Long aCPUTimeMs = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;CPU Time Ms&quot;);
//log.info(&quot;aCPUTimeMs = &gt; &quot;+aCPUTimeMs);
Long aElapsedTime = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Elapsed Time&quot;);
//log.info(&quot;aElapsedTime = &gt; &quot;+aElapsedTime);

String BSQlStats = JMeterUtils.getProperty(&quot;SQlStats-JP&quot;);
//log.info(&quot;BSQlStats = &gt; &quot;+BSQlStats);

Long bSQL_Execution = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;SQL_Execution=&quot;)+14, BSQlStats.indexOf(&quot;, BufferGets=&quot;)));
//log.info(&quot;bSQL_Execution = &gt; &quot;+bSQL_Execution);

//Long.parseLong
Long bBufferGets = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11, BSQlStats.indexOf(&quot;}&quot;)));
//int bBufferGets = Integer.parseInt(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11,BSQlStats.indexOf(&quot;}&quot;)));
//log.info(&quot;bBufferGets = &gt; &quot;+bBufferGets);

Long bPhysicalReads = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Physical Reads=&quot;)+15, BSQlStats.indexOf(&quot;, DatabaseID&quot;)));
//log.info(&quot;bPhysicalReads = &gt; &quot;+bPhysicalReads);

Long bCPUTimeMs = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;CPU Time Ms=&quot;)+12, BSQlStats.indexOf(&quot;, Elapsed Time&quot;)));
//log.info(&quot;bCPUTimeMs = &gt; &quot;+bCPUTimeMs);

Long bElapsedTime = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Elapsed Time=&quot;)+13, BSQlStats.indexOf(&quot;, SQL_Execution&quot;)));
//log.info(&quot;bElapsedTime = &gt; &quot;+bElapsedTime);

//log.info(&quot;SQL_Execution = &gt; &quot;+(aSQL_Execution-bSQL_Execution));
//log.info(&quot;BufferGets = &gt; &quot;+(aBufferGets-bBufferGets));
//log.info(&quot;PhysicalReads = &gt; &quot;+(aPhysicalReads-bPhysicalReads));
//log.info(&quot;CPUTimeMs = &gt; &quot;+(aCPUTimeMs-bCPUTimeMs));
//log.info(&quot;ElapsedTime = &gt; &quot;+(aElapsedTime-bElapsedTime));
log.info(&quot;===================================================&quot;);
String Perfcsv = TransName +&quot;,&quot;+String.valueOf(vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;))+&quot;,&quot;+SQLStartTime+&quot;,&quot;+SQLEndTime+&quot;,&quot;+String.valueOf(aSQL_Execution-bSQL_Execution)+&quot;,&quot;+String.valueOf(aBufferGets-bBufferGets)+&quot;,&quot;+String.valueOf(aPhysicalReads-bPhysicalReads)+&quot;,&quot;+String.valueOf(aCPUTimeMs-bCPUTimeMs)+&quot;,&quot;+String.valueOf(aElapsedTime-bElapsedTime);

log.info(&quot;Perfcsv = &gt;&quot;+Perfcsv);
log.info(&quot;===================================================&quot;);
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLEndTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

String PerfCSVFile = vars.get(&quot;OutputPath&quot;) + vars.get(&quot;OutputFolderName&quot;) +&quot;perf.csv&quot;;
FileWriter fstream = new FileWriter(PerfCSVFile,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(Perfcsv);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="13" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">false</boolProp>
              </TransactionController>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="BeforeJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    Select 
     DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255), DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  As [SQL_Execution],
                   SUM(total_logical_reads)  As [BufferGets],
                                 SUM(total_physical_reads)  As [Physical Reads],
                 SUM(total_worker_time) As [CPU Time Ms],
       SUM(total_elapsed_time)  As [Elapsed Time]
      From sys.dm_exec_query_stats AS qs
    CROSS APPLY(
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  From sys.dm_exec_plan_attributes(qs.plan_handle)
                  Where Attribute = N&apos;dbid&apos;) As F_DB
               
    Group BY DatabaseID
)
Select 

       [DatabaseID], [SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
       [Elapsed Time] 
                  From DB_CPU_Stats
Where DatabaseName = &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable"> SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;
String SQLStartTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());
//log.info(&quot;SQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLStartTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

log.info(&quot;Before SQlStats = &gt; &quot;+JMeterUtils.getProperty(&quot;SQlStats-JP&quot;));</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_ClickFViewNative" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">false</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;CreateObj&quot;,&quot;ManageFiles&quot;,&quot;ManageSignedFiles&quot;,&quot;CopyObj&quot;,&quot;CreateClassObj&quot;,&quot;CreateClassObjAndRel&quot;,&quot;CreateObjAndRel&quot;,&quot;CreateClassObjAndLoad&quot;,&quot;SDxCreateClassObjAndLoad&quot;,&quot;CreateWizardClassObj&quot;,&quot;CreateSignWizardClassObj&quot;,&quot;CreateObjectFromSelectedObjects&quot;,&quot;CreateSignObjectFromSelectedObjects&quot;,&quot;EditObj&quot;,&quot;EditWizardObj&quot;,&quot;EditSignWizardObj&quot;,&quot;ShowInbox&quot;,&quot;ReplaceFiles&quot;,&quot;CheckInFiles&quot;,&quot;TaskReassignmentConfiguration&quot;,&quot;SDARelationshipBuilder&quot;,&quot;CreateEntryPointFromQFind&quot;,&quot;AdminEntryPoints&quot;,&quot;ShowWorkflow&quot;,&quot;SDxWorkflowTemplateEditor&quot;,&quot;SDxCreateWorkflowTemplate&quot;,&quot;ListEditContextMenu&quot;,&quot;FTRSearch&quot;,&quot;AssignRecipients&quot;,&quot;Revise&quot;,&quot;UploadDocument&quot;,&quot;EditObjWithClassification&quot;,&quot;SDAManageDataTree&quot;,&quot;ShowInboxForObject&quot;,&quot;SDACopyDataBookContent&quot;,&quot;ConfigRoleAssignment&quot;,&quot;DashboardCreatePage&quot;,&quot;DashboardUpdatePage&quot;,&quot;InsertHistRev&quot;,&quot;CopyDistributionMatrix&quot;,&quot;MultiStepReAssign&quot;,&quot;AddRecipient&quot;,&quot;ExpandDocNestedStructure&quot;,&quot;ExpandFileNestedStructure&quot;,&quot;TabOutletManagement&quot;,&quot;CompareWorkflowTemplates&quot;,&quot;MaintainCalendar&quot;,&quot;EditObjModal&quot;,&quot;RegenerateMetadata&quot;,&quot;QueryEntity&quot;,&quot;ShareUrl&quot;,&quot;ShowObj&quot;,&quot;TerminateObj&quot;,&quot;DeleteObj&quot;,&quot;AttachWorkflow&quot;,&quot;CancelDocument&quot;,&quot;UnCancelDocument&quot;,&quot;ExecuteSavedReportFromObject&quot;,&quot;UndoEditFiles&quot;,&quot;EditFiles&quot;,&quot;XmtlCancel&quot;,&quot;XmtlUndoCancel&quot;,&quot;StepRejectAction&quot;,&quot;StepAcceptAction&quot;,&quot;StepClaim&quot;,&quot;SharepointCreateDocument&quot;,&quot;SharepointDownloadFile&quot;,&quot;SharepointViewNative&quot;,&quot;GenerateAlternateRendition&quot;,&quot;OpenXMLWordReport&quot;,&quot;SignOff&quot;,&quot;SignOffWithForm&quot;,&quot;UndoSignOff&quot;,&quot;SPFExchangeData&quot;,&quot;LaunchURLWithDynamicArgs&quot;,&quot;SDARelationshipBuilder&quot;,&quot;LaunchURLFromFeatureSet&quot;,&quot;WebClientExtensibility&quot;,&quot;GenerateMergedRendition&quot;,&quot;ListEditUncontrolledItems&quot;,&quot;WorkflowDetailsReport&quot;,&quot;ShareFile&quot;,&quot;CopyToLocalFile&quot;,&quot;GenerateMergedRenditionForFiles&quot;,&quot;PrintFile&quot;,&quot;UnlockUserAccount&quot;,&quot;StartScheduler&quot;,&quot;StopScheduler&quot;,&quot;SPFCopyConfigAccess&quot;,&quot;Dashboard&quot;,&quot;UpdateReferences&quot;,&quot;UpdateReferredBy&quot;,&quot;RelationshipManagement&quot;,&quot;GenerateThumbnail&quot;,&quot;EditFilesOnline&quot;,&quot;FinishEditOnline&quot;,&quot;FinishEditOnlineSignOff&quot;,&quot;UndoEditOnline&quot;,&quot;ViewOnline&quot;,&quot;GoToOneDrive&quot;,&quot;UpdateWidget&quot;,&quot;ReplaceEditableCopyWithMasterCopy&quot;,&quot;RequestForESign&quot;,&quot;CompleteESign&quot;,&quot;CompareDocuments&quot;,&quot;CreateWebGLSchedulerTask&quot;,&quot;SDACompareFiles&quot;,&quot;Navigate&quot;,&quot;ViewInDocument&quot;,&quot;SmartPlantReview&quot;,&quot;ViewBatchRenditionLog&quot;,&quot;ClearBravaCache&quot;,&quot;ViewInVisualReport&quot;,&quot;SCLBQualityAssuranceReviewDetails&quot;,&quot;SCLBManageQualityAssuranceReviewPlan&quot;,&quot;SCLBQualityAssuranceReview&quot;,&quot;SDAImpactAnalysis&quot;,&quot;ConflictResolution&quot;,&quot;SCLBCommunicationManagementDetails&quot;,&quot;SCLBCommunicationManagement&quot;,&quot;SOPSCommunicationManagementDetails&quot;,&quot;SOPSCommunicationManagement&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;SCLBQualityAssuranceRegister&quot;,&quot;SDAManageMarkupLayersForRendition&quot;,&quot;SOPSManageMarkupLayersForRendition&quot;,&quot;SDAImpactAnalysis&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;ConflictResolution&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;ProjectHandover&quot;,&quot;SDAShowMySDVJobs&quot;,&quot;SDxShowMySDVJobs&quot;,&quot;SDAApproveSDVJob&quot;,&quot;SDAViewSDVJobSummary&quot;,&quot;SDADeleteSDVJob&quot;,&quot;SDASDVDownloadValidationReport&quot;,&quot;LScanViewSite&quot;,&quot;LScanViewScan&quot;,&quot;LScanSynchronizeSiteData&quot;,&quot;LScanViewTagInScan&quot;,&quot;ViewConsolidatedDataForObject&quot;,&quot;ViewSharedData&quot;,&quot;CreateWorkAreaDefinition&quot;,&quot;EditWorkAreaDefinition&quot;,&quot;RunDanglingRelsReport&quot;,&quot;RegisterAuthoringTool&quot;,&quot;InconsistencyReportWithStartingObject&quot;,&quot;InconsistencyReportByQuery&quot;,&quot;InconsistencyReport&quot;,&quot;RegenerateCommonSchema&quot;,&quot;CancelChangeAction&quot;,&quot;SIOInconsistencyReportByQuery&quot;,&quot;RelateObjectsToWorkArea&quot;,&quot;ResolveDuplicateDocuments&quot;,&quot;SPFNContentExtraction&quot;,&quot;UnClaimObj&quot;,&quot;ClaimObj&quot;,&quot;MergeConfig&quot;,&quot;MergeObj&quot;,&quot;MergeStructure&quot;,&quot;CancelProject&quot;,&quot;ChangeConfigStatus&quot;,&quot;SyncObjects&quot;,&quot;SPXSAPSync&quot;,&quot;SDxConnSync&quot;,&quot;ExampleClientAPIRoute&quot;,&quot;HistoryViewRoute&quot;,&quot;ExampleClientAPIAction&quot;,&quot;ExampleClientAPIModal&quot;,&quot;HistoryViewModal&quot;,&quot;ExampleClientAPIWidget&quot;],&quot;ObjectObidAndDomains&quot;:[&quot;${TC009_SearchDocWFullName6S3W20BA}&quot;]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">3752</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC012_ClickFViewNative6S3W20BA} ${TC012_ClickFViewNative6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC012_ClickFViewNative6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC012_ClickFViewNative6S3W20BA} ${TC012_ClickFViewNative6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC012_ClickFViewNative6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC012_ClickFViewNative6S3W20BA} ${TC012_ClickFViewNative6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC012_ClickFViewNative6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC012_ClickFViewNative6S3W20BA} ${TC012_ClickFViewNative6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC012_ClickFViewNative6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative&apos;6S3W20BA&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative&apos;6S3W20BA&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC012_ClickFViewNative&apos;6S3W20BA&apos;} ${TC012_ClickFViewNative&apos;6S3W20BA&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC012_ClickFViewNative&apos;6S3W20BA&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC012_ClickFViewNative6S3W20BA} ${TC012_ClickFViewNative6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC012_ClickFViewNative6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;CreateObj&quot;,&quot;ManageFiles&quot;,&quot;ManageSignedFiles&quot;,&quot;CopyObj&quot;,&quot;CreateClassObj&quot;,&quot;CreateClassObjAndRel&quot;,&quot;CreateObjAndRel&quot;,&quot;CreateClassObjAndLoad&quot;,&quot;SDxCreateClassObjAndLoad&quot;,&quot;CreateWizardClassObj&quot;,&quot;CreateSignWizardClassObj&quot;,&quot;CreateObjectFromSelectedObjects&quot;,&quot;CreateSignObjectFromSelectedObjects&quot;,&quot;EditObj&quot;,&quot;EditWizardObj&quot;,&quot;EditSignWizardObj&quot;,&quot;ShowInbox&quot;,&quot;ReplaceFiles&quot;,&quot;CheckInFiles&quot;,&quot;TaskReassignmentConfiguration&quot;,&quot;SDARelationshipBuilder&quot;,&quot;CreateEntryPointFromQFind&quot;,&quot;AdminEntryPoints&quot;,&quot;ShowWorkflow&quot;,&quot;SDxWorkflowTemplateEditor&quot;,&quot;SDxCreateWorkflowTemplate&quot;,&quot;ListEditContextMenu&quot;,&quot;FTRSearch&quot;,&quot;AssignRecipients&quot;,&quot;Revise&quot;,&quot;UploadDocument&quot;,&quot;EditObjWithClassification&quot;,&quot;SDAManageDataTree&quot;,&quot;ShowInboxForObject&quot;,&quot;SDACopyDataBookContent&quot;,&quot;ConfigRoleAssignment&quot;,&quot;DashboardCreatePage&quot;,&quot;DashboardUpdatePage&quot;,&quot;InsertHistRev&quot;,&quot;CopyDistributionMatrix&quot;,&quot;MultiStepReAssign&quot;,&quot;AddRecipient&quot;,&quot;ExpandDocNestedStructure&quot;,&quot;ExpandFileNestedStructure&quot;,&quot;TabOutletManagement&quot;,&quot;CompareWorkflowTemplates&quot;,&quot;MaintainCalendar&quot;,&quot;EditObjModal&quot;,&quot;RegenerateMetadata&quot;,&quot;QueryEntity&quot;,&quot;ShareUrl&quot;,&quot;ShowObj&quot;,&quot;TerminateObj&quot;,&quot;DeleteObj&quot;,&quot;AttachWorkflow&quot;,&quot;CancelDocument&quot;,&quot;UnCancelDocument&quot;,&quot;ExecuteSavedReportFromObject&quot;,&quot;UndoEditFiles&quot;,&quot;EditFiles&quot;,&quot;XmtlCancel&quot;,&quot;XmtlUndoCancel&quot;,&quot;StepRejectAction&quot;,&quot;StepAcceptAction&quot;,&quot;StepClaim&quot;,&quot;SharepointCreateDocument&quot;,&quot;SharepointDownloadFile&quot;,&quot;SharepointViewNative&quot;,&quot;GenerateAlternateRendition&quot;,&quot;OpenXMLWordReport&quot;,&quot;SignOff&quot;,&quot;SignOffWithForm&quot;,&quot;UndoSignOff&quot;,&quot;SPFExchangeData&quot;,&quot;LaunchURLWithDynamicArgs&quot;,&quot;SDARelationshipBuilder&quot;,&quot;LaunchURLFromFeatureSet&quot;,&quot;WebClientExtensibility&quot;,&quot;GenerateMergedRendition&quot;,&quot;ListEditUncontrolledItems&quot;,&quot;WorkflowDetailsReport&quot;,&quot;ShareFile&quot;,&quot;CopyToLocalFile&quot;,&quot;GenerateMergedRenditionForFiles&quot;,&quot;PrintFile&quot;,&quot;UnlockUserAccount&quot;,&quot;StartScheduler&quot;,&quot;StopScheduler&quot;,&quot;SPFCopyConfigAccess&quot;,&quot;Dashboard&quot;,&quot;UpdateReferences&quot;,&quot;UpdateReferredBy&quot;,&quot;RelationshipManagement&quot;,&quot;GenerateThumbnail&quot;,&quot;EditFilesOnline&quot;,&quot;FinishEditOnline&quot;,&quot;FinishEditOnlineSignOff&quot;,&quot;UndoEditOnline&quot;,&quot;ViewOnline&quot;,&quot;GoToOneDrive&quot;,&quot;UpdateWidget&quot;,&quot;ReplaceEditableCopyWithMasterCopy&quot;,&quot;RequestForESign&quot;,&quot;CompleteESign&quot;,&quot;CompareDocuments&quot;,&quot;CreateWebGLSchedulerTask&quot;,&quot;SDACompareFiles&quot;,&quot;Navigate&quot;,&quot;ViewInDocument&quot;,&quot;SmartPlantReview&quot;,&quot;ViewBatchRenditionLog&quot;,&quot;ClearBravaCache&quot;,&quot;ViewInVisualReport&quot;,&quot;SCLBQualityAssuranceReviewDetails&quot;,&quot;SCLBManageQualityAssuranceReviewPlan&quot;,&quot;SCLBQualityAssuranceReview&quot;,&quot;SDAImpactAnalysis&quot;,&quot;ConflictResolution&quot;,&quot;SCLBCommunicationManagementDetails&quot;,&quot;SCLBCommunicationManagement&quot;,&quot;SOPSCommunicationManagementDetails&quot;,&quot;SOPSCommunicationManagement&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;SCLBQualityAssuranceRegister&quot;,&quot;SDAManageMarkupLayersForRendition&quot;,&quot;SOPSManageMarkupLayersForRendition&quot;,&quot;SDAImpactAnalysis&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;ConflictResolution&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;ProjectHandover&quot;,&quot;SDAShowMySDVJobs&quot;,&quot;SDxShowMySDVJobs&quot;,&quot;SDAApproveSDVJob&quot;,&quot;SDAViewSDVJobSummary&quot;,&quot;SDADeleteSDVJob&quot;,&quot;SDASDVDownloadValidationReport&quot;,&quot;LScanViewSite&quot;,&quot;LScanViewScan&quot;,&quot;LScanSynchronizeSiteData&quot;,&quot;LScanViewTagInScan&quot;,&quot;ViewConsolidatedDataForObject&quot;,&quot;ViewSharedData&quot;,&quot;CreateWorkAreaDefinition&quot;,&quot;EditWorkAreaDefinition&quot;,&quot;RunDanglingRelsReport&quot;,&quot;RegisterAuthoringTool&quot;,&quot;InconsistencyReportWithStartingObject&quot;,&quot;InconsistencyReportByQuery&quot;,&quot;InconsistencyReport&quot;,&quot;RegenerateCommonSchema&quot;,&quot;CancelChangeAction&quot;,&quot;SIOInconsistencyReportByQuery&quot;,&quot;RelateObjectsToWorkArea&quot;,&quot;ResolveDuplicateDocuments&quot;,&quot;SPFNContentExtraction&quot;,&quot;UnClaimObj&quot;,&quot;ClaimObj&quot;,&quot;MergeConfig&quot;,&quot;MergeObj&quot;,&quot;MergeStructure&quot;,&quot;CancelProject&quot;,&quot;ChangeConfigStatus&quot;,&quot;SyncObjects&quot;,&quot;SPXSAPSync&quot;,&quot;SDxConnSync&quot;,&quot;ExampleClientAPIRoute&quot;,&quot;HistoryViewRoute&quot;,&quot;ExampleClientAPIAction&quot;,&quot;ExampleClientAPIModal&quot;,&quot;HistoryViewModal&quot;,&quot;ExampleClientAPIWidget&quot;],&quot;ObjectObidAndDomains&quot;:[&quot;${TC009_SearchDocWFullName6S3W20BA}&quot;]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">3752</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;EditWorkingDocFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC012_ClickFViewNative6S3W20BA} ${TC012_ClickFViewNative6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC012_ClickFViewNative6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;EditWorkingDocFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC012_ClickFViewNative6S3W20BA} ${TC012_ClickFViewNative6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC012_ClickFViewNative6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;EditWorkingDocFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC012_ClickFViewNative6S3W20BA} ${TC012_ClickFViewNative6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC012_ClickFViewNative6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;EditWorkingDocFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC012_ClickFViewNative6S3W20BA} ${TC012_ClickFViewNative6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC012_ClickFViewNative6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative&apos;6S3W20BA&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;EditWorkingDocFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative&apos;6S3W20BA&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC012_ClickFViewNative&apos;6S3W20BA&apos;} ${TC012_ClickFViewNative&apos;6S3W20BA&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC012_ClickFViewNative&apos;6S3W20BA&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;EditWorkingDocFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC012_ClickFViewNative6S3W20BA} ${TC012_ClickFViewNative6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC012_ClickFViewNative6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetNavigationOptions" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;StartingObjectOBID&quot;:&quot;${TC009_SearchDocWFullName6S3W20BA}&quot;,&quot;RelLookAhead&quot;:true,&quot;EdgeLookAhead&quot;:true,&quot;IsInfoMap&quot;:false}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetNavigationOptions</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">92</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Viewable Files&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC012_ClickFViewNative6S3W20BA} ${TC012_ClickFViewNative6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC012_ClickFViewNative6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Viewable Files&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC012_ClickFViewNative6S3W20BA} ${TC012_ClickFViewNative6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC012_ClickFViewNative6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Viewable Files&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC012_ClickFViewNative6S3W20BA} ${TC012_ClickFViewNative6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC012_ClickFViewNative6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Viewable Files&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC012_ClickFViewNative6S3W20BA} ${TC012_ClickFViewNative6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC012_ClickFViewNative6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative&apos;6S3W20BA&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Viewable Files&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative&apos;6S3W20BA&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC012_ClickFViewNative&apos;6S3W20BA&apos;} ${TC012_ClickFViewNative&apos;6S3W20BA&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC012_ClickFViewNative&apos;6S3W20BA&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Viewable Files&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC012_ClickFViewNative6S3W20BA} ${TC012_ClickFViewNative6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC012_ClickFViewNative6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;CreateObj&quot;,&quot;ManageFiles&quot;,&quot;ManageSignedFiles&quot;,&quot;CopyObj&quot;,&quot;CreateClassObj&quot;,&quot;CreateClassObjAndRel&quot;,&quot;CreateObjAndRel&quot;,&quot;CreateClassObjAndLoad&quot;,&quot;SDxCreateClassObjAndLoad&quot;,&quot;CreateWizardClassObj&quot;,&quot;CreateSignWizardClassObj&quot;,&quot;CreateObjectFromSelectedObjects&quot;,&quot;CreateSignObjectFromSelectedObjects&quot;,&quot;EditObj&quot;,&quot;EditWizardObj&quot;,&quot;EditSignWizardObj&quot;,&quot;ShowInbox&quot;,&quot;ReplaceFiles&quot;,&quot;CheckInFiles&quot;,&quot;TaskReassignmentConfiguration&quot;,&quot;SDARelationshipBuilder&quot;,&quot;CreateEntryPointFromQFind&quot;,&quot;AdminEntryPoints&quot;,&quot;ShowWorkflow&quot;,&quot;SDxWorkflowTemplateEditor&quot;,&quot;SDxCreateWorkflowTemplate&quot;,&quot;ListEditContextMenu&quot;,&quot;FTRSearch&quot;,&quot;AssignRecipients&quot;,&quot;Revise&quot;,&quot;UploadDocument&quot;,&quot;EditObjWithClassification&quot;,&quot;SDAManageDataTree&quot;,&quot;ShowInboxForObject&quot;,&quot;SDACopyDataBookContent&quot;,&quot;ConfigRoleAssignment&quot;,&quot;DashboardCreatePage&quot;,&quot;DashboardUpdatePage&quot;,&quot;InsertHistRev&quot;,&quot;CopyDistributionMatrix&quot;,&quot;MultiStepReAssign&quot;,&quot;AddRecipient&quot;,&quot;ExpandDocNestedStructure&quot;,&quot;ExpandFileNestedStructure&quot;,&quot;TabOutletManagement&quot;,&quot;CompareWorkflowTemplates&quot;,&quot;MaintainCalendar&quot;,&quot;EditObjModal&quot;,&quot;RegenerateMetadata&quot;,&quot;QueryEntity&quot;,&quot;ShareUrl&quot;,&quot;ShowObj&quot;,&quot;TerminateObj&quot;,&quot;DeleteObj&quot;,&quot;AttachWorkflow&quot;,&quot;CancelDocument&quot;,&quot;UnCancelDocument&quot;,&quot;ExecuteSavedReportFromObject&quot;,&quot;UndoEditFiles&quot;,&quot;EditFiles&quot;,&quot;XmtlCancel&quot;,&quot;XmtlUndoCancel&quot;,&quot;StepRejectAction&quot;,&quot;StepAcceptAction&quot;,&quot;StepClaim&quot;,&quot;SharepointCreateDocument&quot;,&quot;SharepointDownloadFile&quot;,&quot;SharepointViewNative&quot;,&quot;GenerateAlternateRendition&quot;,&quot;OpenXMLWordReport&quot;,&quot;SignOff&quot;,&quot;SignOffWithForm&quot;,&quot;UndoSignOff&quot;,&quot;SPFExchangeData&quot;,&quot;LaunchURLWithDynamicArgs&quot;,&quot;SDARelationshipBuilder&quot;,&quot;LaunchURLFromFeatureSet&quot;,&quot;WebClientExtensibility&quot;,&quot;GenerateMergedRendition&quot;,&quot;ListEditUncontrolledItems&quot;,&quot;WorkflowDetailsReport&quot;,&quot;ShareFile&quot;,&quot;CopyToLocalFile&quot;,&quot;GenerateMergedRenditionForFiles&quot;,&quot;PrintFile&quot;,&quot;UnlockUserAccount&quot;,&quot;StartScheduler&quot;,&quot;StopScheduler&quot;,&quot;SPFCopyConfigAccess&quot;,&quot;Dashboard&quot;,&quot;UpdateReferences&quot;,&quot;UpdateReferredBy&quot;,&quot;RelationshipManagement&quot;,&quot;GenerateThumbnail&quot;,&quot;EditFilesOnline&quot;,&quot;FinishEditOnline&quot;,&quot;FinishEditOnlineSignOff&quot;,&quot;UndoEditOnline&quot;,&quot;ViewOnline&quot;,&quot;GoToOneDrive&quot;,&quot;UpdateWidget&quot;,&quot;ReplaceEditableCopyWithMasterCopy&quot;,&quot;RequestForESign&quot;,&quot;CompleteESign&quot;,&quot;CompareDocuments&quot;,&quot;CreateWebGLSchedulerTask&quot;,&quot;SDACompareFiles&quot;,&quot;Navigate&quot;,&quot;ViewInDocument&quot;,&quot;SmartPlantReview&quot;,&quot;ViewBatchRenditionLog&quot;,&quot;ClearBravaCache&quot;,&quot;ViewInVisualReport&quot;,&quot;SCLBQualityAssuranceReviewDetails&quot;,&quot;SCLBManageQualityAssuranceReviewPlan&quot;,&quot;SCLBQualityAssuranceReview&quot;,&quot;SDAImpactAnalysis&quot;,&quot;ConflictResolution&quot;,&quot;SCLBCommunicationManagementDetails&quot;,&quot;SCLBCommunicationManagement&quot;,&quot;SOPSCommunicationManagementDetails&quot;,&quot;SOPSCommunicationManagement&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;SCLBQualityAssuranceRegister&quot;,&quot;SDAManageMarkupLayersForRendition&quot;,&quot;SOPSManageMarkupLayersForRendition&quot;,&quot;SDAImpactAnalysis&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;ConflictResolution&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;ProjectHandover&quot;,&quot;SDAShowMySDVJobs&quot;,&quot;SDxShowMySDVJobs&quot;,&quot;SDAApproveSDVJob&quot;,&quot;SDAViewSDVJobSummary&quot;,&quot;SDADeleteSDVJob&quot;,&quot;SDASDVDownloadValidationReport&quot;,&quot;LScanViewSite&quot;,&quot;LScanViewScan&quot;,&quot;LScanSynchronizeSiteData&quot;,&quot;LScanViewTagInScan&quot;,&quot;ViewConsolidatedDataForObject&quot;,&quot;ViewSharedData&quot;,&quot;CreateWorkAreaDefinition&quot;,&quot;EditWorkAreaDefinition&quot;,&quot;RunDanglingRelsReport&quot;,&quot;RegisterAuthoringTool&quot;,&quot;InconsistencyReportWithStartingObject&quot;,&quot;InconsistencyReportByQuery&quot;,&quot;InconsistencyReport&quot;,&quot;RegenerateCommonSchema&quot;,&quot;CancelChangeAction&quot;,&quot;SIOInconsistencyReportByQuery&quot;,&quot;RelateObjectsToWorkArea&quot;,&quot;ResolveDuplicateDocuments&quot;,&quot;SPFNContentExtraction&quot;,&quot;UnClaimObj&quot;,&quot;ClaimObj&quot;,&quot;MergeConfig&quot;,&quot;MergeObj&quot;,&quot;MergeStructure&quot;,&quot;CancelProject&quot;,&quot;ChangeConfigStatus&quot;,&quot;SyncObjects&quot;,&quot;SPXSAPSync&quot;,&quot;SDxConnSync&quot;,&quot;ExampleClientAPIRoute&quot;,&quot;HistoryViewRoute&quot;,&quot;ExampleClientAPIAction&quot;,&quot;ExampleClientAPIModal&quot;,&quot;HistoryViewModal&quot;,&quot;ExampleClientAPIWidget&quot;],&quot;ObjectObidAndDomains&quot;:[&quot;${TC009_SearchDocWFullName6S3W20BA}&quot;]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">3752</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC012_ClickFViewNative6S3W20BA} ${TC012_ClickFViewNative6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC012_ClickFViewNative6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC012_ClickFViewNative6S3W20BA} ${TC012_ClickFViewNative6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC012_ClickFViewNative6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC012_ClickFViewNative6S3W20BA} ${TC012_ClickFViewNative6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC012_ClickFViewNative6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC012_ClickFViewNative6S3W20BA} ${TC012_ClickFViewNative6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC012_ClickFViewNative6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative&apos;6S3W20BA&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative&apos;6S3W20BA&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC012_ClickFViewNative&apos;6S3W20BA&apos;} ${TC012_ClickFViewNative&apos;6S3W20BA&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC012_ClickFViewNative&apos;6S3W20BA&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC012_ClickFViewNative6S3W20BA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC012_ClickFViewNative6S3W20BA} ${TC012_ClickFViewNative6S3W20BA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC012_ClickFViewNative6S3W20BA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/$batch" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">--batch_33dc9f29-c33c-7bf5-3eef-a19c3ca37f82&#xd;
Content-Type: application/http&#xd;
Content-Transfer-Encoding: binary&#xd;
&#xd;
GET https://${HostName}/${SPFServer}/api/v2/SDA/Objects?$filter=OBID eq &apos;${TC009_SearchDocWFullName6S3W20BA}&apos;&amp;$top=1 HTTP/1.1&#xd;
SPFConfigUID:${SPFConfigUID}&#xd;
SPFResolveDocumentsToVersion: false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/$batch</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">297</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">multipart/mixed;boundary=batch_33dc9f29-c33c-7bf5-3eef-a19c3ca37f82</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">SubmitalOBID</stringProp>
                      <stringProp name="RegexExtractor.regex">&quot;OBID&quot;:&quot;(.+?)&quot;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">Not FOUND</stringProp>
                      <stringProp name="RegexExtractor.match_number"> 1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetInterfacesForObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ObjectOBID&quot;:&quot;${TC009_SearchDocWFullName6S3W20BA}&quot;}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetInterfacesForObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">25</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/Objects" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$filter</stringProp>
                          <stringProp name="Argument.value">(OBID%20eq%20%27${TC012_ClickFViewNative6S3W20BA}%27)</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$select" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$select</stringProp>
                          <stringProp name="Argument.value">OBID</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$top</stringProp>
                          <stringProp name="Argument.value">1000</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/Objects</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/Objects(&apos;${TC012_ClickFViewNative&apos;6S3W20BA&apos;}&apos;)/SPFFileComposition_21" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$filter</stringProp>
                          <stringProp name="Argument.value">SPFViewInd%20eq%20true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$top</stringProp>
                          <stringProp name="Argument.value">100</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$count</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/Objects(&apos;${TC012_ClickFViewNative&apos;6S3W20BA&apos;}&apos;)/SPFFileComposition_21</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/Objects(&apos;${TC012_ClickFViewNative&apos;6S3W20BA&apos;}&apos;)/SPFFileComposition_21" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$filter</stringProp>
                          <stringProp name="Argument.value">SPFViewInd%20eq%20true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$top</stringProp>
                          <stringProp name="Argument.value">1</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$count</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/Objects(&apos;${TC012_ClickFViewNative&apos;6S3W20BA&apos;}&apos;)/SPFFileComposition_21</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json,application/vnd.intergraph.columnset.CS_CopyToLocalColumnSet+json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">prefer</stringProp>
                          <stringProp name="Header.value">odata.include-annotations=&quot;*&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/Files(&apos;6S3W20GA&apos;)/Intergraph.SPF.Server.API.Model.RetrieveFileUris" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;purposes&quot;:[&quot;Primary&quot;],&quot;downloadFile&quot;:false}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/Files(&apos;6ISG000A&apos;)/Intergraph.SPF.Server.API.Model.RetrieveFileUris</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">45</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Uri" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">Uri </stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..Uri </stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${Uri}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${Uri}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">42</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFWC}/SDAClientServices/api/log/info" enabled="false">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&quot;Navigate: viewerOverride:NATIVE status:true&quot;</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFWC}/SDAClientServices/api/log/info</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">45</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="AfterJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    SELECT
               DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255),DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  AS [SQL_Execution],
                   SUM(total_logical_reads)  AS [BufferGets],
                                 SUM(total_physical_reads)  AS [Physical Reads],
                 SUM(total_worker_time) AS [CPU Time Ms],
       SUM(total_elapsed_time)  AS [Elapsed Time]
      FROM sys.dm_exec_query_stats AS qs
    CROSS APPLY (
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  FROM sys.dm_exec_plan_attributes(qs.plan_handle)
                 WHERE attribute = N&apos;dbid&apos;) AS F_DB
               
    GROUP BY DatabaseID

)
SELECT 
       
                  [DatabaseID],[SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
                  [Elapsed Time] 
                  FROM DB_CPU_Stats
where DatabaseName= &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable">SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;

String TransName=&quot;ClickFViewNative&quot;;
String SQLStartTime = JMeterUtils.getProperty(&quot;SQLStartTime-JP&quot;);
String SQLEndTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());

log.info(&quot;aSQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
//int DatabaseID = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;);
//log.info(&quot;DatabaseID = &gt; &quot;+DatabaseID);
//log.info(&quot;SQLStartTime = &gt; &quot;+SQLStartTime);
//log.info(&quot;SQLEndTime = &gt; &quot;+SQLEndTime);
Long aSQL_Execution = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;SQL_Execution&quot;);
//log.info(&quot;aSQL_Execution = &gt; &quot;+aSQL_Execution);

Long aBufferGets = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;BufferGets&quot;);
//log.info(&quot;aBufferGets = &gt; &quot;+aBufferGets);
Long aPhysicalReads = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Physical Reads&quot;);
//log.info(&quot;aPhysicalReads = &gt; &quot;+aPhysicalReads);
Long aCPUTimeMs = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;CPU Time Ms&quot;);
//log.info(&quot;aCPUTimeMs = &gt; &quot;+aCPUTimeMs);
Long aElapsedTime = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Elapsed Time&quot;);
//log.info(&quot;aElapsedTime = &gt; &quot;+aElapsedTime);

String BSQlStats = JMeterUtils.getProperty(&quot;SQlStats-JP&quot;);
//log.info(&quot;BSQlStats = &gt; &quot;+BSQlStats);

Long bSQL_Execution = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;SQL_Execution=&quot;)+14, BSQlStats.indexOf(&quot;, BufferGets=&quot;)));
//log.info(&quot;bSQL_Execution = &gt; &quot;+bSQL_Execution);

//Long.parseLong
Long bBufferGets = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11, BSQlStats.indexOf(&quot;}&quot;)));
//int bBufferGets = Integer.parseInt(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11,BSQlStats.indexOf(&quot;}&quot;)));
//log.info(&quot;bBufferGets = &gt; &quot;+bBufferGets);

Long bPhysicalReads = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Physical Reads=&quot;)+15, BSQlStats.indexOf(&quot;, DatabaseID&quot;)));
//log.info(&quot;bPhysicalReads = &gt; &quot;+bPhysicalReads);

Long bCPUTimeMs = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;CPU Time Ms=&quot;)+12, BSQlStats.indexOf(&quot;, Elapsed Time&quot;)));
//log.info(&quot;bCPUTimeMs = &gt; &quot;+bCPUTimeMs);

Long bElapsedTime = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Elapsed Time=&quot;)+13, BSQlStats.indexOf(&quot;, SQL_Execution&quot;)));
//log.info(&quot;bElapsedTime = &gt; &quot;+bElapsedTime);

//log.info(&quot;SQL_Execution = &gt; &quot;+(aSQL_Execution-bSQL_Execution));
//log.info(&quot;BufferGets = &gt; &quot;+(aBufferGets-bBufferGets));
//log.info(&quot;PhysicalReads = &gt; &quot;+(aPhysicalReads-bPhysicalReads));
//log.info(&quot;CPUTimeMs = &gt; &quot;+(aCPUTimeMs-bCPUTimeMs));
//log.info(&quot;ElapsedTime = &gt; &quot;+(aElapsedTime-bElapsedTime));
log.info(&quot;===================================================&quot;);
String Perfcsv = TransName +&quot;,&quot;+String.valueOf(vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;))+&quot;,&quot;+SQLStartTime+&quot;,&quot;+SQLEndTime+&quot;,&quot;+String.valueOf(aSQL_Execution-bSQL_Execution)+&quot;,&quot;+String.valueOf(aBufferGets-bBufferGets)+&quot;,&quot;+String.valueOf(aPhysicalReads-bPhysicalReads)+&quot;,&quot;+String.valueOf(aCPUTimeMs-bCPUTimeMs)+&quot;,&quot;+String.valueOf(aElapsedTime-bElapsedTime);

log.info(&quot;Perfcsv = &gt;&quot;+Perfcsv);
log.info(&quot;===================================================&quot;);
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLEndTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

String PerfCSVFile = vars.get(&quot;OutputPath&quot;) + vars.get(&quot;OutputFolderName&quot;) +&quot;perf.csv&quot;;
FileWriter fstream = new FileWriter(PerfCSVFile,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(Perfcsv);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="14" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">false</boolProp>
              </TransactionController>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="BeforeJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    Select 
     DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255), DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  As [SQL_Execution],
                   SUM(total_logical_reads)  As [BufferGets],
                                 SUM(total_physical_reads)  As [Physical Reads],
                 SUM(total_worker_time) As [CPU Time Ms],
       SUM(total_elapsed_time)  As [Elapsed Time]
      From sys.dm_exec_query_stats AS qs
    CROSS APPLY(
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  From sys.dm_exec_plan_attributes(qs.plan_handle)
                  Where Attribute = N&apos;dbid&apos;) As F_DB
               
    Group BY DatabaseID
)
Select 

       [DatabaseID], [SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
       [Elapsed Time] 
                  From DB_CPU_Stats
Where DatabaseName = &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable"> SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;
String SQLStartTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());
//log.info(&quot;SQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLStartTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

log.info(&quot;Before SQlStats = &gt; &quot;+JMeterUtils.getProperty(&quot;SQlStats-JP&quot;));</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_SearchDocW3CharHSV" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">false</boolProp>
                </TransactionController>
                <hashTree>
                  <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="SearchFDWDocuments13" elementType="Argument">
                        <stringProp name="Argument.name">SearchFDWDocuments13</stringProp>
                        <stringProp name="Argument.value">*HSV*</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </Arguments>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDADocCategories&apos;)" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$expand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$expand</stringProp>
                          <stringProp name="Argument.value">Items,Descendants</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDADocCategories&apos;)</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDADocTypes&apos;)" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$expand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$expand</stringProp>
                          <stringProp name="Argument.value">Items,Descendants</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDADocTypes&apos;)</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1RevisionStates&apos;)" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$expand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$expand</stringProp>
                          <stringProp name="Argument.value">Items,Descendants</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1RevisionStates&apos;)</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDAWorkflowPriorities&apos;)" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$expand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$expand</stringProp>
                          <stringProp name="Argument.value">Items,Descendants</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDAWorkflowPriorities&apos;)</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDAReturnCodes&apos;)" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$expand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$expand</stringProp>
                          <stringProp name="Argument.value">Items,Descendants</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDAReturnCodes&apos;)</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/FDWDocuments" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="%24format" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24format</stringProp>
                          <stringProp name="Argument.value">json</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24top</stringProp>
                          <stringProp name="Argument.value">25</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24filter</stringProp>
                          <stringProp name="Argument.value">contains(Name%2C%27${SearchFDWDocuments13}%27)</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24count</stringProp>
                          <stringProp name="Argument.value">false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="_" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">_</stringProp>
                          <stringProp name="Argument.value">1656659157778</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/FDWDocuments</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">x-requested-with</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">
String DynamicOBID;
DynamicOBID = vars.get(&quot;DynamicOBID_ALL&quot;);
DynamicOBID = &quot;\&quot;&quot;+ DynamicOBID.replaceAll(&quot;,&quot;,&quot;\&quot;,\&quot;&quot;) + &quot;\&quot;&quot;;
vars.put(&quot;DynamicOBIDs&quot;, DynamicOBID);</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQZ09XA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep119&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQZ09XA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC013_SearchDocW3CharHSV6IQZ09XA} ${TC013_SearchDocW3CharHSV6IQZ09XA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC013_SearchDocW3CharHSV6IQZ09XA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQZ09XA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep119&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQZ09XA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC013_SearchDocW3CharHSV6IQZ09XA} ${TC013_SearchDocW3CharHSV6IQZ09XA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC013_SearchDocW3CharHSV6IQZ09XA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQZ08IA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep102&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQZ08IA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC013_SearchDocW3CharHSV6IQZ08IA} ${TC013_SearchDocW3CharHSV6IQZ08IA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC013_SearchDocW3CharHSV6IQZ08IA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC013_SearchDocW3CharHSV6IQY000A} ${TC013_SearchDocW3CharHSV6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC013_SearchDocW3CharHSV6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQZ000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep0&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQZ000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC013_SearchDocW3CharHSV6IQZ000A} ${TC013_SearchDocW3CharHSV6IQZ000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC013_SearchDocW3CharHSV6IQZ000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC013_SearchDocW3CharHSV6IQY000A} ${TC013_SearchDocW3CharHSV6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC013_SearchDocW3CharHSV6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC013_SearchDocW3CharHSV6IQY000A} ${TC013_SearchDocW3CharHSV6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC013_SearchDocW3CharHSV6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQZ08FA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep101&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQZ08FA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC013_SearchDocW3CharHSV6IQZ08FA} ${TC013_SearchDocW3CharHSV6IQZ08FA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC013_SearchDocW3CharHSV6IQZ08FA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQZ08RA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep105&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQZ08RA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC013_SearchDocW3CharHSV6IQZ08RA} ${TC013_SearchDocW3CharHSV6IQZ08RA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC013_SearchDocW3CharHSV6IQZ08RA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQZ08XA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep107&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQZ08XA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC013_SearchDocW3CharHSV6IQZ08XA} ${TC013_SearchDocW3CharHSV6IQZ08XA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC013_SearchDocW3CharHSV6IQZ08XA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQZ09XA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep119&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQZ09XA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC013_SearchDocW3CharHSV6IQZ09XA} ${TC013_SearchDocW3CharHSV6IQZ09XA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC013_SearchDocW3CharHSV6IQZ09XA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQZ093A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep109&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQZ093A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC013_SearchDocW3CharHSV6IQZ093A} ${TC013_SearchDocW3CharHSV6IQZ093A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC013_SearchDocW3CharHSV6IQZ093A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQZ090A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep108&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQZ090A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC013_SearchDocW3CharHSV6IQZ090A} ${TC013_SearchDocW3CharHSV6IQZ090A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC013_SearchDocW3CharHSV6IQZ090A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQZ09XA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep119&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQZ09XA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC013_SearchDocW3CharHSV6IQZ09XA} ${TC013_SearchDocW3CharHSV6IQZ09XA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC013_SearchDocW3CharHSV6IQZ09XA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC013_SearchDocW3CharHSV6IQY000A} ${TC013_SearchDocW3CharHSV6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC013_SearchDocW3CharHSV6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQZ08CA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep100&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQZ08CA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC013_SearchDocW3CharHSV6IQZ08CA} ${TC013_SearchDocW3CharHSV6IQZ08CA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC013_SearchDocW3CharHSV6IQZ08CA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQZ096A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep110&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQZ096A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC013_SearchDocW3CharHSV6IQZ096A} ${TC013_SearchDocW3CharHSV6IQZ096A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC013_SearchDocW3CharHSV6IQZ096A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
                    <stringProp name="delimiter">,</stringProp>
                    <stringProp name="fileEncoding"></stringProp>
                    <stringProp name="filename">${InputPath}SearchFDWDocuments13.csv</stringProp>
                    <boolProp name="ignoreFirstLine">false</boolProp>
                    <boolProp name="quotedData">false</boolProp>
                    <boolProp name="recycle">true</boolProp>
                    <stringProp name="shareMode">shareMode.all</stringProp>
                    <boolProp name="stopThread">false</boolProp>
                    <stringProp name="variableNames">SearchFDWDocuments13</stringProp>
                  </CSVDataSet>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/FDWDocuments" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="%24format" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24format</stringProp>
                          <stringProp name="Argument.value">json</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24top</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24filter</stringProp>
                          <stringProp name="Argument.value">contains(Name%2C%27${SearchFDWDocuments13}%27)</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24count</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="_" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">_</stringProp>
                          <stringProp name="Argument.value">1656659157778</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/FDWDocuments</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
                    <stringProp name="delimiter">,</stringProp>
                    <stringProp name="fileEncoding"></stringProp>
                    <stringProp name="filename">${InputPath}SearchFDWDocuments13.csv</stringProp>
                    <boolProp name="ignoreFirstLine">false</boolProp>
                    <boolProp name="quotedData">false</boolProp>
                    <boolProp name="recycle">true</boolProp>
                    <stringProp name="shareMode">shareMode.all</stringProp>
                    <boolProp name="stopThread">false</boolProp>
                    <stringProp name="variableNames">SearchFDWDocuments13</stringProp>
                  </CSVDataSet>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetDynIconName()" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ObjectObids&quot;: [${DynamicOBIDs}]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetDynIconName()</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">292</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..OBID||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;ListEditContextMenu&quot;],&quot;ObjectObidAndDomains&quot;:[${DynamicOBIDs}]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">338</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Notifications" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$select" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$select</stringProp>
                          <stringProp name="Argument.value">OBID,Name,Description,CreationDate,SPFContextObjectOBID</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$top</stringProp>
                          <stringProp name="Argument.value">25</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$skip" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$skip</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$count</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$orderby" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$orderby</stringProp>
                          <stringProp name="Argument.value">CreationDate+desc</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Notifications</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json,application/vnd.intergraph.data+json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;ListEditContextMenu&quot;],&quot;ObjectObidAndDomains&quot;:[${DynamicOBIDs}]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">338</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;CreateObj&quot;,&quot;ManageFiles&quot;,&quot;ManageSignedFiles&quot;,&quot;CopyObj&quot;,&quot;CreateClassObj&quot;,&quot;CreateClassObjAndRel&quot;,&quot;CreateObjAndRel&quot;,&quot;CreateClassObjAndLoad&quot;,&quot;SDxCreateClassObjAndLoad&quot;,&quot;CreateWizardClassObj&quot;,&quot;CreateSignWizardClassObj&quot;,&quot;CreateObjectFromSelectedObjects&quot;,&quot;CreateSignObjectFromSelectedObjects&quot;,&quot;EditObj&quot;,&quot;EditWizardObj&quot;,&quot;EditSignWizardObj&quot;,&quot;ShowInbox&quot;,&quot;ReplaceFiles&quot;,&quot;CheckInFiles&quot;,&quot;TaskReassignmentConfiguration&quot;,&quot;SDARelationshipBuilder&quot;,&quot;CreateEntryPointFromQFind&quot;,&quot;AdminEntryPoints&quot;,&quot;ShowWorkflow&quot;,&quot;SDxWorkflowTemplateEditor&quot;,&quot;SDxCreateWorkflowTemplate&quot;,&quot;ListEditContextMenu&quot;,&quot;FTRSearch&quot;,&quot;AssignRecipients&quot;,&quot;Revise&quot;,&quot;UploadDocument&quot;,&quot;EditObjWithClassification&quot;,&quot;SDAManageDataTree&quot;,&quot;ShowInboxForObject&quot;,&quot;SDACopyDataBookContent&quot;,&quot;ConfigRoleAssignment&quot;,&quot;DashboardCreatePage&quot;,&quot;DashboardUpdatePage&quot;,&quot;InsertHistRev&quot;,&quot;CopyDistributionMatrix&quot;,&quot;MultiStepReAssign&quot;,&quot;AddRecipient&quot;,&quot;ExpandDocNestedStructure&quot;,&quot;ExpandFileNestedStructure&quot;,&quot;TabOutletManagement&quot;,&quot;CompareWorkflowTemplates&quot;,&quot;MaintainCalendar&quot;,&quot;EditObjModal&quot;,&quot;RegenerateMetadata&quot;,&quot;QueryEntity&quot;,&quot;ShareUrl&quot;,&quot;ShowObj&quot;,&quot;TerminateObj&quot;,&quot;DeleteObj&quot;,&quot;AttachWorkflow&quot;,&quot;CancelDocument&quot;,&quot;UnCancelDocument&quot;,&quot;ExecuteSavedReportFromObject&quot;,&quot;UndoEditFiles&quot;,&quot;EditFiles&quot;,&quot;XmtlCancel&quot;,&quot;XmtlUndoCancel&quot;,&quot;StepRejectAction&quot;,&quot;StepAcceptAction&quot;,&quot;StepClaim&quot;,&quot;SharepointCreateDocument&quot;,&quot;SharepointDownloadFile&quot;,&quot;SharepointViewNative&quot;,&quot;GenerateAlternateRendition&quot;,&quot;OpenXMLWordReport&quot;,&quot;SignOff&quot;,&quot;SignOffWithForm&quot;,&quot;UndoSignOff&quot;,&quot;SPFExchangeData&quot;,&quot;LaunchURLWithDynamicArgs&quot;,&quot;SDARelationshipBuilder&quot;,&quot;LaunchURLFromFeatureSet&quot;,&quot;WebClientExtensibility&quot;,&quot;GenerateMergedRendition&quot;,&quot;ListEditUncontrolledItems&quot;,&quot;WorkflowDetailsReport&quot;,&quot;ShareFile&quot;,&quot;CopyToLocalFile&quot;,&quot;GenerateMergedRenditionForFiles&quot;,&quot;PrintFile&quot;,&quot;UnlockUserAccount&quot;,&quot;StartScheduler&quot;,&quot;StopScheduler&quot;,&quot;SPFCopyConfigAccess&quot;,&quot;Dashboard&quot;,&quot;UpdateReferences&quot;,&quot;UpdateReferredBy&quot;,&quot;RelationshipManagement&quot;,&quot;GenerateThumbnail&quot;,&quot;EditFilesOnline&quot;,&quot;FinishEditOnline&quot;,&quot;FinishEditOnlineSignOff&quot;,&quot;UndoEditOnline&quot;,&quot;ViewOnline&quot;,&quot;GoToOneDrive&quot;,&quot;UpdateWidget&quot;,&quot;ReplaceEditableCopyWithMasterCopy&quot;,&quot;RequestForESign&quot;,&quot;CompleteESign&quot;,&quot;CompareDocuments&quot;,&quot;CreateWebGLSchedulerTask&quot;,&quot;SDACompareFiles&quot;,&quot;Navigate&quot;,&quot;ViewInDocument&quot;,&quot;SmartPlantReview&quot;,&quot;ViewBatchRenditionLog&quot;,&quot;ClearBravaCache&quot;,&quot;ViewInVisualReport&quot;,&quot;SCLBQualityAssuranceReviewDetails&quot;,&quot;SCLBManageQualityAssuranceReviewPlan&quot;,&quot;SCLBQualityAssuranceReview&quot;,&quot;SDAImpactAnalysis&quot;,&quot;ConflictResolution&quot;,&quot;SCLBCommunicationManagementDetails&quot;,&quot;SCLBCommunicationManagement&quot;,&quot;SOPSCommunicationManagementDetails&quot;,&quot;SOPSCommunicationManagement&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;SCLBQualityAssuranceRegister&quot;,&quot;SDAManageMarkupLayersForRendition&quot;,&quot;SOPSManageMarkupLayersForRendition&quot;,&quot;SDAImpactAnalysis&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;ConflictResolution&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;ProjectHandover&quot;,&quot;SDAShowMySDVJobs&quot;,&quot;SDxShowMySDVJobs&quot;,&quot;SDAApproveSDVJob&quot;,&quot;SDAViewSDVJobSummary&quot;,&quot;SDADeleteSDVJob&quot;,&quot;SDASDVDownloadValidationReport&quot;,&quot;LScanViewSite&quot;,&quot;LScanViewScan&quot;,&quot;LScanSynchronizeSiteData&quot;,&quot;LScanViewTagInScan&quot;,&quot;ViewConsolidatedDataForObject&quot;,&quot;ViewSharedData&quot;,&quot;CreateWorkAreaDefinition&quot;,&quot;EditWorkAreaDefinition&quot;,&quot;RunDanglingRelsReport&quot;,&quot;RegisterAuthoringTool&quot;,&quot;InconsistencyReportWithStartingObject&quot;,&quot;InconsistencyReportByQuery&quot;,&quot;InconsistencyReport&quot;,&quot;RegenerateCommonSchema&quot;,&quot;CancelChangeAction&quot;,&quot;SIOInconsistencyReportByQuery&quot;,&quot;RelateObjectsToWorkArea&quot;,&quot;ResolveDuplicateDocuments&quot;,&quot;SPFNContentExtraction&quot;,&quot;UnClaimObj&quot;,&quot;ClaimObj&quot;,&quot;MergeConfig&quot;,&quot;MergeObj&quot;,&quot;MergeStructure&quot;,&quot;CancelProject&quot;,&quot;ChangeConfigStatus&quot;,&quot;SyncObjects&quot;,&quot;SPXSAPSync&quot;,&quot;SDxConnSync&quot;,&quot;ExampleClientAPIRoute&quot;,&quot;HistoryViewRoute&quot;,&quot;ExampleClientAPIAction&quot;,&quot;ExampleClientAPIModal&quot;,&quot;HistoryViewModal&quot;,&quot;ExampleClientAPIWidget&quot;],&quot;ObjectObidAndDomains&quot;:[&quot;${TC013_SearchDocW3CharHSV6IQZ08IA}&quot;]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">3752</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQZ08IA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC013_SearchDocW3CharHSV6IQZ08IA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC013_SearchDocW3CharHSV6IQZ08IA} ${TC013_SearchDocW3CharHSV6IQZ08IA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC013_SearchDocW3CharHSV6IQZ08IA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="AfterJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    SELECT
               DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255),DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  AS [SQL_Execution],
                   SUM(total_logical_reads)  AS [BufferGets],
                                 SUM(total_physical_reads)  AS [Physical Reads],
                 SUM(total_worker_time) AS [CPU Time Ms],
       SUM(total_elapsed_time)  AS [Elapsed Time]
      FROM sys.dm_exec_query_stats AS qs
    CROSS APPLY (
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  FROM sys.dm_exec_plan_attributes(qs.plan_handle)
                 WHERE attribute = N&apos;dbid&apos;) AS F_DB
               
    GROUP BY DatabaseID

)
SELECT 
       
                  [DatabaseID],[SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
                  [Elapsed Time] 
                  FROM DB_CPU_Stats
where DatabaseName= &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable">SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;

String TransName=&quot;SearchDocW3CharHSV&quot;;
String SQLStartTime = JMeterUtils.getProperty(&quot;SQLStartTime-JP&quot;);
String SQLEndTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());

log.info(&quot;aSQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
//int DatabaseID = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;);
//log.info(&quot;DatabaseID = &gt; &quot;+DatabaseID);
//log.info(&quot;SQLStartTime = &gt; &quot;+SQLStartTime);
//log.info(&quot;SQLEndTime = &gt; &quot;+SQLEndTime);
Long aSQL_Execution = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;SQL_Execution&quot;);
//log.info(&quot;aSQL_Execution = &gt; &quot;+aSQL_Execution);

Long aBufferGets = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;BufferGets&quot;);
//log.info(&quot;aBufferGets = &gt; &quot;+aBufferGets);
Long aPhysicalReads = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Physical Reads&quot;);
//log.info(&quot;aPhysicalReads = &gt; &quot;+aPhysicalReads);
Long aCPUTimeMs = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;CPU Time Ms&quot;);
//log.info(&quot;aCPUTimeMs = &gt; &quot;+aCPUTimeMs);
Long aElapsedTime = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Elapsed Time&quot;);
//log.info(&quot;aElapsedTime = &gt; &quot;+aElapsedTime);

String BSQlStats = JMeterUtils.getProperty(&quot;SQlStats-JP&quot;);
//log.info(&quot;BSQlStats = &gt; &quot;+BSQlStats);

Long bSQL_Execution = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;SQL_Execution=&quot;)+14, BSQlStats.indexOf(&quot;, BufferGets=&quot;)));
//log.info(&quot;bSQL_Execution = &gt; &quot;+bSQL_Execution);

//Long.parseLong
Long bBufferGets = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11, BSQlStats.indexOf(&quot;}&quot;)));
//int bBufferGets = Integer.parseInt(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11,BSQlStats.indexOf(&quot;}&quot;)));
//log.info(&quot;bBufferGets = &gt; &quot;+bBufferGets);

Long bPhysicalReads = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Physical Reads=&quot;)+15, BSQlStats.indexOf(&quot;, DatabaseID&quot;)));
//log.info(&quot;bPhysicalReads = &gt; &quot;+bPhysicalReads);

Long bCPUTimeMs = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;CPU Time Ms=&quot;)+12, BSQlStats.indexOf(&quot;, Elapsed Time&quot;)));
//log.info(&quot;bCPUTimeMs = &gt; &quot;+bCPUTimeMs);

Long bElapsedTime = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Elapsed Time=&quot;)+13, BSQlStats.indexOf(&quot;, SQL_Execution&quot;)));
//log.info(&quot;bElapsedTime = &gt; &quot;+bElapsedTime);

//log.info(&quot;SQL_Execution = &gt; &quot;+(aSQL_Execution-bSQL_Execution));
//log.info(&quot;BufferGets = &gt; &quot;+(aBufferGets-bBufferGets));
//log.info(&quot;PhysicalReads = &gt; &quot;+(aPhysicalReads-bPhysicalReads));
//log.info(&quot;CPUTimeMs = &gt; &quot;+(aCPUTimeMs-bCPUTimeMs));
//log.info(&quot;ElapsedTime = &gt; &quot;+(aElapsedTime-bElapsedTime));
log.info(&quot;===================================================&quot;);
String Perfcsv = TransName +&quot;,&quot;+String.valueOf(vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;))+&quot;,&quot;+SQLStartTime+&quot;,&quot;+SQLEndTime+&quot;,&quot;+String.valueOf(aSQL_Execution-bSQL_Execution)+&quot;,&quot;+String.valueOf(aBufferGets-bBufferGets)+&quot;,&quot;+String.valueOf(aPhysicalReads-bPhysicalReads)+&quot;,&quot;+String.valueOf(aCPUTimeMs-bCPUTimeMs)+&quot;,&quot;+String.valueOf(aElapsedTime-bElapsedTime);

log.info(&quot;Perfcsv = &gt;&quot;+Perfcsv);
log.info(&quot;===================================================&quot;);
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLEndTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

String PerfCSVFile = vars.get(&quot;OutputPath&quot;) + vars.get(&quot;OutputFolderName&quot;) +&quot;perf.csv&quot;;
FileWriter fstream = new FileWriter(PerfCSVFile,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(Perfcsv);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="15" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">false</boolProp>
              </TransactionController>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="BeforeJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    Select 
     DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255), DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  As [SQL_Execution],
                   SUM(total_logical_reads)  As [BufferGets],
                                 SUM(total_physical_reads)  As [Physical Reads],
                 SUM(total_worker_time) As [CPU Time Ms],
       SUM(total_elapsed_time)  As [Elapsed Time]
      From sys.dm_exec_query_stats AS qs
    CROSS APPLY(
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  From sys.dm_exec_plan_attributes(qs.plan_handle)
                  Where Attribute = N&apos;dbid&apos;) As F_DB
               
    Group BY DatabaseID
)
Select 

       [DatabaseID], [SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
       [Elapsed Time] 
                  From DB_CPU_Stats
Where DatabaseName = &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable"> SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;
String SQLStartTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());
//log.info(&quot;SQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLStartTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

log.info(&quot;Before SQlStats = &gt; &quot;+JMeterUtils.getProperty(&quot;SQlStats-JP&quot;));</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_FilterDocsByContract" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">false</boolProp>
                </TransactionController>
                <hashTree>
                  <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="SearchFDWDocuments14" elementType="Argument">
                        <stringProp name="Argument.name">SearchFDWDocuments14</stringProp>
                        <stringProp name="Argument.value">*AB*%27)%20and%20(Contract%20eq%20%27Proj1.HSV.AB_1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </Arguments>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;CreateObj&quot;,&quot;ManageFiles&quot;,&quot;ManageSignedFiles&quot;,&quot;CopyObj&quot;,&quot;CreateClassObj&quot;,&quot;CreateClassObjAndRel&quot;,&quot;CreateObjAndRel&quot;,&quot;CreateClassObjAndLoad&quot;,&quot;SDxCreateClassObjAndLoad&quot;,&quot;CreateWizardClassObj&quot;,&quot;CreateSignWizardClassObj&quot;,&quot;CreateObjectFromSelectedObjects&quot;,&quot;CreateSignObjectFromSelectedObjects&quot;,&quot;EditObj&quot;,&quot;EditWizardObj&quot;,&quot;EditSignWizardObj&quot;,&quot;ShowInbox&quot;,&quot;ReplaceFiles&quot;,&quot;CheckInFiles&quot;,&quot;TaskReassignmentConfiguration&quot;,&quot;SDARelationshipBuilder&quot;,&quot;CreateEntryPointFromQFind&quot;,&quot;AdminEntryPoints&quot;,&quot;ShowWorkflow&quot;,&quot;SDxWorkflowTemplateEditor&quot;,&quot;SDxCreateWorkflowTemplate&quot;,&quot;ListEditContextMenu&quot;,&quot;FTRSearch&quot;,&quot;AssignRecipients&quot;,&quot;Revise&quot;,&quot;UploadDocument&quot;,&quot;EditObjWithClassification&quot;,&quot;SDAManageDataTree&quot;,&quot;ShowInboxForObject&quot;,&quot;SDACopyDataBookContent&quot;,&quot;ConfigRoleAssignment&quot;,&quot;DashboardCreatePage&quot;,&quot;DashboardUpdatePage&quot;,&quot;InsertHistRev&quot;,&quot;CopyDistributionMatrix&quot;,&quot;MultiStepReAssign&quot;,&quot;AddRecipient&quot;,&quot;ExpandDocNestedStructure&quot;,&quot;ExpandFileNestedStructure&quot;,&quot;TabOutletManagement&quot;,&quot;CompareWorkflowTemplates&quot;,&quot;MaintainCalendar&quot;,&quot;EditObjModal&quot;,&quot;RegenerateMetadata&quot;,&quot;QueryEntity&quot;,&quot;ShareUrl&quot;,&quot;ShowObj&quot;,&quot;TerminateObj&quot;,&quot;DeleteObj&quot;,&quot;AttachWorkflow&quot;,&quot;CancelDocument&quot;,&quot;UnCancelDocument&quot;,&quot;ExecuteSavedReportFromObject&quot;,&quot;UndoEditFiles&quot;,&quot;EditFiles&quot;,&quot;XmtlCancel&quot;,&quot;XmtlUndoCancel&quot;,&quot;StepRejectAction&quot;,&quot;StepAcceptAction&quot;,&quot;StepClaim&quot;,&quot;SharepointCreateDocument&quot;,&quot;SharepointDownloadFile&quot;,&quot;SharepointViewNative&quot;,&quot;GenerateAlternateRendition&quot;,&quot;OpenXMLWordReport&quot;,&quot;SignOff&quot;,&quot;SignOffWithForm&quot;,&quot;UndoSignOff&quot;,&quot;SPFExchangeData&quot;,&quot;LaunchURLWithDynamicArgs&quot;,&quot;SDARelationshipBuilder&quot;,&quot;LaunchURLFromFeatureSet&quot;,&quot;WebClientExtensibility&quot;,&quot;GenerateMergedRendition&quot;,&quot;ListEditUncontrolledItems&quot;,&quot;WorkflowDetailsReport&quot;,&quot;ShareFile&quot;,&quot;CopyToLocalFile&quot;,&quot;GenerateMergedRenditionForFiles&quot;,&quot;PrintFile&quot;,&quot;UnlockUserAccount&quot;,&quot;StartScheduler&quot;,&quot;StopScheduler&quot;,&quot;SPFCopyConfigAccess&quot;,&quot;Dashboard&quot;,&quot;UpdateReferences&quot;,&quot;UpdateReferredBy&quot;,&quot;RelationshipManagement&quot;,&quot;GenerateThumbnail&quot;,&quot;EditFilesOnline&quot;,&quot;FinishEditOnline&quot;,&quot;FinishEditOnlineSignOff&quot;,&quot;UndoEditOnline&quot;,&quot;ViewOnline&quot;,&quot;GoToOneDrive&quot;,&quot;UpdateWidget&quot;,&quot;ReplaceEditableCopyWithMasterCopy&quot;,&quot;RequestForESign&quot;,&quot;CompleteESign&quot;,&quot;CompareDocuments&quot;,&quot;CreateWebGLSchedulerTask&quot;,&quot;SDACompareFiles&quot;,&quot;Navigate&quot;,&quot;ViewInDocument&quot;,&quot;SmartPlantReview&quot;,&quot;ViewBatchRenditionLog&quot;,&quot;ClearBravaCache&quot;,&quot;ViewInVisualReport&quot;,&quot;SCLBQualityAssuranceReviewDetails&quot;,&quot;SCLBManageQualityAssuranceReviewPlan&quot;,&quot;SCLBQualityAssuranceReview&quot;,&quot;SDAImpactAnalysis&quot;,&quot;ConflictResolution&quot;,&quot;SCLBCommunicationManagementDetails&quot;,&quot;SCLBCommunicationManagement&quot;,&quot;SOPSCommunicationManagementDetails&quot;,&quot;SOPSCommunicationManagement&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;SCLBQualityAssuranceRegister&quot;,&quot;SDAManageMarkupLayersForRendition&quot;,&quot;SOPSManageMarkupLayersForRendition&quot;,&quot;SDAImpactAnalysis&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;ConflictResolution&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;ProjectHandover&quot;,&quot;SDAShowMySDVJobs&quot;,&quot;SDxShowMySDVJobs&quot;,&quot;SDAApproveSDVJob&quot;,&quot;SDAViewSDVJobSummary&quot;,&quot;SDADeleteSDVJob&quot;,&quot;SDASDVDownloadValidationReport&quot;,&quot;LScanViewSite&quot;,&quot;LScanViewScan&quot;,&quot;LScanSynchronizeSiteData&quot;,&quot;LScanViewTagInScan&quot;,&quot;ViewConsolidatedDataForObject&quot;,&quot;ViewSharedData&quot;,&quot;CreateWorkAreaDefinition&quot;,&quot;EditWorkAreaDefinition&quot;,&quot;RunDanglingRelsReport&quot;,&quot;RegisterAuthoringTool&quot;,&quot;InconsistencyReportWithStartingObject&quot;,&quot;InconsistencyReportByQuery&quot;,&quot;InconsistencyReport&quot;,&quot;RegenerateCommonSchema&quot;,&quot;CancelChangeAction&quot;,&quot;SIOInconsistencyReportByQuery&quot;,&quot;RelateObjectsToWorkArea&quot;,&quot;ResolveDuplicateDocuments&quot;,&quot;SPFNContentExtraction&quot;,&quot;UnClaimObj&quot;,&quot;ClaimObj&quot;,&quot;MergeConfig&quot;,&quot;MergeObj&quot;,&quot;MergeStructure&quot;,&quot;CancelProject&quot;,&quot;ChangeConfigStatus&quot;,&quot;SyncObjects&quot;,&quot;SPXSAPSync&quot;,&quot;SDxConnSync&quot;,&quot;ExampleClientAPIRoute&quot;,&quot;HistoryViewRoute&quot;,&quot;ExampleClientAPIAction&quot;,&quot;ExampleClientAPIModal&quot;,&quot;HistoryViewModal&quot;,&quot;ExampleClientAPIWidget&quot;],&quot;ObjectObidAndDomains&quot;:[&quot;${TC013_SearchDocW3CharHSV6IQY000A}&quot;]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">3752</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs[0]||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC014_FilterDocsByContract6IQY000A} ${TC014_FilterDocsByContract6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC014_FilterDocsByContract6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC014_FilterDocsByContract6IQY000A} ${TC014_FilterDocsByContract6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC014_FilterDocsByContract6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC014_FilterDocsByContract6IQY000A} ${TC014_FilterDocsByContract6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC014_FilterDocsByContract6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC014_FilterDocsByContract6IQY000A} ${TC014_FilterDocsByContract6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC014_FilterDocsByContract6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract&apos;6IQY000A&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract&apos;6IQY000A&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC014_FilterDocsByContract&apos;6IQY000A&apos;} ${TC014_FilterDocsByContract&apos;6IQY000A&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC014_FilterDocsByContract&apos;6IQY000A&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQY002A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ShowInboxForObject&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQY002A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC014_FilterDocsByContract6IQY002A} ${TC014_FilterDocsByContract6IQY002A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC014_FilterDocsByContract6IQY002A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract&apos;6IQY002A&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ShowInboxForObject&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract&apos;6IQY002A&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC014_FilterDocsByContract&apos;6IQY002A&apos;} ${TC014_FilterDocsByContract&apos;6IQY002A&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC014_FilterDocsByContract&apos;6IQY002A&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/FDWDocuments" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="%24format" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24format</stringProp>
                          <stringProp name="Argument.value">json</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24top</stringProp>
                          <stringProp name="Argument.value">25</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24filter</stringProp>
                          <stringProp name="Argument.value">(contains(Name%2C%27${SearchFDWDocuments14}%27))</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24count</stringProp>
                          <stringProp name="Argument.value">false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="_" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">_</stringProp>
                          <stringProp name="Argument.value">1656664981086</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/FDWDocuments</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">x-requested-with</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">
String DynamicOBID;
DynamicOBID = vars.get(&quot;DynamicOBID_ALL&quot;);
DynamicOBID = &quot;\&quot;&quot;+ DynamicOBID.replaceAll(&quot;,&quot;,&quot;\&quot;,\&quot;&quot;) + &quot;\&quot;&quot;;
vars.put(&quot;DynamicOBIDs&quot;, DynamicOBID);</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQZ09XA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep119&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQZ09XA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC014_FilterDocsByContract6IQZ09XA} ${TC014_FilterDocsByContract6IQZ09XA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC014_FilterDocsByContract6IQZ09XA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQZ09XA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep119&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQZ09XA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC014_FilterDocsByContract6IQZ09XA} ${TC014_FilterDocsByContract6IQZ09XA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC014_FilterDocsByContract6IQZ09XA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC014_FilterDocsByContract6IQY000A} ${TC014_FilterDocsByContract6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC014_FilterDocsByContract6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQZ000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep0&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQZ000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC014_FilterDocsByContract6IQZ000A} ${TC014_FilterDocsByContract6IQZ000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC014_FilterDocsByContract6IQZ000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC014_FilterDocsByContract6IQY000A} ${TC014_FilterDocsByContract6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC014_FilterDocsByContract6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC014_FilterDocsByContract6IQY000A} ${TC014_FilterDocsByContract6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC014_FilterDocsByContract6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQZ08FA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep101&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQZ08FA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC014_FilterDocsByContract6IQZ08FA} ${TC014_FilterDocsByContract6IQZ08FA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC014_FilterDocsByContract6IQZ08FA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQZ08IA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep102&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQZ08IA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC014_FilterDocsByContract6IQZ08IA} ${TC014_FilterDocsByContract6IQZ08IA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC014_FilterDocsByContract6IQZ08IA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQZ08RA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep105&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQZ08RA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC014_FilterDocsByContract6IQZ08RA} ${TC014_FilterDocsByContract6IQZ08RA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC014_FilterDocsByContract6IQZ08RA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQZ08XA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep107&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQZ08XA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC014_FilterDocsByContract6IQZ08XA} ${TC014_FilterDocsByContract6IQZ08XA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC014_FilterDocsByContract6IQZ08XA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQZ09XA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep119&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQZ09XA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC014_FilterDocsByContract6IQZ09XA} ${TC014_FilterDocsByContract6IQZ09XA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC014_FilterDocsByContract6IQZ09XA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQZ093A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep109&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQZ093A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC014_FilterDocsByContract6IQZ093A} ${TC014_FilterDocsByContract6IQZ093A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC014_FilterDocsByContract6IQZ093A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQZ090A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep108&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQZ090A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC014_FilterDocsByContract6IQZ090A} ${TC014_FilterDocsByContract6IQZ090A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC014_FilterDocsByContract6IQZ090A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQZ09XA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep119&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQZ09XA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC014_FilterDocsByContract6IQZ09XA} ${TC014_FilterDocsByContract6IQZ09XA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC014_FilterDocsByContract6IQZ09XA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC014_FilterDocsByContract6IQY000A} ${TC014_FilterDocsByContract6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC014_FilterDocsByContract6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQZ08CA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep100&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQZ08CA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC014_FilterDocsByContract6IQZ08CA} ${TC014_FilterDocsByContract6IQZ08CA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC014_FilterDocsByContract6IQZ08CA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQZ096A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep110&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC014_FilterDocsByContract6IQZ096A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC014_FilterDocsByContract6IQZ096A} ${TC014_FilterDocsByContract6IQZ096A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC014_FilterDocsByContract6IQZ096A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
                    <stringProp name="delimiter">,</stringProp>
                    <stringProp name="fileEncoding"></stringProp>
                    <stringProp name="filename">${InputPath}SearchFDWDocuments14.csv</stringProp>
                    <boolProp name="ignoreFirstLine">false</boolProp>
                    <boolProp name="quotedData">false</boolProp>
                    <boolProp name="recycle">true</boolProp>
                    <stringProp name="shareMode">shareMode.all</stringProp>
                    <boolProp name="stopThread">false</boolProp>
                    <stringProp name="variableNames">SearchFDWDocuments14</stringProp>
                  </CSVDataSet>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/FDWDocuments" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="%24format" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24format</stringProp>
                          <stringProp name="Argument.value">json</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24top</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24filter</stringProp>
                          <stringProp name="Argument.value">(contains(Name%2C%27${SearchFDWDocuments14}%27))</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24count</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="_" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">_</stringProp>
                          <stringProp name="Argument.value">1656664981086</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/FDWDocuments</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
                    <stringProp name="delimiter">,</stringProp>
                    <stringProp name="fileEncoding"></stringProp>
                    <stringProp name="filename">${InputPath}SearchFDWDocuments14.csv</stringProp>
                    <boolProp name="ignoreFirstLine">false</boolProp>
                    <boolProp name="quotedData">false</boolProp>
                    <boolProp name="recycle">true</boolProp>
                    <stringProp name="shareMode">shareMode.all</stringProp>
                    <boolProp name="stopThread">false</boolProp>
                    <stringProp name="variableNames">SearchFDWDocuments14</stringProp>
                  </CSVDataSet>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetDynIconName()" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ObjectObids&quot;: [${DynamicOBIDs}]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetDynIconName()</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">292</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..OBID||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;ListEditContextMenu&quot;],&quot;ObjectObidAndDomains&quot;:[${DynamicOBIDs}]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">338</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="AfterJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    SELECT
               DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255),DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  AS [SQL_Execution],
                   SUM(total_logical_reads)  AS [BufferGets],
                                 SUM(total_physical_reads)  AS [Physical Reads],
                 SUM(total_worker_time) AS [CPU Time Ms],
       SUM(total_elapsed_time)  AS [Elapsed Time]
      FROM sys.dm_exec_query_stats AS qs
    CROSS APPLY (
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  FROM sys.dm_exec_plan_attributes(qs.plan_handle)
                 WHERE attribute = N&apos;dbid&apos;) AS F_DB
               
    GROUP BY DatabaseID

)
SELECT 
       
                  [DatabaseID],[SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
                  [Elapsed Time] 
                  FROM DB_CPU_Stats
where DatabaseName= &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable">SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;

String TransName=&quot;FilterDocsByContract&quot;;
String SQLStartTime = JMeterUtils.getProperty(&quot;SQLStartTime-JP&quot;);
String SQLEndTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());

log.info(&quot;aSQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
//int DatabaseID = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;);
//log.info(&quot;DatabaseID = &gt; &quot;+DatabaseID);
//log.info(&quot;SQLStartTime = &gt; &quot;+SQLStartTime);
//log.info(&quot;SQLEndTime = &gt; &quot;+SQLEndTime);
Long aSQL_Execution = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;SQL_Execution&quot;);
//log.info(&quot;aSQL_Execution = &gt; &quot;+aSQL_Execution);

Long aBufferGets = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;BufferGets&quot;);
//log.info(&quot;aBufferGets = &gt; &quot;+aBufferGets);
Long aPhysicalReads = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Physical Reads&quot;);
//log.info(&quot;aPhysicalReads = &gt; &quot;+aPhysicalReads);
Long aCPUTimeMs = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;CPU Time Ms&quot;);
//log.info(&quot;aCPUTimeMs = &gt; &quot;+aCPUTimeMs);
Long aElapsedTime = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Elapsed Time&quot;);
//log.info(&quot;aElapsedTime = &gt; &quot;+aElapsedTime);

String BSQlStats = JMeterUtils.getProperty(&quot;SQlStats-JP&quot;);
//log.info(&quot;BSQlStats = &gt; &quot;+BSQlStats);

Long bSQL_Execution = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;SQL_Execution=&quot;)+14, BSQlStats.indexOf(&quot;, BufferGets=&quot;)));
//log.info(&quot;bSQL_Execution = &gt; &quot;+bSQL_Execution);

//Long.parseLong
Long bBufferGets = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11, BSQlStats.indexOf(&quot;}&quot;)));
//int bBufferGets = Integer.parseInt(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11,BSQlStats.indexOf(&quot;}&quot;)));
//log.info(&quot;bBufferGets = &gt; &quot;+bBufferGets);

Long bPhysicalReads = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Physical Reads=&quot;)+15, BSQlStats.indexOf(&quot;, DatabaseID&quot;)));
//log.info(&quot;bPhysicalReads = &gt; &quot;+bPhysicalReads);

Long bCPUTimeMs = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;CPU Time Ms=&quot;)+12, BSQlStats.indexOf(&quot;, Elapsed Time&quot;)));
//log.info(&quot;bCPUTimeMs = &gt; &quot;+bCPUTimeMs);

Long bElapsedTime = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Elapsed Time=&quot;)+13, BSQlStats.indexOf(&quot;, SQL_Execution&quot;)));
//log.info(&quot;bElapsedTime = &gt; &quot;+bElapsedTime);

//log.info(&quot;SQL_Execution = &gt; &quot;+(aSQL_Execution-bSQL_Execution));
//log.info(&quot;BufferGets = &gt; &quot;+(aBufferGets-bBufferGets));
//log.info(&quot;PhysicalReads = &gt; &quot;+(aPhysicalReads-bPhysicalReads));
//log.info(&quot;CPUTimeMs = &gt; &quot;+(aCPUTimeMs-bCPUTimeMs));
//log.info(&quot;ElapsedTime = &gt; &quot;+(aElapsedTime-bElapsedTime));
log.info(&quot;===================================================&quot;);
String Perfcsv = TransName +&quot;,&quot;+String.valueOf(vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;))+&quot;,&quot;+SQLStartTime+&quot;,&quot;+SQLEndTime+&quot;,&quot;+String.valueOf(aSQL_Execution-bSQL_Execution)+&quot;,&quot;+String.valueOf(aBufferGets-bBufferGets)+&quot;,&quot;+String.valueOf(aPhysicalReads-bPhysicalReads)+&quot;,&quot;+String.valueOf(aCPUTimeMs-bCPUTimeMs)+&quot;,&quot;+String.valueOf(aElapsedTime-bElapsedTime);

log.info(&quot;Perfcsv = &gt;&quot;+Perfcsv);
log.info(&quot;===================================================&quot;);
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLEndTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

String PerfCSVFile = vars.get(&quot;OutputPath&quot;) + vars.get(&quot;OutputFolderName&quot;) +&quot;perf.csv&quot;;
FileWriter fstream = new FileWriter(PerfCSVFile,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(Perfcsv);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="16" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">false</boolProp>
              </TransactionController>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="BeforeJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    Select 
     DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255), DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  As [SQL_Execution],
                   SUM(total_logical_reads)  As [BufferGets],
                                 SUM(total_physical_reads)  As [Physical Reads],
                 SUM(total_worker_time) As [CPU Time Ms],
       SUM(total_elapsed_time)  As [Elapsed Time]
      From sys.dm_exec_query_stats AS qs
    CROSS APPLY(
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  From sys.dm_exec_plan_attributes(qs.plan_handle)
                  Where Attribute = N&apos;dbid&apos;) As F_DB
               
    Group BY DatabaseID
)
Select 

       [DatabaseID], [SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
       [Elapsed Time] 
                  From DB_CPU_Stats
Where DatabaseName = &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable"> SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;
String SQLStartTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());
//log.info(&quot;SQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLStartTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

log.info(&quot;Before SQlStats = &gt; &quot;+JMeterUtils.getProperty(&quot;SQlStats-JP&quot;));</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_ClickonInfomapaDoc" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">false</boolProp>
                </TransactionController>
                <hashTree>
                  <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="SearchObjects15" elementType="Argument">
                        <stringProp name="Argument.name">SearchObjects15</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </Arguments>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;CreateObj&quot;,&quot;ManageFiles&quot;,&quot;ManageSignedFiles&quot;,&quot;CopyObj&quot;,&quot;CreateClassObj&quot;,&quot;CreateClassObjAndRel&quot;,&quot;CreateObjAndRel&quot;,&quot;CreateClassObjAndLoad&quot;,&quot;SDxCreateClassObjAndLoad&quot;,&quot;CreateWizardClassObj&quot;,&quot;CreateSignWizardClassObj&quot;,&quot;CreateObjectFromSelectedObjects&quot;,&quot;CreateSignObjectFromSelectedObjects&quot;,&quot;EditObj&quot;,&quot;EditWizardObj&quot;,&quot;EditSignWizardObj&quot;,&quot;ShowInbox&quot;,&quot;ReplaceFiles&quot;,&quot;CheckInFiles&quot;,&quot;TaskReassignmentConfiguration&quot;,&quot;SDARelationshipBuilder&quot;,&quot;CreateEntryPointFromQFind&quot;,&quot;AdminEntryPoints&quot;,&quot;ShowWorkflow&quot;,&quot;SDxWorkflowTemplateEditor&quot;,&quot;SDxCreateWorkflowTemplate&quot;,&quot;ListEditContextMenu&quot;,&quot;FTRSearch&quot;,&quot;AssignRecipients&quot;,&quot;Revise&quot;,&quot;UploadDocument&quot;,&quot;EditObjWithClassification&quot;,&quot;SDAManageDataTree&quot;,&quot;ShowInboxForObject&quot;,&quot;SDACopyDataBookContent&quot;,&quot;ConfigRoleAssignment&quot;,&quot;DashboardCreatePage&quot;,&quot;DashboardUpdatePage&quot;,&quot;InsertHistRev&quot;,&quot;CopyDistributionMatrix&quot;,&quot;MultiStepReAssign&quot;,&quot;AddRecipient&quot;,&quot;ExpandDocNestedStructure&quot;,&quot;ExpandFileNestedStructure&quot;,&quot;TabOutletManagement&quot;,&quot;CompareWorkflowTemplates&quot;,&quot;MaintainCalendar&quot;,&quot;EditObjModal&quot;,&quot;RegenerateMetadata&quot;,&quot;QueryEntity&quot;,&quot;ShareUrl&quot;,&quot;ShowObj&quot;,&quot;TerminateObj&quot;,&quot;DeleteObj&quot;,&quot;AttachWorkflow&quot;,&quot;CancelDocument&quot;,&quot;UnCancelDocument&quot;,&quot;ExecuteSavedReportFromObject&quot;,&quot;UndoEditFiles&quot;,&quot;EditFiles&quot;,&quot;XmtlCancel&quot;,&quot;XmtlUndoCancel&quot;,&quot;StepRejectAction&quot;,&quot;StepAcceptAction&quot;,&quot;StepClaim&quot;,&quot;SharepointCreateDocument&quot;,&quot;SharepointDownloadFile&quot;,&quot;SharepointViewNative&quot;,&quot;GenerateAlternateRendition&quot;,&quot;OpenXMLWordReport&quot;,&quot;SignOff&quot;,&quot;SignOffWithForm&quot;,&quot;UndoSignOff&quot;,&quot;SPFExchangeData&quot;,&quot;LaunchURLWithDynamicArgs&quot;,&quot;SDARelationshipBuilder&quot;,&quot;LaunchURLFromFeatureSet&quot;,&quot;WebClientExtensibility&quot;,&quot;GenerateMergedRendition&quot;,&quot;ListEditUncontrolledItems&quot;,&quot;WorkflowDetailsReport&quot;,&quot;ShareFile&quot;,&quot;CopyToLocalFile&quot;,&quot;GenerateMergedRenditionForFiles&quot;,&quot;PrintFile&quot;,&quot;UnlockUserAccount&quot;,&quot;StartScheduler&quot;,&quot;StopScheduler&quot;,&quot;SPFCopyConfigAccess&quot;,&quot;Dashboard&quot;,&quot;UpdateReferences&quot;,&quot;UpdateReferredBy&quot;,&quot;RelationshipManagement&quot;,&quot;GenerateThumbnail&quot;,&quot;EditFilesOnline&quot;,&quot;FinishEditOnline&quot;,&quot;FinishEditOnlineSignOff&quot;,&quot;UndoEditOnline&quot;,&quot;ViewOnline&quot;,&quot;GoToOneDrive&quot;,&quot;UpdateWidget&quot;,&quot;ReplaceEditableCopyWithMasterCopy&quot;,&quot;RequestForESign&quot;,&quot;CompleteESign&quot;,&quot;CompareDocuments&quot;,&quot;CreateWebGLSchedulerTask&quot;,&quot;SDACompareFiles&quot;,&quot;Navigate&quot;,&quot;ViewInDocument&quot;,&quot;SmartPlantReview&quot;,&quot;ViewBatchRenditionLog&quot;,&quot;ClearBravaCache&quot;,&quot;ViewInVisualReport&quot;,&quot;SCLBQualityAssuranceReviewDetails&quot;,&quot;SCLBManageQualityAssuranceReviewPlan&quot;,&quot;SCLBQualityAssuranceReview&quot;,&quot;SDAImpactAnalysis&quot;,&quot;ConflictResolution&quot;,&quot;SCLBCommunicationManagementDetails&quot;,&quot;SCLBCommunicationManagement&quot;,&quot;SOPSCommunicationManagementDetails&quot;,&quot;SOPSCommunicationManagement&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;SCLBQualityAssuranceRegister&quot;,&quot;SDAManageMarkupLayersForRendition&quot;,&quot;SOPSManageMarkupLayersForRendition&quot;,&quot;SDAImpactAnalysis&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;ConflictResolution&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;ProjectHandover&quot;,&quot;SDAShowMySDVJobs&quot;,&quot;SDxShowMySDVJobs&quot;,&quot;SDAApproveSDVJob&quot;,&quot;SDAViewSDVJobSummary&quot;,&quot;SDADeleteSDVJob&quot;,&quot;SDASDVDownloadValidationReport&quot;,&quot;LScanViewSite&quot;,&quot;LScanViewScan&quot;,&quot;LScanSynchronizeSiteData&quot;,&quot;LScanViewTagInScan&quot;,&quot;ViewConsolidatedDataForObject&quot;,&quot;ViewSharedData&quot;,&quot;CreateWorkAreaDefinition&quot;,&quot;EditWorkAreaDefinition&quot;,&quot;RunDanglingRelsReport&quot;,&quot;RegisterAuthoringTool&quot;,&quot;InconsistencyReportWithStartingObject&quot;,&quot;InconsistencyReportByQuery&quot;,&quot;InconsistencyReport&quot;,&quot;RegenerateCommonSchema&quot;,&quot;CancelChangeAction&quot;,&quot;SIOInconsistencyReportByQuery&quot;,&quot;RelateObjectsToWorkArea&quot;,&quot;ResolveDuplicateDocuments&quot;,&quot;SPFNContentExtraction&quot;,&quot;UnClaimObj&quot;,&quot;ClaimObj&quot;,&quot;MergeConfig&quot;,&quot;MergeObj&quot;,&quot;MergeStructure&quot;,&quot;CancelProject&quot;,&quot;ChangeConfigStatus&quot;,&quot;SyncObjects&quot;,&quot;SPXSAPSync&quot;,&quot;SDxConnSync&quot;,&quot;ExampleClientAPIRoute&quot;,&quot;HistoryViewRoute&quot;,&quot;ExampleClientAPIAction&quot;,&quot;ExampleClientAPIModal&quot;,&quot;HistoryViewModal&quot;,&quot;ExampleClientAPIWidget&quot;],&quot;ObjectObidAndDomains&quot;:[&quot;${TC014_FilterDocsByContract6IQY000A}&quot;]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">3752</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs[0]||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC015_ClickonInfomapaDoc6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC015_ClickonInfomapaDoc6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC015_ClickonInfomapaDoc6IQY000A} ${TC015_ClickonInfomapaDoc6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC015_ClickonInfomapaDoc6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC015_ClickonInfomapaDoc6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC015_ClickonInfomapaDoc6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC015_ClickonInfomapaDoc6IQY000A} ${TC015_ClickonInfomapaDoc6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC015_ClickonInfomapaDoc6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC015_ClickonInfomapaDoc6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC015_ClickonInfomapaDoc6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC015_ClickonInfomapaDoc6IQY000A} ${TC015_ClickonInfomapaDoc6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC015_ClickonInfomapaDoc6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC015_ClickonInfomapaDoc6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC015_ClickonInfomapaDoc6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC015_ClickonInfomapaDoc6IQY000A} ${TC015_ClickonInfomapaDoc6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC015_ClickonInfomapaDoc6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC015_ClickonInfomapaDoc&apos;6IQY000A&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC015_ClickonInfomapaDoc&apos;6IQY000A&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC015_ClickonInfomapaDoc&apos;6IQY000A&apos;} ${TC015_ClickonInfomapaDoc&apos;6IQY000A&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC015_ClickonInfomapaDoc&apos;6IQY000A&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC015_ClickonInfomapaDoc6IQY002A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ShowInboxForObject&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC015_ClickonInfomapaDoc6IQY002A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC015_ClickonInfomapaDoc6IQY002A} ${TC015_ClickonInfomapaDoc6IQY002A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC015_ClickonInfomapaDoc6IQY002A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC015_ClickonInfomapaDoc&apos;6IQY002A&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ShowInboxForObject&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC015_ClickonInfomapaDoc&apos;6IQY002A&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC015_ClickonInfomapaDoc&apos;6IQY002A&apos;} ${TC015_ClickonInfomapaDoc&apos;6IQY002A&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC015_ClickonInfomapaDoc&apos;6IQY002A&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/Objects" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$filter</stringProp>
                          <stringProp name="Argument.value">OBID%20eq%20%27${TC015_ClickonInfomapaDoc6IQY000A}%27</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$top</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$count</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/Objects</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..OBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">
String DynamicOBID;
DynamicOBID = vars.get(&quot;DynamicOBID_ALL&quot;);
DynamicOBID = &quot;\&quot;&quot;+ DynamicOBID.replaceAll(&quot;,&quot;,&quot;\&quot;,\&quot;&quot;) + &quot;\&quot;&quot;;
vars.put(&quot;DynamicOBIDs&quot;, DynamicOBID);</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
                    <stringProp name="delimiter">,</stringProp>
                    <stringProp name="fileEncoding"></stringProp>
                    <stringProp name="filename">${InputPath}SearchObjects15.csv</stringProp>
                    <boolProp name="ignoreFirstLine">false</boolProp>
                    <boolProp name="quotedData">false</boolProp>
                    <boolProp name="recycle">true</boolProp>
                    <stringProp name="shareMode">shareMode.all</stringProp>
                    <boolProp name="stopThread">false</boolProp>
                    <stringProp name="variableNames">SearchObjects15</stringProp>
                  </CSVDataSet>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetNavigationOptions" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;StartingObjectOBID&quot;:&quot;${TC015_ClickonInfomapaDoc6IQY000A}&quot;,&quot;RelLookAhead&quot;:true,&quot;EdgeLookAhead&quot;:true,&quot;IsInfoMap&quot;:true}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetNavigationOptions</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">91</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC015_ClickonInfomapaDoc6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Transmittals&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC015_ClickonInfomapaDoc6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC015_ClickonInfomapaDoc6IQY000A} ${TC015_ClickonInfomapaDoc6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC015_ClickonInfomapaDoc6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC015_ClickonInfomapaDoc6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Transmittals&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC015_ClickonInfomapaDoc6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC015_ClickonInfomapaDoc6IQY000A} ${TC015_ClickonInfomapaDoc6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC015_ClickonInfomapaDoc6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC015_ClickonInfomapaDoc6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Transmittals&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC015_ClickonInfomapaDoc6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC015_ClickonInfomapaDoc6IQY000A} ${TC015_ClickonInfomapaDoc6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC015_ClickonInfomapaDoc6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC015_ClickonInfomapaDoc6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Transmittals&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC015_ClickonInfomapaDoc6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC015_ClickonInfomapaDoc6IQY000A} ${TC015_ClickonInfomapaDoc6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC015_ClickonInfomapaDoc6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC015_ClickonInfomapaDoc&apos;6IQY000A&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Transmittals&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC015_ClickonInfomapaDoc&apos;6IQY000A&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC015_ClickonInfomapaDoc&apos;6IQY000A&apos;} ${TC015_ClickonInfomapaDoc&apos;6IQY000A&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC015_ClickonInfomapaDoc&apos;6IQY000A&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC015_ClickonInfomapaDoc6IQY002A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;All Versions&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC015_ClickonInfomapaDoc6IQY002A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC015_ClickonInfomapaDoc6IQY002A} ${TC015_ClickonInfomapaDoc6IQY002A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC015_ClickonInfomapaDoc6IQY002A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC015_ClickonInfomapaDoc&apos;6IQY002A&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;All Versions&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC015_ClickonInfomapaDoc&apos;6IQY002A&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC015_ClickonInfomapaDoc&apos;6IQY002A&apos;} ${TC015_ClickonInfomapaDoc&apos;6IQY002A&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC015_ClickonInfomapaDoc&apos;6IQY002A&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/Objects" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$filter</stringProp>
                          <stringProp name="Argument.value">OBID%20eq%20%276IQY000A%27%20or%20OBID%20eq%20%276IQY001A%27%20or%20OBID%20eq%20%27${TC015_ClickonInfomapaDoc6IQY002A}%27</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$expand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$expand</stringProp>
                          <stringProp name="Argument.value">SPFXmtlDocument_21($count=true),EDG_SPFViewableFiles($count=true),SPFFileComposition_21($count=true),SDAPrgDeliverableItemPrgMilestones_12($count=true),SPFPrimaryClassification_21($count=true),SDADocContract_12($count=true),SDADocOriginatingOrg_12($count=true),FDWMDRDocMasters_21($count=true),SCLBDocCollaboratingOrgs_12($count=true),SDADocMasterDiscipline_12($count=true),SDADocOrganizations_12($count=true),SPFDocumentRevisions_12($count=true),SPFRevisionVersions_12($count=true),SDADocRevOriginatingOrg_12($count=true)</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/Objects</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">prefer</stringProp>
                          <stringProp name="Header.value">odata.include-annotations=&quot;*&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfresolvedocumentstoversion</stringProp>
                          <stringProp name="Header.value">false</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..OBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">
String DynamicOBID;
DynamicOBID = vars.get(&quot;DynamicOBID_ALL&quot;);
DynamicOBID = &quot;\&quot;&quot;+ DynamicOBID.replaceAll(&quot;,&quot;,&quot;\&quot;,\&quot;&quot;) + &quot;\&quot;&quot;;
vars.put(&quot;DynamicOBIDs&quot;, DynamicOBID);</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Notifications" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$select" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$select</stringProp>
                          <stringProp name="Argument.value">OBID,Name,Description,CreationDate,SPFContextObjectOBID</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$top</stringProp>
                          <stringProp name="Argument.value">25</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$skip" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$skip</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$count</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$orderby" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$orderby</stringProp>
                          <stringProp name="Argument.value">CreationDate+desc</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Notifications</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json,application/vnd.intergraph.data+json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetDynIconName()" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ObjectObids&quot;: [${DynamicOBIDs}]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetDynIconName()</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">182</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..OBID||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetInterfacesForObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ObjectOBID&quot;:&quot;${TC015_ClickonInfomapaDoc6IQY000A}&quot;}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetInterfacesForObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">25</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/Objects(&apos;${TC015_ClickonInfomapaDoc&apos;6IQY000A&apos;}&apos;)/SPFFileComposition_21" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/Objects(&apos;${TC015_ClickonInfomapaDoc&apos;6IQY000A&apos;}&apos;)/SPFFileComposition_21</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="AfterJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    SELECT
               DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255),DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  AS [SQL_Execution],
                   SUM(total_logical_reads)  AS [BufferGets],
                                 SUM(total_physical_reads)  AS [Physical Reads],
                 SUM(total_worker_time) AS [CPU Time Ms],
       SUM(total_elapsed_time)  AS [Elapsed Time]
      FROM sys.dm_exec_query_stats AS qs
    CROSS APPLY (
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  FROM sys.dm_exec_plan_attributes(qs.plan_handle)
                 WHERE attribute = N&apos;dbid&apos;) AS F_DB
               
    GROUP BY DatabaseID

)
SELECT 
       
                  [DatabaseID],[SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
                  [Elapsed Time] 
                  FROM DB_CPU_Stats
where DatabaseName= &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable">SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;

String TransName=&quot;ClickonInfomapaDoc&quot;;
String SQLStartTime = JMeterUtils.getProperty(&quot;SQLStartTime-JP&quot;);
String SQLEndTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());

log.info(&quot;aSQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
//int DatabaseID = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;);
//log.info(&quot;DatabaseID = &gt; &quot;+DatabaseID);
//log.info(&quot;SQLStartTime = &gt; &quot;+SQLStartTime);
//log.info(&quot;SQLEndTime = &gt; &quot;+SQLEndTime);
Long aSQL_Execution = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;SQL_Execution&quot;);
//log.info(&quot;aSQL_Execution = &gt; &quot;+aSQL_Execution);

Long aBufferGets = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;BufferGets&quot;);
//log.info(&quot;aBufferGets = &gt; &quot;+aBufferGets);
Long aPhysicalReads = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Physical Reads&quot;);
//log.info(&quot;aPhysicalReads = &gt; &quot;+aPhysicalReads);
Long aCPUTimeMs = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;CPU Time Ms&quot;);
//log.info(&quot;aCPUTimeMs = &gt; &quot;+aCPUTimeMs);
Long aElapsedTime = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Elapsed Time&quot;);
//log.info(&quot;aElapsedTime = &gt; &quot;+aElapsedTime);

String BSQlStats = JMeterUtils.getProperty(&quot;SQlStats-JP&quot;);
//log.info(&quot;BSQlStats = &gt; &quot;+BSQlStats);

Long bSQL_Execution = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;SQL_Execution=&quot;)+14, BSQlStats.indexOf(&quot;, BufferGets=&quot;)));
//log.info(&quot;bSQL_Execution = &gt; &quot;+bSQL_Execution);

//Long.parseLong
Long bBufferGets = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11, BSQlStats.indexOf(&quot;}&quot;)));
//int bBufferGets = Integer.parseInt(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11,BSQlStats.indexOf(&quot;}&quot;)));
//log.info(&quot;bBufferGets = &gt; &quot;+bBufferGets);

Long bPhysicalReads = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Physical Reads=&quot;)+15, BSQlStats.indexOf(&quot;, DatabaseID&quot;)));
//log.info(&quot;bPhysicalReads = &gt; &quot;+bPhysicalReads);

Long bCPUTimeMs = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;CPU Time Ms=&quot;)+12, BSQlStats.indexOf(&quot;, Elapsed Time&quot;)));
//log.info(&quot;bCPUTimeMs = &gt; &quot;+bCPUTimeMs);

Long bElapsedTime = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Elapsed Time=&quot;)+13, BSQlStats.indexOf(&quot;, SQL_Execution&quot;)));
//log.info(&quot;bElapsedTime = &gt; &quot;+bElapsedTime);

//log.info(&quot;SQL_Execution = &gt; &quot;+(aSQL_Execution-bSQL_Execution));
//log.info(&quot;BufferGets = &gt; &quot;+(aBufferGets-bBufferGets));
//log.info(&quot;PhysicalReads = &gt; &quot;+(aPhysicalReads-bPhysicalReads));
//log.info(&quot;CPUTimeMs = &gt; &quot;+(aCPUTimeMs-bCPUTimeMs));
//log.info(&quot;ElapsedTime = &gt; &quot;+(aElapsedTime-bElapsedTime));
log.info(&quot;===================================================&quot;);
String Perfcsv = TransName +&quot;,&quot;+String.valueOf(vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;))+&quot;,&quot;+SQLStartTime+&quot;,&quot;+SQLEndTime+&quot;,&quot;+String.valueOf(aSQL_Execution-bSQL_Execution)+&quot;,&quot;+String.valueOf(aBufferGets-bBufferGets)+&quot;,&quot;+String.valueOf(aPhysicalReads-bPhysicalReads)+&quot;,&quot;+String.valueOf(aCPUTimeMs-bCPUTimeMs)+&quot;,&quot;+String.valueOf(aElapsedTime-bElapsedTime);

log.info(&quot;Perfcsv = &gt;&quot;+Perfcsv);
log.info(&quot;===================================================&quot;);
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLEndTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

String PerfCSVFile = vars.get(&quot;OutputPath&quot;) + vars.get(&quot;OutputFolderName&quot;) +&quot;perf.csv&quot;;
FileWriter fstream = new FileWriter(PerfCSVFile,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(Perfcsv);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="17" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">false</boolProp>
              </TransactionController>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="BeforeJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    Select 
     DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255), DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  As [SQL_Execution],
                   SUM(total_logical_reads)  As [BufferGets],
                                 SUM(total_physical_reads)  As [Physical Reads],
                 SUM(total_worker_time) As [CPU Time Ms],
       SUM(total_elapsed_time)  As [Elapsed Time]
      From sys.dm_exec_query_stats AS qs
    CROSS APPLY(
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  From sys.dm_exec_plan_attributes(qs.plan_handle)
                  Where Attribute = N&apos;dbid&apos;) As F_DB
               
    Group BY DatabaseID
)
Select 

       [DatabaseID], [SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
       [Elapsed Time] 
                  From DB_CPU_Stats
Where DatabaseName = &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable"> SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;
String SQLStartTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());
//log.info(&quot;SQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLStartTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

log.info(&quot;Before SQlStats = &gt; &quot;+JMeterUtils.getProperty(&quot;SQlStats-JP&quot;));</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_ClickonDisciplineRelDoc" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">false</boolProp>
                </TransactionController>
                <hashTree>
                  <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="SearchObjects16" elementType="Argument">
                        <stringProp name="Argument.name">SearchObjects16</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </Arguments>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/Objects" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$filter</stringProp>
                          <stringProp name="Argument.value">OBID%20eq%20%27${TC015_ClickonInfomapaDoc6IQY000A}%27</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$top</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$count</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/Objects</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..OBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">
String DynamicOBID;
DynamicOBID = vars.get(&quot;DynamicOBID_ALL&quot;);
DynamicOBID = &quot;\&quot;&quot;+ DynamicOBID.replaceAll(&quot;,&quot;,&quot;\&quot;,\&quot;&quot;) + &quot;\&quot;&quot;;
vars.put(&quot;DynamicOBIDs&quot;, DynamicOBID);</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
                    <stringProp name="delimiter">,</stringProp>
                    <stringProp name="fileEncoding"></stringProp>
                    <stringProp name="filename">${InputPath}SearchObjects16.csv</stringProp>
                    <boolProp name="ignoreFirstLine">false</boolProp>
                    <boolProp name="quotedData">false</boolProp>
                    <boolProp name="recycle">true</boolProp>
                    <stringProp name="shareMode">shareMode.all</stringProp>
                    <boolProp name="stopThread">false</boolProp>
                    <stringProp name="variableNames">SearchObjects16</stringProp>
                  </CSVDataSet>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetNavigationOptions" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;StartingObjectOBID&quot;:&quot;${TC015_ClickonInfomapaDoc6IQY000A}&quot;,&quot;RelLookAhead&quot;:true,&quot;EdgeLookAhead&quot;:true,&quot;IsInfoMap&quot;:true}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetNavigationOptions</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">91</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC016_ClickonDisciplineRelDoc6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Transmittals&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC016_ClickonDisciplineRelDoc6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC016_ClickonDisciplineRelDoc6IQY000A} ${TC016_ClickonDisciplineRelDoc6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC016_ClickonDisciplineRelDoc6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC016_ClickonDisciplineRelDoc6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Transmittals&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC016_ClickonDisciplineRelDoc6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC016_ClickonDisciplineRelDoc6IQY000A} ${TC016_ClickonDisciplineRelDoc6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC016_ClickonDisciplineRelDoc6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC016_ClickonDisciplineRelDoc6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Transmittals&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC016_ClickonDisciplineRelDoc6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC016_ClickonDisciplineRelDoc6IQY000A} ${TC016_ClickonDisciplineRelDoc6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC016_ClickonDisciplineRelDoc6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC016_ClickonDisciplineRelDoc6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Transmittals&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC016_ClickonDisciplineRelDoc6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC016_ClickonDisciplineRelDoc6IQY000A} ${TC016_ClickonDisciplineRelDoc6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC016_ClickonDisciplineRelDoc6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC016_ClickonDisciplineRelDoc&apos;6IQY000A&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Transmittals&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC016_ClickonDisciplineRelDoc&apos;6IQY000A&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC016_ClickonDisciplineRelDoc&apos;6IQY000A&apos;} ${TC016_ClickonDisciplineRelDoc&apos;6IQY000A&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC016_ClickonDisciplineRelDoc&apos;6IQY000A&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC016_ClickonDisciplineRelDoc6IQY002A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;All Versions&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC016_ClickonDisciplineRelDoc6IQY002A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC016_ClickonDisciplineRelDoc6IQY002A} ${TC016_ClickonDisciplineRelDoc6IQY002A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC016_ClickonDisciplineRelDoc6IQY002A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC016_ClickonDisciplineRelDoc&apos;6IQY002A&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;All Versions&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC016_ClickonDisciplineRelDoc&apos;6IQY002A&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC016_ClickonDisciplineRelDoc&apos;6IQY002A&apos;} ${TC016_ClickonDisciplineRelDoc&apos;6IQY002A&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC016_ClickonDisciplineRelDoc&apos;6IQY002A&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/Objects" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$filter</stringProp>
                          <stringProp name="Argument.value">OBID%20eq%20%276IQY000A%27%20or%20OBID%20eq%20%27${TC016_ClickonDisciplineRelDoc6IQY002A}%27%20or%20OBID%20eq%20%276IQY001A%27</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$expand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$expand</stringProp>
                          <stringProp name="Argument.value">SPFRevisionVersions_12($count=true),SDADocRevOriginatingOrg_12($count=true),SDAPrgDeliverableItemPrgMilestones_12($count=true),SPFPrimaryClassification_21($count=true),SDADocOriginatingOrg_12($count=true),SDADocContract_12($count=true),FDWMDRDocMasters_21($count=true),SCLBDocCollaboratingOrgs_12($count=true),SDADocMasterDiscipline_12($count=true),SDADocOrganizations_12($count=true),SPFDocumentRevisions_12($count=true),SPFXmtlDocument_21($count=true),EDG_SPFViewableFiles($count=true),SPFFileComposition_21($count=true)</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/Objects</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">prefer</stringProp>
                          <stringProp name="Header.value">odata.include-annotations=&quot;*&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfresolvedocumentstoversion</stringProp>
                          <stringProp name="Header.value">false</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..OBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">
String DynamicOBID;
DynamicOBID = vars.get(&quot;DynamicOBID_ALL&quot;);
DynamicOBID = &quot;\&quot;&quot;+ DynamicOBID.replaceAll(&quot;,&quot;,&quot;\&quot;,\&quot;&quot;) + &quot;\&quot;&quot;;
vars.put(&quot;DynamicOBIDs&quot;, DynamicOBID);</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetDynIconName()" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ObjectObids&quot;: [${DynamicOBIDs}]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetDynIconName()</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">182</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..OBID||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetInterfacesForObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ObjectOBID&quot;:&quot;${TC016_ClickonDisciplineRelDoc6IQY000A}&quot;}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetInterfacesForObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">25</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/Objects(&apos;${TC016_ClickonDisciplineRelDoc&apos;6IQY000A&apos;}&apos;)/SPFFileComposition_21" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/Objects(&apos;${TC016_ClickonDisciplineRelDoc&apos;6IQY000A&apos;}&apos;)/SPFFileComposition_21</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Notifications" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$select" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$select</stringProp>
                          <stringProp name="Argument.value">OBID,Name,Description,CreationDate,SPFContextObjectOBID</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$top</stringProp>
                          <stringProp name="Argument.value">25</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$skip" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$skip</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$count</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$orderby" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$orderby</stringProp>
                          <stringProp name="Argument.value">CreationDate+desc</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Notifications</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json,application/vnd.intergraph.data+json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetNavigationOptions" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;StartingObjectOBID&quot;:&quot;6FJO00KA&quot;,&quot;RelLookAhead&quot;:true,&quot;EdgeLookAhead&quot;:true,&quot;IsInfoMap&quot;:true}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetNavigationOptions</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">91</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC016_ClickonDisciplineRelDoc6FJO00KA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Document(s)&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC016_ClickonDisciplineRelDoc6FJO00KA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC016_ClickonDisciplineRelDoc6FJO00KA} ${TC016_ClickonDisciplineRelDoc6FJO00KA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC016_ClickonDisciplineRelDoc6FJO00KA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/Objects" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$filter</stringProp>
                          <stringProp name="Argument.value">OBID%20eq%20%27${TC016_ClickonDisciplineRelDoc6FJO00KA}%27</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$expand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$expand</stringProp>
                          <stringProp name="Argument.value">SDADisciplineGroupDisciplines_21($count=true)</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/Objects</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">prefer</stringProp>
                          <stringProp name="Header.value">odata.include-annotations=&quot;*&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfresolvedocumentstoversion</stringProp>
                          <stringProp name="Header.value">false</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..OBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">
String DynamicOBID;
DynamicOBID = vars.get(&quot;DynamicOBID_ALL&quot;);
DynamicOBID = &quot;\&quot;&quot;+ DynamicOBID.replaceAll(&quot;,&quot;,&quot;\&quot;,\&quot;&quot;) + &quot;\&quot;&quot;;
vars.put(&quot;DynamicOBIDs&quot;, DynamicOBID);</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetDynIconName()" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ObjectObids&quot;: [${DynamicOBIDs}]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetDynIconName()</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">48</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..OBID||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetInterfacesForObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ObjectOBID&quot;:&quot;6FJO00KA&quot;}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetInterfacesForObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">25</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/Objects(&apos;${TC016_ClickonDisciplineRelDoc6FJO00KA}&apos;)/SPFFileComposition_21" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/Objects(&apos;${TC016_ClickonDisciplineRelDoc6FJO00KA}&apos;)/SPFFileComposition_21</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryselectedconfigonly</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="AfterJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    SELECT
               DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255),DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  AS [SQL_Execution],
                   SUM(total_logical_reads)  AS [BufferGets],
                                 SUM(total_physical_reads)  AS [Physical Reads],
                 SUM(total_worker_time) AS [CPU Time Ms],
       SUM(total_elapsed_time)  AS [Elapsed Time]
      FROM sys.dm_exec_query_stats AS qs
    CROSS APPLY (
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  FROM sys.dm_exec_plan_attributes(qs.plan_handle)
                 WHERE attribute = N&apos;dbid&apos;) AS F_DB
               
    GROUP BY DatabaseID

)
SELECT 
       
                  [DatabaseID],[SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
                  [Elapsed Time] 
                  FROM DB_CPU_Stats
where DatabaseName= &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable">SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;

String TransName=&quot;ClickonDisciplineRelDoc&quot;;
String SQLStartTime = JMeterUtils.getProperty(&quot;SQLStartTime-JP&quot;);
String SQLEndTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());

log.info(&quot;aSQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
//int DatabaseID = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;);
//log.info(&quot;DatabaseID = &gt; &quot;+DatabaseID);
//log.info(&quot;SQLStartTime = &gt; &quot;+SQLStartTime);
//log.info(&quot;SQLEndTime = &gt; &quot;+SQLEndTime);
Long aSQL_Execution = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;SQL_Execution&quot;);
//log.info(&quot;aSQL_Execution = &gt; &quot;+aSQL_Execution);

Long aBufferGets = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;BufferGets&quot;);
//log.info(&quot;aBufferGets = &gt; &quot;+aBufferGets);
Long aPhysicalReads = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Physical Reads&quot;);
//log.info(&quot;aPhysicalReads = &gt; &quot;+aPhysicalReads);
Long aCPUTimeMs = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;CPU Time Ms&quot;);
//log.info(&quot;aCPUTimeMs = &gt; &quot;+aCPUTimeMs);
Long aElapsedTime = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Elapsed Time&quot;);
//log.info(&quot;aElapsedTime = &gt; &quot;+aElapsedTime);

String BSQlStats = JMeterUtils.getProperty(&quot;SQlStats-JP&quot;);
//log.info(&quot;BSQlStats = &gt; &quot;+BSQlStats);

Long bSQL_Execution = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;SQL_Execution=&quot;)+14, BSQlStats.indexOf(&quot;, BufferGets=&quot;)));
//log.info(&quot;bSQL_Execution = &gt; &quot;+bSQL_Execution);

//Long.parseLong
Long bBufferGets = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11, BSQlStats.indexOf(&quot;}&quot;)));
//int bBufferGets = Integer.parseInt(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11,BSQlStats.indexOf(&quot;}&quot;)));
//log.info(&quot;bBufferGets = &gt; &quot;+bBufferGets);

Long bPhysicalReads = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Physical Reads=&quot;)+15, BSQlStats.indexOf(&quot;, DatabaseID&quot;)));
//log.info(&quot;bPhysicalReads = &gt; &quot;+bPhysicalReads);

Long bCPUTimeMs = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;CPU Time Ms=&quot;)+12, BSQlStats.indexOf(&quot;, Elapsed Time&quot;)));
//log.info(&quot;bCPUTimeMs = &gt; &quot;+bCPUTimeMs);

Long bElapsedTime = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Elapsed Time=&quot;)+13, BSQlStats.indexOf(&quot;, SQL_Execution&quot;)));
//log.info(&quot;bElapsedTime = &gt; &quot;+bElapsedTime);

//log.info(&quot;SQL_Execution = &gt; &quot;+(aSQL_Execution-bSQL_Execution));
//log.info(&quot;BufferGets = &gt; &quot;+(aBufferGets-bBufferGets));
//log.info(&quot;PhysicalReads = &gt; &quot;+(aPhysicalReads-bPhysicalReads));
//log.info(&quot;CPUTimeMs = &gt; &quot;+(aCPUTimeMs-bCPUTimeMs));
//log.info(&quot;ElapsedTime = &gt; &quot;+(aElapsedTime-bElapsedTime));
log.info(&quot;===================================================&quot;);
String Perfcsv = TransName +&quot;,&quot;+String.valueOf(vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;))+&quot;,&quot;+SQLStartTime+&quot;,&quot;+SQLEndTime+&quot;,&quot;+String.valueOf(aSQL_Execution-bSQL_Execution)+&quot;,&quot;+String.valueOf(aBufferGets-bBufferGets)+&quot;,&quot;+String.valueOf(aPhysicalReads-bPhysicalReads)+&quot;,&quot;+String.valueOf(aCPUTimeMs-bCPUTimeMs)+&quot;,&quot;+String.valueOf(aElapsedTime-bElapsedTime);

log.info(&quot;Perfcsv = &gt;&quot;+Perfcsv);
log.info(&quot;===================================================&quot;);
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLEndTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

String PerfCSVFile = vars.get(&quot;OutputPath&quot;) + vars.get(&quot;OutputFolderName&quot;) +&quot;perf.csv&quot;;
FileWriter fstream = new FileWriter(PerfCSVFile,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(Perfcsv);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="18" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">false</boolProp>
              </TransactionController>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="BeforeJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    Select 
     DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255), DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  As [SQL_Execution],
                   SUM(total_logical_reads)  As [BufferGets],
                                 SUM(total_physical_reads)  As [Physical Reads],
                 SUM(total_worker_time) As [CPU Time Ms],
       SUM(total_elapsed_time)  As [Elapsed Time]
      From sys.dm_exec_query_stats AS qs
    CROSS APPLY(
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  From sys.dm_exec_plan_attributes(qs.plan_handle)
                  Where Attribute = N&apos;dbid&apos;) As F_DB
               
    Group BY DatabaseID
)
Select 

       [DatabaseID], [SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
       [Elapsed Time] 
                  From DB_CPU_Stats
Where DatabaseName = &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable"> SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;
String SQLStartTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());
//log.info(&quot;SQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLStartTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

log.info(&quot;Before SQlStats = &gt; &quot;+JMeterUtils.getProperty(&quot;SQlStats-JP&quot;));</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_SearchDocswithCharAB" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">false</boolProp>
                </TransactionController>
                <hashTree>
                  <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="SearchFDWDocuments17" elementType="Argument">
                        <stringProp name="Argument.name">SearchFDWDocuments17</stringProp>
                        <stringProp name="Argument.value">*AB*</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </Arguments>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDADocCategories&apos;)" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$expand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$expand</stringProp>
                          <stringProp name="Argument.value">Items,Descendants</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDADocCategories&apos;)</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDADocTypes&apos;)" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$expand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$expand</stringProp>
                          <stringProp name="Argument.value">Items,Descendants</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDADocTypes&apos;)</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1RevisionStates&apos;)" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$expand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$expand</stringProp>
                          <stringProp name="Argument.value">Items,Descendants</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1RevisionStates&apos;)</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDAWorkflowPriorities&apos;)" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$expand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$expand</stringProp>
                          <stringProp name="Argument.value">Items,Descendants</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDAWorkflowPriorities&apos;)</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDAReturnCodes&apos;)" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$expand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$expand</stringProp>
                          <stringProp name="Argument.value">Items,Descendants</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDAReturnCodes&apos;)</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/FDWDocuments" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="%24format" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24format</stringProp>
                          <stringProp name="Argument.value">json</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24top</stringProp>
                          <stringProp name="Argument.value">25</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24filter</stringProp>
                          <stringProp name="Argument.value">contains(Name%2C%27${SearchFDWDocuments17}%27)</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24count</stringProp>
                          <stringProp name="Argument.value">false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="_" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">_</stringProp>
                          <stringProp name="Argument.value">1657002405593</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/FDWDocuments</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">x-requested-with</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">
String DynamicOBID;
DynamicOBID = vars.get(&quot;DynamicOBID_ALL&quot;);
DynamicOBID = &quot;\&quot;&quot;+ DynamicOBID.replaceAll(&quot;,&quot;,&quot;\&quot;,\&quot;&quot;) + &quot;\&quot;&quot;;
vars.put(&quot;DynamicOBIDs&quot;, DynamicOBID);</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQZ09XA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep119&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQZ09XA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC017_SearchDocswithCharAB6IQZ09XA} ${TC017_SearchDocswithCharAB6IQZ09XA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC017_SearchDocswithCharAB6IQZ09XA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQZ09XA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep119&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQZ09XA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC017_SearchDocswithCharAB6IQZ09XA} ${TC017_SearchDocswithCharAB6IQZ09XA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC017_SearchDocswithCharAB6IQZ09XA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQZ08FA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep101&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQZ08FA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC017_SearchDocswithCharAB6IQZ08FA} ${TC017_SearchDocswithCharAB6IQZ08FA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC017_SearchDocswithCharAB6IQZ08FA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQZ08IA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep102&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQZ08IA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC017_SearchDocswithCharAB6IQZ08IA} ${TC017_SearchDocswithCharAB6IQZ08IA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC017_SearchDocswithCharAB6IQZ08IA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQZ08RA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep105&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQZ08RA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC017_SearchDocswithCharAB6IQZ08RA} ${TC017_SearchDocswithCharAB6IQZ08RA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC017_SearchDocswithCharAB6IQZ08RA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQZ08XA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep107&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQZ08XA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC017_SearchDocswithCharAB6IQZ08XA} ${TC017_SearchDocswithCharAB6IQZ08XA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC017_SearchDocswithCharAB6IQZ08XA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQZ09XA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep119&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQZ09XA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC017_SearchDocswithCharAB6IQZ09XA} ${TC017_SearchDocswithCharAB6IQZ09XA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC017_SearchDocswithCharAB6IQZ09XA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC017_SearchDocswithCharAB6IQY000A} ${TC017_SearchDocswithCharAB6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC017_SearchDocswithCharAB6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQZ093A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep109&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQZ093A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC017_SearchDocswithCharAB6IQZ093A} ${TC017_SearchDocswithCharAB6IQZ093A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC017_SearchDocswithCharAB6IQZ093A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQZ090A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep108&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQZ090A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC017_SearchDocswithCharAB6IQZ090A} ${TC017_SearchDocswithCharAB6IQZ090A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC017_SearchDocswithCharAB6IQZ090A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQZ09XA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep119&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQZ09XA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC017_SearchDocswithCharAB6IQZ09XA} ${TC017_SearchDocswithCharAB6IQZ09XA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC017_SearchDocswithCharAB6IQZ09XA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC017_SearchDocswithCharAB6IQY000A} ${TC017_SearchDocswithCharAB6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC017_SearchDocswithCharAB6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC017_SearchDocswithCharAB6IQY000A} ${TC017_SearchDocswithCharAB6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC017_SearchDocswithCharAB6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC017_SearchDocswithCharAB6IQY000A} ${TC017_SearchDocswithCharAB6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC017_SearchDocswithCharAB6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQZ08CA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep100&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQZ08CA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC017_SearchDocswithCharAB6IQZ08CA} ${TC017_SearchDocswithCharAB6IQZ08CA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC017_SearchDocswithCharAB6IQZ08CA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQZ096A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep110&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQZ096A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC017_SearchDocswithCharAB6IQZ096A} ${TC017_SearchDocswithCharAB6IQZ096A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC017_SearchDocswithCharAB6IQZ096A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
                    <stringProp name="delimiter">,</stringProp>
                    <stringProp name="fileEncoding"></stringProp>
                    <stringProp name="filename">${InputPath}SearchFDWDocuments17.csv</stringProp>
                    <boolProp name="ignoreFirstLine">false</boolProp>
                    <boolProp name="quotedData">false</boolProp>
                    <boolProp name="recycle">true</boolProp>
                    <stringProp name="shareMode">shareMode.all</stringProp>
                    <boolProp name="stopThread">false</boolProp>
                    <stringProp name="variableNames">SearchFDWDocuments17</stringProp>
                  </CSVDataSet>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/FDWDocuments" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="%24format" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24format</stringProp>
                          <stringProp name="Argument.value">json</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24top</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24filter</stringProp>
                          <stringProp name="Argument.value">contains(Name%2C%27${SearchFDWDocuments17}%27)</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24count</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="_" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">_</stringProp>
                          <stringProp name="Argument.value">1657002405593</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/FDWDocuments</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
                    <stringProp name="delimiter">,</stringProp>
                    <stringProp name="fileEncoding"></stringProp>
                    <stringProp name="filename">${InputPath}SearchFDWDocuments17.csv</stringProp>
                    <boolProp name="ignoreFirstLine">false</boolProp>
                    <boolProp name="quotedData">false</boolProp>
                    <boolProp name="recycle">true</boolProp>
                    <stringProp name="shareMode">shareMode.all</stringProp>
                    <boolProp name="stopThread">false</boolProp>
                    <stringProp name="variableNames">SearchFDWDocuments17</stringProp>
                  </CSVDataSet>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetDynIconName()" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ObjectObids&quot;: [${DynamicOBIDs}]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetDynIconName()</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">292</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..OBID||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;ListEditContextMenu&quot;],&quot;ObjectObidAndDomains&quot;:[${DynamicOBIDs}]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">338</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Notifications" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$select" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$select</stringProp>
                          <stringProp name="Argument.value">OBID,Name,Description,CreationDate,SPFContextObjectOBID</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$top</stringProp>
                          <stringProp name="Argument.value">25</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$skip" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$skip</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$count</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$orderby" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$orderby</stringProp>
                          <stringProp name="Argument.value">CreationDate+desc</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Notifications</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json,application/vnd.intergraph.data+json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;ListEditContextMenu&quot;],&quot;ObjectObidAndDomains&quot;:[${DynamicOBIDs}]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">338</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;CreateObj&quot;,&quot;ManageFiles&quot;,&quot;ManageSignedFiles&quot;,&quot;CopyObj&quot;,&quot;CreateClassObj&quot;,&quot;CreateClassObjAndRel&quot;,&quot;CreateObjAndRel&quot;,&quot;CreateClassObjAndLoad&quot;,&quot;SDxCreateClassObjAndLoad&quot;,&quot;CreateWizardClassObj&quot;,&quot;CreateSignWizardClassObj&quot;,&quot;CreateObjectFromSelectedObjects&quot;,&quot;CreateSignObjectFromSelectedObjects&quot;,&quot;EditObj&quot;,&quot;EditWizardObj&quot;,&quot;EditSignWizardObj&quot;,&quot;ShowInbox&quot;,&quot;ReplaceFiles&quot;,&quot;CheckInFiles&quot;,&quot;TaskReassignmentConfiguration&quot;,&quot;SDARelationshipBuilder&quot;,&quot;CreateEntryPointFromQFind&quot;,&quot;AdminEntryPoints&quot;,&quot;ShowWorkflow&quot;,&quot;SDxWorkflowTemplateEditor&quot;,&quot;SDxCreateWorkflowTemplate&quot;,&quot;ListEditContextMenu&quot;,&quot;FTRSearch&quot;,&quot;AssignRecipients&quot;,&quot;Revise&quot;,&quot;UploadDocument&quot;,&quot;EditObjWithClassification&quot;,&quot;SDAManageDataTree&quot;,&quot;ShowInboxForObject&quot;,&quot;SDACopyDataBookContent&quot;,&quot;ConfigRoleAssignment&quot;,&quot;DashboardCreatePage&quot;,&quot;DashboardUpdatePage&quot;,&quot;InsertHistRev&quot;,&quot;CopyDistributionMatrix&quot;,&quot;MultiStepReAssign&quot;,&quot;AddRecipient&quot;,&quot;ExpandDocNestedStructure&quot;,&quot;ExpandFileNestedStructure&quot;,&quot;TabOutletManagement&quot;,&quot;CompareWorkflowTemplates&quot;,&quot;MaintainCalendar&quot;,&quot;EditObjModal&quot;,&quot;RegenerateMetadata&quot;,&quot;QueryEntity&quot;,&quot;ShareUrl&quot;,&quot;ShowObj&quot;,&quot;TerminateObj&quot;,&quot;DeleteObj&quot;,&quot;AttachWorkflow&quot;,&quot;CancelDocument&quot;,&quot;UnCancelDocument&quot;,&quot;ExecuteSavedReportFromObject&quot;,&quot;UndoEditFiles&quot;,&quot;EditFiles&quot;,&quot;XmtlCancel&quot;,&quot;XmtlUndoCancel&quot;,&quot;StepRejectAction&quot;,&quot;StepAcceptAction&quot;,&quot;StepClaim&quot;,&quot;SharepointCreateDocument&quot;,&quot;SharepointDownloadFile&quot;,&quot;SharepointViewNative&quot;,&quot;GenerateAlternateRendition&quot;,&quot;OpenXMLWordReport&quot;,&quot;SignOff&quot;,&quot;SignOffWithForm&quot;,&quot;UndoSignOff&quot;,&quot;SPFExchangeData&quot;,&quot;LaunchURLWithDynamicArgs&quot;,&quot;SDARelationshipBuilder&quot;,&quot;LaunchURLFromFeatureSet&quot;,&quot;WebClientExtensibility&quot;,&quot;GenerateMergedRendition&quot;,&quot;ListEditUncontrolledItems&quot;,&quot;WorkflowDetailsReport&quot;,&quot;ShareFile&quot;,&quot;CopyToLocalFile&quot;,&quot;GenerateMergedRenditionForFiles&quot;,&quot;PrintFile&quot;,&quot;UnlockUserAccount&quot;,&quot;StartScheduler&quot;,&quot;StopScheduler&quot;,&quot;SPFCopyConfigAccess&quot;,&quot;Dashboard&quot;,&quot;UpdateReferences&quot;,&quot;UpdateReferredBy&quot;,&quot;RelationshipManagement&quot;,&quot;GenerateThumbnail&quot;,&quot;EditFilesOnline&quot;,&quot;FinishEditOnline&quot;,&quot;FinishEditOnlineSignOff&quot;,&quot;UndoEditOnline&quot;,&quot;ViewOnline&quot;,&quot;GoToOneDrive&quot;,&quot;UpdateWidget&quot;,&quot;ReplaceEditableCopyWithMasterCopy&quot;,&quot;RequestForESign&quot;,&quot;CompleteESign&quot;,&quot;CompareDocuments&quot;,&quot;CreateWebGLSchedulerTask&quot;,&quot;SDACompareFiles&quot;,&quot;Navigate&quot;,&quot;ViewInDocument&quot;,&quot;SmartPlantReview&quot;,&quot;ViewBatchRenditionLog&quot;,&quot;ClearBravaCache&quot;,&quot;ViewInVisualReport&quot;,&quot;SCLBQualityAssuranceReviewDetails&quot;,&quot;SCLBManageQualityAssuranceReviewPlan&quot;,&quot;SCLBQualityAssuranceReview&quot;,&quot;SDAImpactAnalysis&quot;,&quot;ConflictResolution&quot;,&quot;SCLBCommunicationManagementDetails&quot;,&quot;SCLBCommunicationManagement&quot;,&quot;SOPSCommunicationManagementDetails&quot;,&quot;SOPSCommunicationManagement&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;SCLBQualityAssuranceRegister&quot;,&quot;SDAManageMarkupLayersForRendition&quot;,&quot;SOPSManageMarkupLayersForRendition&quot;,&quot;SDAImpactAnalysis&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;ConflictResolution&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;ProjectHandover&quot;,&quot;SDAShowMySDVJobs&quot;,&quot;SDxShowMySDVJobs&quot;,&quot;SDAApproveSDVJob&quot;,&quot;SDAViewSDVJobSummary&quot;,&quot;SDADeleteSDVJob&quot;,&quot;SDASDVDownloadValidationReport&quot;,&quot;LScanViewSite&quot;,&quot;LScanViewScan&quot;,&quot;LScanSynchronizeSiteData&quot;,&quot;LScanViewTagInScan&quot;,&quot;ViewConsolidatedDataForObject&quot;,&quot;ViewSharedData&quot;,&quot;CreateWorkAreaDefinition&quot;,&quot;EditWorkAreaDefinition&quot;,&quot;RunDanglingRelsReport&quot;,&quot;RegisterAuthoringTool&quot;,&quot;InconsistencyReportWithStartingObject&quot;,&quot;InconsistencyReportByQuery&quot;,&quot;InconsistencyReport&quot;,&quot;RegenerateCommonSchema&quot;,&quot;CancelChangeAction&quot;,&quot;SIOInconsistencyReportByQuery&quot;,&quot;RelateObjectsToWorkArea&quot;,&quot;ResolveDuplicateDocuments&quot;,&quot;SPFNContentExtraction&quot;,&quot;UnClaimObj&quot;,&quot;ClaimObj&quot;,&quot;MergeConfig&quot;,&quot;MergeObj&quot;,&quot;MergeStructure&quot;,&quot;CancelProject&quot;,&quot;ChangeConfigStatus&quot;,&quot;SyncObjects&quot;,&quot;SPXSAPSync&quot;,&quot;SDxConnSync&quot;,&quot;ExampleClientAPIRoute&quot;,&quot;HistoryViewRoute&quot;,&quot;ExampleClientAPIAction&quot;,&quot;ExampleClientAPIModal&quot;,&quot;HistoryViewModal&quot;,&quot;ExampleClientAPIWidget&quot;],&quot;ObjectObidAndDomains&quot;:[&quot;${TC017_SearchDocswithCharAB6IQZ08FA}&quot;]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">3752</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQZ08FA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC017_SearchDocswithCharAB6IQZ08FA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC017_SearchDocswithCharAB6IQZ08FA} ${TC017_SearchDocswithCharAB6IQZ08FA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC017_SearchDocswithCharAB6IQZ08FA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDADocCategories&apos;)" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$expand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$expand</stringProp>
                          <stringProp name="Argument.value">Items,Descendants</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDADocCategories&apos;)</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDADocTypes&apos;)" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$expand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$expand</stringProp>
                          <stringProp name="Argument.value">Items,Descendants</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDADocTypes&apos;)</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1RevisionStates&apos;)" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$expand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$expand</stringProp>
                          <stringProp name="Argument.value">Items,Descendants</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1RevisionStates&apos;)</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDAWorkflowPriorities&apos;)" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$expand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$expand</stringProp>
                          <stringProp name="Argument.value">Items,Descendants</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDAWorkflowPriorities&apos;)</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDAReturnCodes&apos;)" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$expand" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$expand</stringProp>
                          <stringProp name="Argument.value">Items,Descendants</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/SelectLists(&apos;e1SDAReturnCodes&apos;)</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/FDWDocuments" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="%24format" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24format</stringProp>
                          <stringProp name="Argument.value">json</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24top</stringProp>
                          <stringProp name="Argument.value">25</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24filter</stringProp>
                          <stringProp name="Argument.value">contains(Name%2C%27${SearchFDWDocuments17}%27)</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24count</stringProp>
                          <stringProp name="Argument.value">false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="_" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">_</stringProp>
                          <stringProp name="Argument.value">1657002405594</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/FDWDocuments</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">x-requested-with</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
                    <stringProp name="delimiter">,</stringProp>
                    <stringProp name="fileEncoding"></stringProp>
                    <stringProp name="filename">${InputPath}SearchFDWDocuments17.csv</stringProp>
                    <boolProp name="ignoreFirstLine">false</boolProp>
                    <boolProp name="quotedData">false</boolProp>
                    <boolProp name="recycle">true</boolProp>
                    <stringProp name="shareMode">shareMode.all</stringProp>
                    <boolProp name="stopThread">false</boolProp>
                    <stringProp name="variableNames">SearchFDWDocuments17</stringProp>
                  </CSVDataSet>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/FDWDocuments" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="%24format" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24format</stringProp>
                          <stringProp name="Argument.value">json</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24top</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24filter</stringProp>
                          <stringProp name="Argument.value">contains(Name%2C%27${SearchFDWDocuments17}%27)</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24count</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="_" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">_</stringProp>
                          <stringProp name="Argument.value">1657002405594</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/FDWDocuments</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
                    <stringProp name="delimiter">,</stringProp>
                    <stringProp name="fileEncoding"></stringProp>
                    <stringProp name="filename">${InputPath}SearchFDWDocuments17.csv</stringProp>
                    <boolProp name="ignoreFirstLine">false</boolProp>
                    <boolProp name="quotedData">false</boolProp>
                    <boolProp name="recycle">true</boolProp>
                    <stringProp name="shareMode">shareMode.all</stringProp>
                    <boolProp name="stopThread">false</boolProp>
                    <stringProp name="variableNames">SearchFDWDocuments17</stringProp>
                  </CSVDataSet>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="AfterJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    SELECT
               DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255),DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  AS [SQL_Execution],
                   SUM(total_logical_reads)  AS [BufferGets],
                                 SUM(total_physical_reads)  AS [Physical Reads],
                 SUM(total_worker_time) AS [CPU Time Ms],
       SUM(total_elapsed_time)  AS [Elapsed Time]
      FROM sys.dm_exec_query_stats AS qs
    CROSS APPLY (
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  FROM sys.dm_exec_plan_attributes(qs.plan_handle)
                 WHERE attribute = N&apos;dbid&apos;) AS F_DB
               
    GROUP BY DatabaseID

)
SELECT 
       
                  [DatabaseID],[SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
                  [Elapsed Time] 
                  FROM DB_CPU_Stats
where DatabaseName= &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable">SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;

String TransName=&quot;SearchDocswithCharAB&quot;;
String SQLStartTime = JMeterUtils.getProperty(&quot;SQLStartTime-JP&quot;);
String SQLEndTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());

log.info(&quot;aSQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
//int DatabaseID = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;);
//log.info(&quot;DatabaseID = &gt; &quot;+DatabaseID);
//log.info(&quot;SQLStartTime = &gt; &quot;+SQLStartTime);
//log.info(&quot;SQLEndTime = &gt; &quot;+SQLEndTime);
Long aSQL_Execution = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;SQL_Execution&quot;);
//log.info(&quot;aSQL_Execution = &gt; &quot;+aSQL_Execution);

Long aBufferGets = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;BufferGets&quot;);
//log.info(&quot;aBufferGets = &gt; &quot;+aBufferGets);
Long aPhysicalReads = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Physical Reads&quot;);
//log.info(&quot;aPhysicalReads = &gt; &quot;+aPhysicalReads);
Long aCPUTimeMs = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;CPU Time Ms&quot;);
//log.info(&quot;aCPUTimeMs = &gt; &quot;+aCPUTimeMs);
Long aElapsedTime = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Elapsed Time&quot;);
//log.info(&quot;aElapsedTime = &gt; &quot;+aElapsedTime);

String BSQlStats = JMeterUtils.getProperty(&quot;SQlStats-JP&quot;);
//log.info(&quot;BSQlStats = &gt; &quot;+BSQlStats);

Long bSQL_Execution = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;SQL_Execution=&quot;)+14, BSQlStats.indexOf(&quot;, BufferGets=&quot;)));
//log.info(&quot;bSQL_Execution = &gt; &quot;+bSQL_Execution);

//Long.parseLong
Long bBufferGets = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11, BSQlStats.indexOf(&quot;}&quot;)));
//int bBufferGets = Integer.parseInt(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11,BSQlStats.indexOf(&quot;}&quot;)));
//log.info(&quot;bBufferGets = &gt; &quot;+bBufferGets);

Long bPhysicalReads = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Physical Reads=&quot;)+15, BSQlStats.indexOf(&quot;, DatabaseID&quot;)));
//log.info(&quot;bPhysicalReads = &gt; &quot;+bPhysicalReads);

Long bCPUTimeMs = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;CPU Time Ms=&quot;)+12, BSQlStats.indexOf(&quot;, Elapsed Time&quot;)));
//log.info(&quot;bCPUTimeMs = &gt; &quot;+bCPUTimeMs);

Long bElapsedTime = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Elapsed Time=&quot;)+13, BSQlStats.indexOf(&quot;, SQL_Execution&quot;)));
//log.info(&quot;bElapsedTime = &gt; &quot;+bElapsedTime);

//log.info(&quot;SQL_Execution = &gt; &quot;+(aSQL_Execution-bSQL_Execution));
//log.info(&quot;BufferGets = &gt; &quot;+(aBufferGets-bBufferGets));
//log.info(&quot;PhysicalReads = &gt; &quot;+(aPhysicalReads-bPhysicalReads));
//log.info(&quot;CPUTimeMs = &gt; &quot;+(aCPUTimeMs-bCPUTimeMs));
//log.info(&quot;ElapsedTime = &gt; &quot;+(aElapsedTime-bElapsedTime));
log.info(&quot;===================================================&quot;);
String Perfcsv = TransName +&quot;,&quot;+String.valueOf(vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;))+&quot;,&quot;+SQLStartTime+&quot;,&quot;+SQLEndTime+&quot;,&quot;+String.valueOf(aSQL_Execution-bSQL_Execution)+&quot;,&quot;+String.valueOf(aBufferGets-bBufferGets)+&quot;,&quot;+String.valueOf(aPhysicalReads-bPhysicalReads)+&quot;,&quot;+String.valueOf(aCPUTimeMs-bCPUTimeMs)+&quot;,&quot;+String.valueOf(aElapsedTime-bElapsedTime);

log.info(&quot;Perfcsv = &gt;&quot;+Perfcsv);
log.info(&quot;===================================================&quot;);
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLEndTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

String PerfCSVFile = vars.get(&quot;OutputPath&quot;) + vars.get(&quot;OutputFolderName&quot;) +&quot;perf.csv&quot;;
FileWriter fstream = new FileWriter(PerfCSVFile,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(Perfcsv);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="19" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">false</boolProp>
              </TransactionController>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="BeforeJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    Select 
     DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255), DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  As [SQL_Execution],
                   SUM(total_logical_reads)  As [BufferGets],
                                 SUM(total_physical_reads)  As [Physical Reads],
                 SUM(total_worker_time) As [CPU Time Ms],
       SUM(total_elapsed_time)  As [Elapsed Time]
      From sys.dm_exec_query_stats AS qs
    CROSS APPLY(
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  From sys.dm_exec_plan_attributes(qs.plan_handle)
                  Where Attribute = N&apos;dbid&apos;) As F_DB
               
    Group BY DatabaseID
)
Select 

       [DatabaseID], [SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
       [Elapsed Time] 
                  From DB_CPU_Stats
Where DatabaseName = &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable"> SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;
String SQLStartTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());
//log.info(&quot;SQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLStartTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

log.info(&quot;Before SQlStats = &gt; &quot;+JMeterUtils.getProperty(&quot;SQlStats-JP&quot;));</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_NavToNxtPageDocs" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">false</boolProp>
                </TransactionController>
                <hashTree>
                  <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="SearchFDWDocuments18" elementType="Argument">
                        <stringProp name="Argument.name">SearchFDWDocuments18</stringProp>
                        <stringProp name="Argument.value">*AB*</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </Arguments>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/FDWDocuments" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="%24format" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24format</stringProp>
                          <stringProp name="Argument.value">json</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24top</stringProp>
                          <stringProp name="Argument.value">25</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24skip" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24skip</stringProp>
                          <stringProp name="Argument.value">25</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24filter</stringProp>
                          <stringProp name="Argument.value">contains(Name%2C%27${SearchFDWDocuments18}%27)</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24count</stringProp>
                          <stringProp name="Argument.value">false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="_" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">_</stringProp>
                          <stringProp name="Argument.value">1657002405600</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/FDWDocuments</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">x-requested-with</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">
String DynamicOBID;
DynamicOBID = vars.get(&quot;DynamicOBID_ALL&quot;);
DynamicOBID = &quot;\&quot;&quot;+ DynamicOBID.replaceAll(&quot;,&quot;,&quot;\&quot;,\&quot;&quot;) + &quot;\&quot;&quot;;
vars.put(&quot;DynamicOBIDs&quot;, DynamicOBID);</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC018_NavToNxtPageDocs6IQZ0BRA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep141&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC018_NavToNxtPageDocs6IQZ0BRA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC018_NavToNxtPageDocs6IQZ0BRA} ${TC018_NavToNxtPageDocs6IQZ0BRA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC018_NavToNxtPageDocs6IQZ0BRA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC018_NavToNxtPageDocs6IQZ0BRA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep141&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC018_NavToNxtPageDocs6IQZ0BRA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC018_NavToNxtPageDocs6IQZ0BRA} ${TC018_NavToNxtPageDocs6IQZ0BRA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC018_NavToNxtPageDocs6IQZ0BRA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC018_NavToNxtPageDocs6IQZ0AXA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep131&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC018_NavToNxtPageDocs6IQZ0AXA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC018_NavToNxtPageDocs6IQZ0AXA} ${TC018_NavToNxtPageDocs6IQZ0AXA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC018_NavToNxtPageDocs6IQZ0AXA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC018_NavToNxtPageDocs6IQZ0A3A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep121&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC018_NavToNxtPageDocs6IQZ0A3A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC018_NavToNxtPageDocs6IQZ0A3A} ${TC018_NavToNxtPageDocs6IQZ0A3A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC018_NavToNxtPageDocs6IQZ0A3A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC018_NavToNxtPageDocs6IQZ0A0A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep120&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC018_NavToNxtPageDocs6IQZ0A0A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC018_NavToNxtPageDocs6IQZ0A0A} ${TC018_NavToNxtPageDocs6IQZ0A0A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC018_NavToNxtPageDocs6IQZ0A0A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC018_NavToNxtPageDocs6IQZ010A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep12&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC018_NavToNxtPageDocs6IQZ010A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC018_NavToNxtPageDocs6IQZ010A} ${TC018_NavToNxtPageDocs6IQZ010A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC018_NavToNxtPageDocs6IQZ010A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC018_NavToNxtPageDocs6IQZ0B0A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep132&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC018_NavToNxtPageDocs6IQZ0B0A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC018_NavToNxtPageDocs6IQZ0B0A} ${TC018_NavToNxtPageDocs6IQZ0B0A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC018_NavToNxtPageDocs6IQZ0B0A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
                    <stringProp name="delimiter">,</stringProp>
                    <stringProp name="fileEncoding"></stringProp>
                    <stringProp name="filename">${InputPath}SearchFDWDocuments18.csv</stringProp>
                    <boolProp name="ignoreFirstLine">false</boolProp>
                    <boolProp name="quotedData">false</boolProp>
                    <boolProp name="recycle">true</boolProp>
                    <stringProp name="shareMode">shareMode.all</stringProp>
                    <boolProp name="stopThread">false</boolProp>
                    <stringProp name="variableNames">SearchFDWDocuments18</stringProp>
                  </CSVDataSet>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetDynIconName()" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ObjectObids&quot;: [${DynamicOBIDs}]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetDynIconName()</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">292</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..OBID||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;ListEditContextMenu&quot;],&quot;ObjectObidAndDomains&quot;:[${DynamicOBIDs}]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">338</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;CreateObj&quot;,&quot;ManageFiles&quot;,&quot;ManageSignedFiles&quot;,&quot;CopyObj&quot;,&quot;CreateClassObj&quot;,&quot;CreateClassObjAndRel&quot;,&quot;CreateObjAndRel&quot;,&quot;CreateClassObjAndLoad&quot;,&quot;SDxCreateClassObjAndLoad&quot;,&quot;CreateWizardClassObj&quot;,&quot;CreateSignWizardClassObj&quot;,&quot;CreateObjectFromSelectedObjects&quot;,&quot;CreateSignObjectFromSelectedObjects&quot;,&quot;EditObj&quot;,&quot;EditWizardObj&quot;,&quot;EditSignWizardObj&quot;,&quot;ShowInbox&quot;,&quot;ReplaceFiles&quot;,&quot;CheckInFiles&quot;,&quot;TaskReassignmentConfiguration&quot;,&quot;SDARelationshipBuilder&quot;,&quot;CreateEntryPointFromQFind&quot;,&quot;AdminEntryPoints&quot;,&quot;ShowWorkflow&quot;,&quot;SDxWorkflowTemplateEditor&quot;,&quot;SDxCreateWorkflowTemplate&quot;,&quot;ListEditContextMenu&quot;,&quot;FTRSearch&quot;,&quot;AssignRecipients&quot;,&quot;Revise&quot;,&quot;UploadDocument&quot;,&quot;EditObjWithClassification&quot;,&quot;SDAManageDataTree&quot;,&quot;ShowInboxForObject&quot;,&quot;SDACopyDataBookContent&quot;,&quot;ConfigRoleAssignment&quot;,&quot;DashboardCreatePage&quot;,&quot;DashboardUpdatePage&quot;,&quot;InsertHistRev&quot;,&quot;CopyDistributionMatrix&quot;,&quot;MultiStepReAssign&quot;,&quot;AddRecipient&quot;,&quot;ExpandDocNestedStructure&quot;,&quot;ExpandFileNestedStructure&quot;,&quot;TabOutletManagement&quot;,&quot;CompareWorkflowTemplates&quot;,&quot;MaintainCalendar&quot;,&quot;EditObjModal&quot;,&quot;RegenerateMetadata&quot;,&quot;QueryEntity&quot;,&quot;ShareUrl&quot;,&quot;ShowObj&quot;,&quot;TerminateObj&quot;,&quot;DeleteObj&quot;,&quot;AttachWorkflow&quot;,&quot;CancelDocument&quot;,&quot;UnCancelDocument&quot;,&quot;ExecuteSavedReportFromObject&quot;,&quot;UndoEditFiles&quot;,&quot;EditFiles&quot;,&quot;XmtlCancel&quot;,&quot;XmtlUndoCancel&quot;,&quot;StepRejectAction&quot;,&quot;StepAcceptAction&quot;,&quot;StepClaim&quot;,&quot;SharepointCreateDocument&quot;,&quot;SharepointDownloadFile&quot;,&quot;SharepointViewNative&quot;,&quot;GenerateAlternateRendition&quot;,&quot;OpenXMLWordReport&quot;,&quot;SignOff&quot;,&quot;SignOffWithForm&quot;,&quot;UndoSignOff&quot;,&quot;SPFExchangeData&quot;,&quot;LaunchURLWithDynamicArgs&quot;,&quot;SDARelationshipBuilder&quot;,&quot;LaunchURLFromFeatureSet&quot;,&quot;WebClientExtensibility&quot;,&quot;GenerateMergedRendition&quot;,&quot;ListEditUncontrolledItems&quot;,&quot;WorkflowDetailsReport&quot;,&quot;ShareFile&quot;,&quot;CopyToLocalFile&quot;,&quot;GenerateMergedRenditionForFiles&quot;,&quot;PrintFile&quot;,&quot;UnlockUserAccount&quot;,&quot;StartScheduler&quot;,&quot;StopScheduler&quot;,&quot;SPFCopyConfigAccess&quot;,&quot;Dashboard&quot;,&quot;UpdateReferences&quot;,&quot;UpdateReferredBy&quot;,&quot;RelationshipManagement&quot;,&quot;GenerateThumbnail&quot;,&quot;EditFilesOnline&quot;,&quot;FinishEditOnline&quot;,&quot;FinishEditOnlineSignOff&quot;,&quot;UndoEditOnline&quot;,&quot;ViewOnline&quot;,&quot;GoToOneDrive&quot;,&quot;UpdateWidget&quot;,&quot;ReplaceEditableCopyWithMasterCopy&quot;,&quot;RequestForESign&quot;,&quot;CompleteESign&quot;,&quot;CompareDocuments&quot;,&quot;CreateWebGLSchedulerTask&quot;,&quot;SDACompareFiles&quot;,&quot;Navigate&quot;,&quot;ViewInDocument&quot;,&quot;SmartPlantReview&quot;,&quot;ViewBatchRenditionLog&quot;,&quot;ClearBravaCache&quot;,&quot;ViewInVisualReport&quot;,&quot;SCLBQualityAssuranceReviewDetails&quot;,&quot;SCLBManageQualityAssuranceReviewPlan&quot;,&quot;SCLBQualityAssuranceReview&quot;,&quot;SDAImpactAnalysis&quot;,&quot;ConflictResolution&quot;,&quot;SCLBCommunicationManagementDetails&quot;,&quot;SCLBCommunicationManagement&quot;,&quot;SOPSCommunicationManagementDetails&quot;,&quot;SOPSCommunicationManagement&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;SCLBQualityAssuranceRegister&quot;,&quot;SDAManageMarkupLayersForRendition&quot;,&quot;SOPSManageMarkupLayersForRendition&quot;,&quot;SDAImpactAnalysis&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;ConflictResolution&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;ProjectHandover&quot;,&quot;SDAShowMySDVJobs&quot;,&quot;SDxShowMySDVJobs&quot;,&quot;SDAApproveSDVJob&quot;,&quot;SDAViewSDVJobSummary&quot;,&quot;SDADeleteSDVJob&quot;,&quot;SDASDVDownloadValidationReport&quot;,&quot;LScanViewSite&quot;,&quot;LScanViewScan&quot;,&quot;LScanSynchronizeSiteData&quot;,&quot;LScanViewTagInScan&quot;,&quot;ViewConsolidatedDataForObject&quot;,&quot;ViewSharedData&quot;,&quot;CreateWorkAreaDefinition&quot;,&quot;EditWorkAreaDefinition&quot;,&quot;RunDanglingRelsReport&quot;,&quot;RegisterAuthoringTool&quot;,&quot;InconsistencyReportWithStartingObject&quot;,&quot;InconsistencyReportByQuery&quot;,&quot;InconsistencyReport&quot;,&quot;RegenerateCommonSchema&quot;,&quot;CancelChangeAction&quot;,&quot;SIOInconsistencyReportByQuery&quot;,&quot;RelateObjectsToWorkArea&quot;,&quot;ResolveDuplicateDocuments&quot;,&quot;SPFNContentExtraction&quot;,&quot;UnClaimObj&quot;,&quot;ClaimObj&quot;,&quot;MergeConfig&quot;,&quot;MergeObj&quot;,&quot;MergeStructure&quot;,&quot;CancelProject&quot;,&quot;ChangeConfigStatus&quot;,&quot;SyncObjects&quot;,&quot;SPXSAPSync&quot;,&quot;SDxConnSync&quot;,&quot;ExampleClientAPIRoute&quot;,&quot;HistoryViewRoute&quot;,&quot;ExampleClientAPIAction&quot;,&quot;ExampleClientAPIModal&quot;,&quot;HistoryViewModal&quot;,&quot;ExampleClientAPIWidget&quot;],&quot;ObjectObidAndDomains&quot;:[&quot;${TC018_NavToNxtPageDocs6IQZ0AXA}&quot;]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">3752</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC018_NavToNxtPageDocs6IQZ0AXA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC018_NavToNxtPageDocs6IQZ0AXA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC018_NavToNxtPageDocs6IQZ0AXA} ${TC018_NavToNxtPageDocs6IQZ0AXA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC018_NavToNxtPageDocs6IQZ0AXA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="AfterJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    SELECT
               DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255),DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  AS [SQL_Execution],
                   SUM(total_logical_reads)  AS [BufferGets],
                                 SUM(total_physical_reads)  AS [Physical Reads],
                 SUM(total_worker_time) AS [CPU Time Ms],
       SUM(total_elapsed_time)  AS [Elapsed Time]
      FROM sys.dm_exec_query_stats AS qs
    CROSS APPLY (
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  FROM sys.dm_exec_plan_attributes(qs.plan_handle)
                 WHERE attribute = N&apos;dbid&apos;) AS F_DB
               
    GROUP BY DatabaseID

)
SELECT 
       
                  [DatabaseID],[SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
                  [Elapsed Time] 
                  FROM DB_CPU_Stats
where DatabaseName= &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable">SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;

String TransName=&quot;NavToNxtPageDocs&quot;;
String SQLStartTime = JMeterUtils.getProperty(&quot;SQLStartTime-JP&quot;);
String SQLEndTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());

log.info(&quot;aSQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
//int DatabaseID = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;);
//log.info(&quot;DatabaseID = &gt; &quot;+DatabaseID);
//log.info(&quot;SQLStartTime = &gt; &quot;+SQLStartTime);
//log.info(&quot;SQLEndTime = &gt; &quot;+SQLEndTime);
Long aSQL_Execution = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;SQL_Execution&quot;);
//log.info(&quot;aSQL_Execution = &gt; &quot;+aSQL_Execution);

Long aBufferGets = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;BufferGets&quot;);
//log.info(&quot;aBufferGets = &gt; &quot;+aBufferGets);
Long aPhysicalReads = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Physical Reads&quot;);
//log.info(&quot;aPhysicalReads = &gt; &quot;+aPhysicalReads);
Long aCPUTimeMs = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;CPU Time Ms&quot;);
//log.info(&quot;aCPUTimeMs = &gt; &quot;+aCPUTimeMs);
Long aElapsedTime = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Elapsed Time&quot;);
//log.info(&quot;aElapsedTime = &gt; &quot;+aElapsedTime);

String BSQlStats = JMeterUtils.getProperty(&quot;SQlStats-JP&quot;);
//log.info(&quot;BSQlStats = &gt; &quot;+BSQlStats);

Long bSQL_Execution = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;SQL_Execution=&quot;)+14, BSQlStats.indexOf(&quot;, BufferGets=&quot;)));
//log.info(&quot;bSQL_Execution = &gt; &quot;+bSQL_Execution);

//Long.parseLong
Long bBufferGets = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11, BSQlStats.indexOf(&quot;}&quot;)));
//int bBufferGets = Integer.parseInt(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11,BSQlStats.indexOf(&quot;}&quot;)));
//log.info(&quot;bBufferGets = &gt; &quot;+bBufferGets);

Long bPhysicalReads = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Physical Reads=&quot;)+15, BSQlStats.indexOf(&quot;, DatabaseID&quot;)));
//log.info(&quot;bPhysicalReads = &gt; &quot;+bPhysicalReads);

Long bCPUTimeMs = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;CPU Time Ms=&quot;)+12, BSQlStats.indexOf(&quot;, Elapsed Time&quot;)));
//log.info(&quot;bCPUTimeMs = &gt; &quot;+bCPUTimeMs);

Long bElapsedTime = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Elapsed Time=&quot;)+13, BSQlStats.indexOf(&quot;, SQL_Execution&quot;)));
//log.info(&quot;bElapsedTime = &gt; &quot;+bElapsedTime);

//log.info(&quot;SQL_Execution = &gt; &quot;+(aSQL_Execution-bSQL_Execution));
//log.info(&quot;BufferGets = &gt; &quot;+(aBufferGets-bBufferGets));
//log.info(&quot;PhysicalReads = &gt; &quot;+(aPhysicalReads-bPhysicalReads));
//log.info(&quot;CPUTimeMs = &gt; &quot;+(aCPUTimeMs-bCPUTimeMs));
//log.info(&quot;ElapsedTime = &gt; &quot;+(aElapsedTime-bElapsedTime));
log.info(&quot;===================================================&quot;);
String Perfcsv = TransName +&quot;,&quot;+String.valueOf(vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;))+&quot;,&quot;+SQLStartTime+&quot;,&quot;+SQLEndTime+&quot;,&quot;+String.valueOf(aSQL_Execution-bSQL_Execution)+&quot;,&quot;+String.valueOf(aBufferGets-bBufferGets)+&quot;,&quot;+String.valueOf(aPhysicalReads-bPhysicalReads)+&quot;,&quot;+String.valueOf(aCPUTimeMs-bCPUTimeMs)+&quot;,&quot;+String.valueOf(aElapsedTime-bElapsedTime);

log.info(&quot;Perfcsv = &gt;&quot;+Perfcsv);
log.info(&quot;===================================================&quot;);
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLEndTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

String PerfCSVFile = vars.get(&quot;OutputPath&quot;) + vars.get(&quot;OutputFolderName&quot;) +&quot;perf.csv&quot;;
FileWriter fstream = new FileWriter(PerfCSVFile,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(Perfcsv);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="20" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">false</boolProp>
              </TransactionController>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="BeforeJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    Select 
     DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255), DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  As [SQL_Execution],
                   SUM(total_logical_reads)  As [BufferGets],
                                 SUM(total_physical_reads)  As [Physical Reads],
                 SUM(total_worker_time) As [CPU Time Ms],
       SUM(total_elapsed_time)  As [Elapsed Time]
      From sys.dm_exec_query_stats AS qs
    CROSS APPLY(
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  From sys.dm_exec_plan_attributes(qs.plan_handle)
                  Where Attribute = N&apos;dbid&apos;) As F_DB
               
    Group BY DatabaseID
)
Select 

       [DatabaseID], [SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
       [Elapsed Time] 
                  From DB_CPU_Stats
Where DatabaseName = &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable"> SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;
String SQLStartTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());
//log.info(&quot;SQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLStartTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

log.info(&quot;Before SQlStats = &gt; &quot;+JMeterUtils.getProperty(&quot;SQlStats-JP&quot;));</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_SearchDocsWORGFileterAB" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">false</boolProp>
                </TransactionController>
                <hashTree>
                  <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="SearchFDWDocuments19" elementType="Argument">
                        <stringProp name="Argument.name">SearchFDWDocuments19</stringProp>
                        <stringProp name="Argument.value">*AB*%27)%20and%20(Originating_Organization%20eq%20%27AB</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </Arguments>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;CreateObj&quot;,&quot;ManageFiles&quot;,&quot;ManageSignedFiles&quot;,&quot;CopyObj&quot;,&quot;CreateClassObj&quot;,&quot;CreateClassObjAndRel&quot;,&quot;CreateObjAndRel&quot;,&quot;CreateClassObjAndLoad&quot;,&quot;SDxCreateClassObjAndLoad&quot;,&quot;CreateWizardClassObj&quot;,&quot;CreateSignWizardClassObj&quot;,&quot;CreateObjectFromSelectedObjects&quot;,&quot;CreateSignObjectFromSelectedObjects&quot;,&quot;EditObj&quot;,&quot;EditWizardObj&quot;,&quot;EditSignWizardObj&quot;,&quot;ShowInbox&quot;,&quot;ReplaceFiles&quot;,&quot;CheckInFiles&quot;,&quot;TaskReassignmentConfiguration&quot;,&quot;SDARelationshipBuilder&quot;,&quot;CreateEntryPointFromQFind&quot;,&quot;AdminEntryPoints&quot;,&quot;ShowWorkflow&quot;,&quot;SDxWorkflowTemplateEditor&quot;,&quot;SDxCreateWorkflowTemplate&quot;,&quot;ListEditContextMenu&quot;,&quot;FTRSearch&quot;,&quot;AssignRecipients&quot;,&quot;Revise&quot;,&quot;UploadDocument&quot;,&quot;EditObjWithClassification&quot;,&quot;SDAManageDataTree&quot;,&quot;ShowInboxForObject&quot;,&quot;SDACopyDataBookContent&quot;,&quot;ConfigRoleAssignment&quot;,&quot;DashboardCreatePage&quot;,&quot;DashboardUpdatePage&quot;,&quot;InsertHistRev&quot;,&quot;CopyDistributionMatrix&quot;,&quot;MultiStepReAssign&quot;,&quot;AddRecipient&quot;,&quot;ExpandDocNestedStructure&quot;,&quot;ExpandFileNestedStructure&quot;,&quot;TabOutletManagement&quot;,&quot;CompareWorkflowTemplates&quot;,&quot;MaintainCalendar&quot;,&quot;EditObjModal&quot;,&quot;RegenerateMetadata&quot;,&quot;QueryEntity&quot;,&quot;ShareUrl&quot;,&quot;ShowObj&quot;,&quot;TerminateObj&quot;,&quot;DeleteObj&quot;,&quot;AttachWorkflow&quot;,&quot;CancelDocument&quot;,&quot;UnCancelDocument&quot;,&quot;ExecuteSavedReportFromObject&quot;,&quot;UndoEditFiles&quot;,&quot;EditFiles&quot;,&quot;XmtlCancel&quot;,&quot;XmtlUndoCancel&quot;,&quot;StepRejectAction&quot;,&quot;StepAcceptAction&quot;,&quot;StepClaim&quot;,&quot;SharepointCreateDocument&quot;,&quot;SharepointDownloadFile&quot;,&quot;SharepointViewNative&quot;,&quot;GenerateAlternateRendition&quot;,&quot;OpenXMLWordReport&quot;,&quot;SignOff&quot;,&quot;SignOffWithForm&quot;,&quot;UndoSignOff&quot;,&quot;SPFExchangeData&quot;,&quot;LaunchURLWithDynamicArgs&quot;,&quot;SDARelationshipBuilder&quot;,&quot;LaunchURLFromFeatureSet&quot;,&quot;WebClientExtensibility&quot;,&quot;GenerateMergedRendition&quot;,&quot;ListEditUncontrolledItems&quot;,&quot;WorkflowDetailsReport&quot;,&quot;ShareFile&quot;,&quot;CopyToLocalFile&quot;,&quot;GenerateMergedRenditionForFiles&quot;,&quot;PrintFile&quot;,&quot;UnlockUserAccount&quot;,&quot;StartScheduler&quot;,&quot;StopScheduler&quot;,&quot;SPFCopyConfigAccess&quot;,&quot;Dashboard&quot;,&quot;UpdateReferences&quot;,&quot;UpdateReferredBy&quot;,&quot;RelationshipManagement&quot;,&quot;GenerateThumbnail&quot;,&quot;EditFilesOnline&quot;,&quot;FinishEditOnline&quot;,&quot;FinishEditOnlineSignOff&quot;,&quot;UndoEditOnline&quot;,&quot;ViewOnline&quot;,&quot;GoToOneDrive&quot;,&quot;UpdateWidget&quot;,&quot;ReplaceEditableCopyWithMasterCopy&quot;,&quot;RequestForESign&quot;,&quot;CompleteESign&quot;,&quot;CompareDocuments&quot;,&quot;CreateWebGLSchedulerTask&quot;,&quot;SDACompareFiles&quot;,&quot;Navigate&quot;,&quot;ViewInDocument&quot;,&quot;SmartPlantReview&quot;,&quot;ViewBatchRenditionLog&quot;,&quot;ClearBravaCache&quot;,&quot;ViewInVisualReport&quot;,&quot;SCLBQualityAssuranceReviewDetails&quot;,&quot;SCLBManageQualityAssuranceReviewPlan&quot;,&quot;SCLBQualityAssuranceReview&quot;,&quot;SDAImpactAnalysis&quot;,&quot;ConflictResolution&quot;,&quot;SCLBCommunicationManagementDetails&quot;,&quot;SCLBCommunicationManagement&quot;,&quot;SOPSCommunicationManagementDetails&quot;,&quot;SOPSCommunicationManagement&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;SCLBQualityAssuranceRegister&quot;,&quot;SDAManageMarkupLayersForRendition&quot;,&quot;SOPSManageMarkupLayersForRendition&quot;,&quot;SDAImpactAnalysis&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;ConflictResolution&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;ProjectHandover&quot;,&quot;SDAShowMySDVJobs&quot;,&quot;SDxShowMySDVJobs&quot;,&quot;SDAApproveSDVJob&quot;,&quot;SDAViewSDVJobSummary&quot;,&quot;SDADeleteSDVJob&quot;,&quot;SDASDVDownloadValidationReport&quot;,&quot;LScanViewSite&quot;,&quot;LScanViewScan&quot;,&quot;LScanSynchronizeSiteData&quot;,&quot;LScanViewTagInScan&quot;,&quot;ViewConsolidatedDataForObject&quot;,&quot;ViewSharedData&quot;,&quot;CreateWorkAreaDefinition&quot;,&quot;EditWorkAreaDefinition&quot;,&quot;RunDanglingRelsReport&quot;,&quot;RegisterAuthoringTool&quot;,&quot;InconsistencyReportWithStartingObject&quot;,&quot;InconsistencyReportByQuery&quot;,&quot;InconsistencyReport&quot;,&quot;RegenerateCommonSchema&quot;,&quot;CancelChangeAction&quot;,&quot;SIOInconsistencyReportByQuery&quot;,&quot;RelateObjectsToWorkArea&quot;,&quot;ResolveDuplicateDocuments&quot;,&quot;SPFNContentExtraction&quot;,&quot;UnClaimObj&quot;,&quot;ClaimObj&quot;,&quot;MergeConfig&quot;,&quot;MergeObj&quot;,&quot;MergeStructure&quot;,&quot;CancelProject&quot;,&quot;ChangeConfigStatus&quot;,&quot;SyncObjects&quot;,&quot;SPXSAPSync&quot;,&quot;SDxConnSync&quot;,&quot;ExampleClientAPIRoute&quot;,&quot;HistoryViewRoute&quot;,&quot;ExampleClientAPIAction&quot;,&quot;ExampleClientAPIModal&quot;,&quot;HistoryViewModal&quot;,&quot;ExampleClientAPIWidget&quot;],&quot;ObjectObidAndDomains&quot;:[&quot;${TC018_NavToNxtPageDocs6IQZ0A3A}&quot;]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">3752</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC019_SearchDocsWORGFileterAB6IQZ0A3A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC019_SearchDocsWORGFileterAB6IQZ0A3A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC019_SearchDocsWORGFileterAB6IQZ0A3A} ${TC019_SearchDocsWORGFileterAB6IQZ0A3A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC019_SearchDocsWORGFileterAB6IQZ0A3A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/FDWDocuments" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="%24format" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24format</stringProp>
                          <stringProp name="Argument.value">json</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24top</stringProp>
                          <stringProp name="Argument.value">25</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24filter</stringProp>
                          <stringProp name="Argument.value">(contains(Name%2C%27${SearchFDWDocuments19}%27))</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24count</stringProp>
                          <stringProp name="Argument.value">false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="_" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">_</stringProp>
                          <stringProp name="Argument.value">1657002405601</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/FDWDocuments</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">x-requested-with</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">
String DynamicOBID;
DynamicOBID = vars.get(&quot;DynamicOBID_ALL&quot;);
DynamicOBID = &quot;\&quot;&quot;+ DynamicOBID.replaceAll(&quot;,&quot;,&quot;\&quot;,\&quot;&quot;) + &quot;\&quot;&quot;;
vars.put(&quot;DynamicOBIDs&quot;, DynamicOBID);</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC019_SearchDocsWORGFileterAB6IQZ09XA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep119&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC019_SearchDocsWORGFileterAB6IQZ09XA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC019_SearchDocsWORGFileterAB6IQZ09XA} ${TC019_SearchDocsWORGFileterAB6IQZ09XA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC019_SearchDocsWORGFileterAB6IQZ09XA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC019_SearchDocsWORGFileterAB6IQZ093A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep109&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC019_SearchDocsWORGFileterAB6IQZ093A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC019_SearchDocsWORGFileterAB6IQZ093A} ${TC019_SearchDocsWORGFileterAB6IQZ093A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC019_SearchDocsWORGFileterAB6IQZ093A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC019_SearchDocsWORGFileterAB6IQZ09XA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep119&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC019_SearchDocsWORGFileterAB6IQZ09XA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC019_SearchDocsWORGFileterAB6IQZ09XA} ${TC019_SearchDocsWORGFileterAB6IQZ09XA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC019_SearchDocsWORGFileterAB6IQZ09XA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC019_SearchDocsWORGFileterAB6IQZ090A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep108&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC019_SearchDocsWORGFileterAB6IQZ090A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC019_SearchDocsWORGFileterAB6IQZ090A} ${TC019_SearchDocsWORGFileterAB6IQZ090A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC019_SearchDocsWORGFileterAB6IQZ090A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC019_SearchDocsWORGFileterAB6IQZ08XA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep107&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC019_SearchDocsWORGFileterAB6IQZ08XA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC019_SearchDocsWORGFileterAB6IQZ08XA} ${TC019_SearchDocsWORGFileterAB6IQZ08XA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC019_SearchDocsWORGFileterAB6IQZ08XA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC019_SearchDocsWORGFileterAB6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC019_SearchDocsWORGFileterAB6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC019_SearchDocsWORGFileterAB6IQY000A} ${TC019_SearchDocsWORGFileterAB6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC019_SearchDocsWORGFileterAB6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC019_SearchDocsWORGFileterAB6IQZ09XA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep119&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC019_SearchDocsWORGFileterAB6IQZ09XA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC019_SearchDocsWORGFileterAB6IQZ09XA} ${TC019_SearchDocsWORGFileterAB6IQZ09XA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC019_SearchDocsWORGFileterAB6IQZ09XA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC019_SearchDocsWORGFileterAB6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC019_SearchDocsWORGFileterAB6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC019_SearchDocsWORGFileterAB6IQY000A} ${TC019_SearchDocsWORGFileterAB6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC019_SearchDocsWORGFileterAB6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC019_SearchDocsWORGFileterAB6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC019_SearchDocsWORGFileterAB6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC019_SearchDocsWORGFileterAB6IQY000A} ${TC019_SearchDocsWORGFileterAB6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC019_SearchDocsWORGFileterAB6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC019_SearchDocsWORGFileterAB6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC019_SearchDocsWORGFileterAB6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC019_SearchDocsWORGFileterAB6IQY000A} ${TC019_SearchDocsWORGFileterAB6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC019_SearchDocsWORGFileterAB6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC019_SearchDocsWORGFileterAB6IQZ08CA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep100&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC019_SearchDocsWORGFileterAB6IQZ08CA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC019_SearchDocsWORGFileterAB6IQZ08CA} ${TC019_SearchDocsWORGFileterAB6IQZ08CA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC019_SearchDocsWORGFileterAB6IQZ08CA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC019_SearchDocsWORGFileterAB6IQZ096A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep110&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC019_SearchDocsWORGFileterAB6IQZ096A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC019_SearchDocsWORGFileterAB6IQZ096A} ${TC019_SearchDocsWORGFileterAB6IQZ096A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC019_SearchDocsWORGFileterAB6IQZ096A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
                    <stringProp name="delimiter">,</stringProp>
                    <stringProp name="fileEncoding"></stringProp>
                    <stringProp name="filename">${InputPath}SearchFDWDocuments19.csv</stringProp>
                    <boolProp name="ignoreFirstLine">false</boolProp>
                    <boolProp name="quotedData">false</boolProp>
                    <boolProp name="recycle">true</boolProp>
                    <stringProp name="shareMode">shareMode.all</stringProp>
                    <boolProp name="stopThread">false</boolProp>
                    <stringProp name="variableNames">SearchFDWDocuments19</stringProp>
                  </CSVDataSet>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/FDWDocuments" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="%24format" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24format</stringProp>
                          <stringProp name="Argument.value">json</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24top</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24filter</stringProp>
                          <stringProp name="Argument.value">(contains(Name%2C%27${SearchFDWDocuments19}%27))</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="%24count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">%24count</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="_" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">_</stringProp>
                          <stringProp name="Argument.value">1657002405601</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/FDWDocuments</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
                    <stringProp name="delimiter">,</stringProp>
                    <stringProp name="fileEncoding"></stringProp>
                    <stringProp name="filename">${InputPath}SearchFDWDocuments19.csv</stringProp>
                    <boolProp name="ignoreFirstLine">false</boolProp>
                    <boolProp name="quotedData">false</boolProp>
                    <boolProp name="recycle">true</boolProp>
                    <stringProp name="shareMode">shareMode.all</stringProp>
                    <boolProp name="stopThread">false</boolProp>
                    <stringProp name="variableNames">SearchFDWDocuments19</stringProp>
                  </CSVDataSet>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetDynIconName()" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ObjectObids&quot;: [${DynamicOBIDs}]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetDynIconName()</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">292</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..OBID||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;ListEditContextMenu&quot;],&quot;ObjectObidAndDomains&quot;:[${DynamicOBIDs}]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">338</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;CreateObj&quot;,&quot;ManageFiles&quot;,&quot;ManageSignedFiles&quot;,&quot;CopyObj&quot;,&quot;CreateClassObj&quot;,&quot;CreateClassObjAndRel&quot;,&quot;CreateObjAndRel&quot;,&quot;CreateClassObjAndLoad&quot;,&quot;SDxCreateClassObjAndLoad&quot;,&quot;CreateWizardClassObj&quot;,&quot;CreateSignWizardClassObj&quot;,&quot;CreateObjectFromSelectedObjects&quot;,&quot;CreateSignObjectFromSelectedObjects&quot;,&quot;EditObj&quot;,&quot;EditWizardObj&quot;,&quot;EditSignWizardObj&quot;,&quot;ShowInbox&quot;,&quot;ReplaceFiles&quot;,&quot;CheckInFiles&quot;,&quot;TaskReassignmentConfiguration&quot;,&quot;SDARelationshipBuilder&quot;,&quot;CreateEntryPointFromQFind&quot;,&quot;AdminEntryPoints&quot;,&quot;ShowWorkflow&quot;,&quot;SDxWorkflowTemplateEditor&quot;,&quot;SDxCreateWorkflowTemplate&quot;,&quot;ListEditContextMenu&quot;,&quot;FTRSearch&quot;,&quot;AssignRecipients&quot;,&quot;Revise&quot;,&quot;UploadDocument&quot;,&quot;EditObjWithClassification&quot;,&quot;SDAManageDataTree&quot;,&quot;ShowInboxForObject&quot;,&quot;SDACopyDataBookContent&quot;,&quot;ConfigRoleAssignment&quot;,&quot;DashboardCreatePage&quot;,&quot;DashboardUpdatePage&quot;,&quot;InsertHistRev&quot;,&quot;CopyDistributionMatrix&quot;,&quot;MultiStepReAssign&quot;,&quot;AddRecipient&quot;,&quot;ExpandDocNestedStructure&quot;,&quot;ExpandFileNestedStructure&quot;,&quot;TabOutletManagement&quot;,&quot;CompareWorkflowTemplates&quot;,&quot;MaintainCalendar&quot;,&quot;EditObjModal&quot;,&quot;RegenerateMetadata&quot;,&quot;QueryEntity&quot;,&quot;ShareUrl&quot;,&quot;ShowObj&quot;,&quot;TerminateObj&quot;,&quot;DeleteObj&quot;,&quot;AttachWorkflow&quot;,&quot;CancelDocument&quot;,&quot;UnCancelDocument&quot;,&quot;ExecuteSavedReportFromObject&quot;,&quot;UndoEditFiles&quot;,&quot;EditFiles&quot;,&quot;XmtlCancel&quot;,&quot;XmtlUndoCancel&quot;,&quot;StepRejectAction&quot;,&quot;StepAcceptAction&quot;,&quot;StepClaim&quot;,&quot;SharepointCreateDocument&quot;,&quot;SharepointDownloadFile&quot;,&quot;SharepointViewNative&quot;,&quot;GenerateAlternateRendition&quot;,&quot;OpenXMLWordReport&quot;,&quot;SignOff&quot;,&quot;SignOffWithForm&quot;,&quot;UndoSignOff&quot;,&quot;SPFExchangeData&quot;,&quot;LaunchURLWithDynamicArgs&quot;,&quot;SDARelationshipBuilder&quot;,&quot;LaunchURLFromFeatureSet&quot;,&quot;WebClientExtensibility&quot;,&quot;GenerateMergedRendition&quot;,&quot;ListEditUncontrolledItems&quot;,&quot;WorkflowDetailsReport&quot;,&quot;ShareFile&quot;,&quot;CopyToLocalFile&quot;,&quot;GenerateMergedRenditionForFiles&quot;,&quot;PrintFile&quot;,&quot;UnlockUserAccount&quot;,&quot;StartScheduler&quot;,&quot;StopScheduler&quot;,&quot;SPFCopyConfigAccess&quot;,&quot;Dashboard&quot;,&quot;UpdateReferences&quot;,&quot;UpdateReferredBy&quot;,&quot;RelationshipManagement&quot;,&quot;GenerateThumbnail&quot;,&quot;EditFilesOnline&quot;,&quot;FinishEditOnline&quot;,&quot;FinishEditOnlineSignOff&quot;,&quot;UndoEditOnline&quot;,&quot;ViewOnline&quot;,&quot;GoToOneDrive&quot;,&quot;UpdateWidget&quot;,&quot;ReplaceEditableCopyWithMasterCopy&quot;,&quot;RequestForESign&quot;,&quot;CompleteESign&quot;,&quot;CompareDocuments&quot;,&quot;CreateWebGLSchedulerTask&quot;,&quot;SDACompareFiles&quot;,&quot;Navigate&quot;,&quot;ViewInDocument&quot;,&quot;SmartPlantReview&quot;,&quot;ViewBatchRenditionLog&quot;,&quot;ClearBravaCache&quot;,&quot;ViewInVisualReport&quot;,&quot;SCLBQualityAssuranceReviewDetails&quot;,&quot;SCLBManageQualityAssuranceReviewPlan&quot;,&quot;SCLBQualityAssuranceReview&quot;,&quot;SDAImpactAnalysis&quot;,&quot;ConflictResolution&quot;,&quot;SCLBCommunicationManagementDetails&quot;,&quot;SCLBCommunicationManagement&quot;,&quot;SOPSCommunicationManagementDetails&quot;,&quot;SOPSCommunicationManagement&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;SCLBQualityAssuranceRegister&quot;,&quot;SDAManageMarkupLayersForRendition&quot;,&quot;SOPSManageMarkupLayersForRendition&quot;,&quot;SDAImpactAnalysis&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;ConflictResolution&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;ProjectHandover&quot;,&quot;SDAShowMySDVJobs&quot;,&quot;SDxShowMySDVJobs&quot;,&quot;SDAApproveSDVJob&quot;,&quot;SDAViewSDVJobSummary&quot;,&quot;SDADeleteSDVJob&quot;,&quot;SDASDVDownloadValidationReport&quot;,&quot;LScanViewSite&quot;,&quot;LScanViewScan&quot;,&quot;LScanSynchronizeSiteData&quot;,&quot;LScanViewTagInScan&quot;,&quot;ViewConsolidatedDataForObject&quot;,&quot;ViewSharedData&quot;,&quot;CreateWorkAreaDefinition&quot;,&quot;EditWorkAreaDefinition&quot;,&quot;RunDanglingRelsReport&quot;,&quot;RegisterAuthoringTool&quot;,&quot;InconsistencyReportWithStartingObject&quot;,&quot;InconsistencyReportByQuery&quot;,&quot;InconsistencyReport&quot;,&quot;RegenerateCommonSchema&quot;,&quot;CancelChangeAction&quot;,&quot;SIOInconsistencyReportByQuery&quot;,&quot;RelateObjectsToWorkArea&quot;,&quot;ResolveDuplicateDocuments&quot;,&quot;SPFNContentExtraction&quot;,&quot;UnClaimObj&quot;,&quot;ClaimObj&quot;,&quot;MergeConfig&quot;,&quot;MergeObj&quot;,&quot;MergeStructure&quot;,&quot;CancelProject&quot;,&quot;ChangeConfigStatus&quot;,&quot;SyncObjects&quot;,&quot;SPXSAPSync&quot;,&quot;SDxConnSync&quot;,&quot;ExampleClientAPIRoute&quot;,&quot;HistoryViewRoute&quot;,&quot;ExampleClientAPIAction&quot;,&quot;ExampleClientAPIModal&quot;,&quot;HistoryViewModal&quot;,&quot;ExampleClientAPIWidget&quot;],&quot;ObjectObidAndDomains&quot;:[&quot;${TC019_SearchDocsWORGFileterAB6IQZ093A}&quot;]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">3752</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC019_SearchDocsWORGFileterAB6IQZ093A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC019_SearchDocsWORGFileterAB6IQZ093A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC019_SearchDocsWORGFileterAB6IQZ093A} ${TC019_SearchDocsWORGFileterAB6IQZ093A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC019_SearchDocsWORGFileterAB6IQZ093A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="AfterJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    SELECT
               DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255),DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  AS [SQL_Execution],
                   SUM(total_logical_reads)  AS [BufferGets],
                                 SUM(total_physical_reads)  AS [Physical Reads],
                 SUM(total_worker_time) AS [CPU Time Ms],
       SUM(total_elapsed_time)  AS [Elapsed Time]
      FROM sys.dm_exec_query_stats AS qs
    CROSS APPLY (
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  FROM sys.dm_exec_plan_attributes(qs.plan_handle)
                 WHERE attribute = N&apos;dbid&apos;) AS F_DB
               
    GROUP BY DatabaseID

)
SELECT 
       
                  [DatabaseID],[SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
                  [Elapsed Time] 
                  FROM DB_CPU_Stats
where DatabaseName= &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable">SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;

String TransName=&quot;SearchDocsWORGFileterAB&quot;;
String SQLStartTime = JMeterUtils.getProperty(&quot;SQLStartTime-JP&quot;);
String SQLEndTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());

log.info(&quot;aSQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
//int DatabaseID = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;);
//log.info(&quot;DatabaseID = &gt; &quot;+DatabaseID);
//log.info(&quot;SQLStartTime = &gt; &quot;+SQLStartTime);
//log.info(&quot;SQLEndTime = &gt; &quot;+SQLEndTime);
Long aSQL_Execution = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;SQL_Execution&quot;);
//log.info(&quot;aSQL_Execution = &gt; &quot;+aSQL_Execution);

Long aBufferGets = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;BufferGets&quot;);
//log.info(&quot;aBufferGets = &gt; &quot;+aBufferGets);
Long aPhysicalReads = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Physical Reads&quot;);
//log.info(&quot;aPhysicalReads = &gt; &quot;+aPhysicalReads);
Long aCPUTimeMs = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;CPU Time Ms&quot;);
//log.info(&quot;aCPUTimeMs = &gt; &quot;+aCPUTimeMs);
Long aElapsedTime = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Elapsed Time&quot;);
//log.info(&quot;aElapsedTime = &gt; &quot;+aElapsedTime);

String BSQlStats = JMeterUtils.getProperty(&quot;SQlStats-JP&quot;);
//log.info(&quot;BSQlStats = &gt; &quot;+BSQlStats);

Long bSQL_Execution = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;SQL_Execution=&quot;)+14, BSQlStats.indexOf(&quot;, BufferGets=&quot;)));
//log.info(&quot;bSQL_Execution = &gt; &quot;+bSQL_Execution);

//Long.parseLong
Long bBufferGets = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11, BSQlStats.indexOf(&quot;}&quot;)));
//int bBufferGets = Integer.parseInt(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11,BSQlStats.indexOf(&quot;}&quot;)));
//log.info(&quot;bBufferGets = &gt; &quot;+bBufferGets);

Long bPhysicalReads = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Physical Reads=&quot;)+15, BSQlStats.indexOf(&quot;, DatabaseID&quot;)));
//log.info(&quot;bPhysicalReads = &gt; &quot;+bPhysicalReads);

Long bCPUTimeMs = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;CPU Time Ms=&quot;)+12, BSQlStats.indexOf(&quot;, Elapsed Time&quot;)));
//log.info(&quot;bCPUTimeMs = &gt; &quot;+bCPUTimeMs);

Long bElapsedTime = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Elapsed Time=&quot;)+13, BSQlStats.indexOf(&quot;, SQL_Execution&quot;)));
//log.info(&quot;bElapsedTime = &gt; &quot;+bElapsedTime);

//log.info(&quot;SQL_Execution = &gt; &quot;+(aSQL_Execution-bSQL_Execution));
//log.info(&quot;BufferGets = &gt; &quot;+(aBufferGets-bBufferGets));
//log.info(&quot;PhysicalReads = &gt; &quot;+(aPhysicalReads-bPhysicalReads));
//log.info(&quot;CPUTimeMs = &gt; &quot;+(aCPUTimeMs-bCPUTimeMs));
//log.info(&quot;ElapsedTime = &gt; &quot;+(aElapsedTime-bElapsedTime));
log.info(&quot;===================================================&quot;);
String Perfcsv = TransName +&quot;,&quot;+String.valueOf(vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;))+&quot;,&quot;+SQLStartTime+&quot;,&quot;+SQLEndTime+&quot;,&quot;+String.valueOf(aSQL_Execution-bSQL_Execution)+&quot;,&quot;+String.valueOf(aBufferGets-bBufferGets)+&quot;,&quot;+String.valueOf(aPhysicalReads-bPhysicalReads)+&quot;,&quot;+String.valueOf(aCPUTimeMs-bCPUTimeMs)+&quot;,&quot;+String.valueOf(aElapsedTime-bElapsedTime);

log.info(&quot;Perfcsv = &gt;&quot;+Perfcsv);
log.info(&quot;===================================================&quot;);
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLEndTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

String PerfCSVFile = vars.get(&quot;OutputPath&quot;) + vars.get(&quot;OutputFolderName&quot;) +&quot;perf.csv&quot;;
FileWriter fstream = new FileWriter(PerfCSVFile,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(Perfcsv);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="21" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">false</boolProp>
              </TransactionController>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="BeforeJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    Select 
     DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255), DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  As [SQL_Execution],
                   SUM(total_logical_reads)  As [BufferGets],
                                 SUM(total_physical_reads)  As [Physical Reads],
                 SUM(total_worker_time) As [CPU Time Ms],
       SUM(total_elapsed_time)  As [Elapsed Time]
      From sys.dm_exec_query_stats AS qs
    CROSS APPLY(
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  From sys.dm_exec_plan_attributes(qs.plan_handle)
                  Where Attribute = N&apos;dbid&apos;) As F_DB
               
    Group BY DatabaseID
)
Select 

       [DatabaseID], [SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
       [Elapsed Time] 
                  From DB_CPU_Stats
Where DatabaseName = &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable"> SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;
String SQLStartTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());
//log.info(&quot;SQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLStartTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

log.info(&quot;Before SQlStats = &gt; &quot;+JMeterUtils.getProperty(&quot;SQlStats-JP&quot;));</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_ViewDocDeatils" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">false</boolProp>
                </TransactionController>
                <hashTree>
                  <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="SearchFDWDocuments20" elementType="Argument">
                        <stringProp name="Argument.name">SearchFDWDocuments20</stringProp>
                        <stringProp name="Argument.value">25</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </Arguments>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;CreateObj&quot;,&quot;ManageFiles&quot;,&quot;ManageSignedFiles&quot;,&quot;CopyObj&quot;,&quot;CreateClassObj&quot;,&quot;CreateClassObjAndRel&quot;,&quot;CreateObjAndRel&quot;,&quot;CreateClassObjAndLoad&quot;,&quot;SDxCreateClassObjAndLoad&quot;,&quot;CreateWizardClassObj&quot;,&quot;CreateSignWizardClassObj&quot;,&quot;CreateObjectFromSelectedObjects&quot;,&quot;CreateSignObjectFromSelectedObjects&quot;,&quot;EditObj&quot;,&quot;EditWizardObj&quot;,&quot;EditSignWizardObj&quot;,&quot;ShowInbox&quot;,&quot;ReplaceFiles&quot;,&quot;CheckInFiles&quot;,&quot;TaskReassignmentConfiguration&quot;,&quot;SDARelationshipBuilder&quot;,&quot;CreateEntryPointFromQFind&quot;,&quot;AdminEntryPoints&quot;,&quot;ShowWorkflow&quot;,&quot;SDxWorkflowTemplateEditor&quot;,&quot;SDxCreateWorkflowTemplate&quot;,&quot;ListEditContextMenu&quot;,&quot;FTRSearch&quot;,&quot;AssignRecipients&quot;,&quot;Revise&quot;,&quot;UploadDocument&quot;,&quot;EditObjWithClassification&quot;,&quot;SDAManageDataTree&quot;,&quot;ShowInboxForObject&quot;,&quot;SDACopyDataBookContent&quot;,&quot;ConfigRoleAssignment&quot;,&quot;DashboardCreatePage&quot;,&quot;DashboardUpdatePage&quot;,&quot;InsertHistRev&quot;,&quot;CopyDistributionMatrix&quot;,&quot;MultiStepReAssign&quot;,&quot;AddRecipient&quot;,&quot;ExpandDocNestedStructure&quot;,&quot;ExpandFileNestedStructure&quot;,&quot;TabOutletManagement&quot;,&quot;CompareWorkflowTemplates&quot;,&quot;MaintainCalendar&quot;,&quot;EditObjModal&quot;,&quot;RegenerateMetadata&quot;,&quot;QueryEntity&quot;,&quot;ShareUrl&quot;,&quot;ShowObj&quot;,&quot;TerminateObj&quot;,&quot;DeleteObj&quot;,&quot;AttachWorkflow&quot;,&quot;CancelDocument&quot;,&quot;UnCancelDocument&quot;,&quot;ExecuteSavedReportFromObject&quot;,&quot;UndoEditFiles&quot;,&quot;EditFiles&quot;,&quot;XmtlCancel&quot;,&quot;XmtlUndoCancel&quot;,&quot;StepRejectAction&quot;,&quot;StepAcceptAction&quot;,&quot;StepClaim&quot;,&quot;SharepointCreateDocument&quot;,&quot;SharepointDownloadFile&quot;,&quot;SharepointViewNative&quot;,&quot;GenerateAlternateRendition&quot;,&quot;OpenXMLWordReport&quot;,&quot;SignOff&quot;,&quot;SignOffWithForm&quot;,&quot;UndoSignOff&quot;,&quot;SPFExchangeData&quot;,&quot;LaunchURLWithDynamicArgs&quot;,&quot;SDARelationshipBuilder&quot;,&quot;LaunchURLFromFeatureSet&quot;,&quot;WebClientExtensibility&quot;,&quot;GenerateMergedRendition&quot;,&quot;ListEditUncontrolledItems&quot;,&quot;WorkflowDetailsReport&quot;,&quot;ShareFile&quot;,&quot;CopyToLocalFile&quot;,&quot;GenerateMergedRenditionForFiles&quot;,&quot;PrintFile&quot;,&quot;UnlockUserAccount&quot;,&quot;StartScheduler&quot;,&quot;StopScheduler&quot;,&quot;SPFCopyConfigAccess&quot;,&quot;Dashboard&quot;,&quot;UpdateReferences&quot;,&quot;UpdateReferredBy&quot;,&quot;RelationshipManagement&quot;,&quot;GenerateThumbnail&quot;,&quot;EditFilesOnline&quot;,&quot;FinishEditOnline&quot;,&quot;FinishEditOnlineSignOff&quot;,&quot;UndoEditOnline&quot;,&quot;ViewOnline&quot;,&quot;GoToOneDrive&quot;,&quot;UpdateWidget&quot;,&quot;ReplaceEditableCopyWithMasterCopy&quot;,&quot;RequestForESign&quot;,&quot;CompleteESign&quot;,&quot;CompareDocuments&quot;,&quot;CreateWebGLSchedulerTask&quot;,&quot;SDACompareFiles&quot;,&quot;Navigate&quot;,&quot;ViewInDocument&quot;,&quot;SmartPlantReview&quot;,&quot;ViewBatchRenditionLog&quot;,&quot;ClearBravaCache&quot;,&quot;ViewInVisualReport&quot;,&quot;SCLBQualityAssuranceReviewDetails&quot;,&quot;SCLBManageQualityAssuranceReviewPlan&quot;,&quot;SCLBQualityAssuranceReview&quot;,&quot;SDAImpactAnalysis&quot;,&quot;ConflictResolution&quot;,&quot;SCLBCommunicationManagementDetails&quot;,&quot;SCLBCommunicationManagement&quot;,&quot;SOPSCommunicationManagementDetails&quot;,&quot;SOPSCommunicationManagement&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;SCLBQualityAssuranceRegister&quot;,&quot;SDAManageMarkupLayersForRendition&quot;,&quot;SOPSManageMarkupLayersForRendition&quot;,&quot;SDAImpactAnalysis&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;ConflictResolution&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;ProjectHandover&quot;,&quot;SDAShowMySDVJobs&quot;,&quot;SDxShowMySDVJobs&quot;,&quot;SDAApproveSDVJob&quot;,&quot;SDAViewSDVJobSummary&quot;,&quot;SDADeleteSDVJob&quot;,&quot;SDASDVDownloadValidationReport&quot;,&quot;LScanViewSite&quot;,&quot;LScanViewScan&quot;,&quot;LScanSynchronizeSiteData&quot;,&quot;LScanViewTagInScan&quot;,&quot;ViewConsolidatedDataForObject&quot;,&quot;ViewSharedData&quot;,&quot;CreateWorkAreaDefinition&quot;,&quot;EditWorkAreaDefinition&quot;,&quot;RunDanglingRelsReport&quot;,&quot;RegisterAuthoringTool&quot;,&quot;InconsistencyReportWithStartingObject&quot;,&quot;InconsistencyReportByQuery&quot;,&quot;InconsistencyReport&quot;,&quot;RegenerateCommonSchema&quot;,&quot;CancelChangeAction&quot;,&quot;SIOInconsistencyReportByQuery&quot;,&quot;RelateObjectsToWorkArea&quot;,&quot;ResolveDuplicateDocuments&quot;,&quot;SPFNContentExtraction&quot;,&quot;UnClaimObj&quot;,&quot;ClaimObj&quot;,&quot;MergeConfig&quot;,&quot;MergeObj&quot;,&quot;MergeStructure&quot;,&quot;CancelProject&quot;,&quot;ChangeConfigStatus&quot;,&quot;SyncObjects&quot;,&quot;SPXSAPSync&quot;,&quot;SDxConnSync&quot;,&quot;ExampleClientAPIRoute&quot;,&quot;HistoryViewRoute&quot;,&quot;ExampleClientAPIAction&quot;,&quot;ExampleClientAPIModal&quot;,&quot;HistoryViewModal&quot;,&quot;ExampleClientAPIWidget&quot;],&quot;ObjectObidAndDomains&quot;:[&quot;${TC019_SearchDocsWORGFileterAB6IQY000A}&quot;]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">3752</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs[0]||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils6IQY000A} ${TC020_ViewDocDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils6IQY000A} ${TC020_ViewDocDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils6IQY000A} ${TC020_ViewDocDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils6IQY000A} ${TC020_ViewDocDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils&apos;6IQY000A&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils&apos;6IQY000A&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils&apos;6IQY000A&apos;} ${TC020_ViewDocDeatils&apos;6IQY000A&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils&apos;6IQY000A&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY002A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ShowInboxForObject&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY002A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils6IQY002A} ${TC020_ViewDocDeatils6IQY002A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils6IQY002A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils&apos;6IQY002A&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ShowInboxForObject&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils&apos;6IQY002A&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils&apos;6IQY002A&apos;} ${TC020_ViewDocDeatils&apos;6IQY002A&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils&apos;6IQY002A&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject" enabled="false">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;CreateObj&quot;,&quot;ManageFiles&quot;,&quot;ManageSignedFiles&quot;,&quot;CopyObj&quot;,&quot;CreateClassObj&quot;,&quot;CreateClassObjAndRel&quot;,&quot;CreateObjAndRel&quot;,&quot;CreateClassObjAndLoad&quot;,&quot;SDxCreateClassObjAndLoad&quot;,&quot;CreateWizardClassObj&quot;,&quot;CreateSignWizardClassObj&quot;,&quot;CreateObjectFromSelectedObjects&quot;,&quot;CreateSignObjectFromSelectedObjects&quot;,&quot;EditObj&quot;,&quot;EditWizardObj&quot;,&quot;EditSignWizardObj&quot;,&quot;ShowInbox&quot;,&quot;ReplaceFiles&quot;,&quot;CheckInFiles&quot;,&quot;TaskReassignmentConfiguration&quot;,&quot;SDARelationshipBuilder&quot;,&quot;CreateEntryPointFromQFind&quot;,&quot;AdminEntryPoints&quot;,&quot;ShowWorkflow&quot;,&quot;SDxWorkflowTemplateEditor&quot;,&quot;SDxCreateWorkflowTemplate&quot;,&quot;ListEditContextMenu&quot;,&quot;FTRSearch&quot;,&quot;AssignRecipients&quot;,&quot;Revise&quot;,&quot;UploadDocument&quot;,&quot;EditObjWithClassification&quot;,&quot;SDAManageDataTree&quot;,&quot;ShowInboxForObject&quot;,&quot;SDACopyDataBookContent&quot;,&quot;ConfigRoleAssignment&quot;,&quot;DashboardCreatePage&quot;,&quot;DashboardUpdatePage&quot;,&quot;InsertHistRev&quot;,&quot;CopyDistributionMatrix&quot;,&quot;MultiStepReAssign&quot;,&quot;AddRecipient&quot;,&quot;ExpandDocNestedStructure&quot;,&quot;ExpandFileNestedStructure&quot;,&quot;TabOutletManagement&quot;,&quot;CompareWorkflowTemplates&quot;,&quot;MaintainCalendar&quot;,&quot;EditObjModal&quot;,&quot;RegenerateMetadata&quot;,&quot;QueryEntity&quot;,&quot;ShareUrl&quot;,&quot;ShowObj&quot;,&quot;TerminateObj&quot;,&quot;DeleteObj&quot;,&quot;AttachWorkflow&quot;,&quot;CancelDocument&quot;,&quot;UnCancelDocument&quot;,&quot;ExecuteSavedReportFromObject&quot;,&quot;UndoEditFiles&quot;,&quot;EditFiles&quot;,&quot;XmtlCancel&quot;,&quot;XmtlUndoCancel&quot;,&quot;StepRejectAction&quot;,&quot;StepAcceptAction&quot;,&quot;StepClaim&quot;,&quot;SharepointCreateDocument&quot;,&quot;SharepointDownloadFile&quot;,&quot;SharepointViewNative&quot;,&quot;GenerateAlternateRendition&quot;,&quot;OpenXMLWordReport&quot;,&quot;SignOff&quot;,&quot;SignOffWithForm&quot;,&quot;UndoSignOff&quot;,&quot;SPFExchangeData&quot;,&quot;LaunchURLWithDynamicArgs&quot;,&quot;SDARelationshipBuilder&quot;,&quot;LaunchURLFromFeatureSet&quot;,&quot;WebClientExtensibility&quot;,&quot;GenerateMergedRendition&quot;,&quot;ListEditUncontrolledItems&quot;,&quot;WorkflowDetailsReport&quot;,&quot;ShareFile&quot;,&quot;CopyToLocalFile&quot;,&quot;GenerateMergedRenditionForFiles&quot;,&quot;PrintFile&quot;,&quot;UnlockUserAccount&quot;,&quot;StartScheduler&quot;,&quot;StopScheduler&quot;,&quot;SPFCopyConfigAccess&quot;,&quot;Dashboard&quot;,&quot;UpdateReferences&quot;,&quot;UpdateReferredBy&quot;,&quot;RelationshipManagement&quot;,&quot;GenerateThumbnail&quot;,&quot;EditFilesOnline&quot;,&quot;FinishEditOnline&quot;,&quot;FinishEditOnlineSignOff&quot;,&quot;UndoEditOnline&quot;,&quot;ViewOnline&quot;,&quot;GoToOneDrive&quot;,&quot;UpdateWidget&quot;,&quot;ReplaceEditableCopyWithMasterCopy&quot;,&quot;RequestForESign&quot;,&quot;CompleteESign&quot;,&quot;CompareDocuments&quot;,&quot;CreateWebGLSchedulerTask&quot;,&quot;SDACompareFiles&quot;,&quot;Navigate&quot;,&quot;ViewInDocument&quot;,&quot;SmartPlantReview&quot;,&quot;ViewBatchRenditionLog&quot;,&quot;ClearBravaCache&quot;,&quot;ViewInVisualReport&quot;,&quot;SCLBQualityAssuranceReviewDetails&quot;,&quot;SCLBManageQualityAssuranceReviewPlan&quot;,&quot;SCLBQualityAssuranceReview&quot;,&quot;SDAImpactAnalysis&quot;,&quot;ConflictResolution&quot;,&quot;SCLBCommunicationManagementDetails&quot;,&quot;SCLBCommunicationManagement&quot;,&quot;SOPSCommunicationManagementDetails&quot;,&quot;SOPSCommunicationManagement&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;SCLBQualityAssuranceRegister&quot;,&quot;SDAManageMarkupLayersForRendition&quot;,&quot;SOPSManageMarkupLayersForRendition&quot;,&quot;SDAImpactAnalysis&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;ConflictResolution&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;ProjectHandover&quot;,&quot;SDAShowMySDVJobs&quot;,&quot;SDxShowMySDVJobs&quot;,&quot;SDAApproveSDVJob&quot;,&quot;SDAViewSDVJobSummary&quot;,&quot;SDADeleteSDVJob&quot;,&quot;SDASDVDownloadValidationReport&quot;,&quot;LScanViewSite&quot;,&quot;LScanViewScan&quot;,&quot;LScanSynchronizeSiteData&quot;,&quot;LScanViewTagInScan&quot;,&quot;ViewConsolidatedDataForObject&quot;,&quot;ViewSharedData&quot;,&quot;CreateWorkAreaDefinition&quot;,&quot;EditWorkAreaDefinition&quot;,&quot;RunDanglingRelsReport&quot;,&quot;RegisterAuthoringTool&quot;,&quot;InconsistencyReportWithStartingObject&quot;,&quot;InconsistencyReportByQuery&quot;,&quot;InconsistencyReport&quot;,&quot;RegenerateCommonSchema&quot;,&quot;CancelChangeAction&quot;,&quot;SIOInconsistencyReportByQuery&quot;,&quot;RelateObjectsToWorkArea&quot;,&quot;ResolveDuplicateDocuments&quot;,&quot;SPFNContentExtraction&quot;,&quot;UnClaimObj&quot;,&quot;ClaimObj&quot;,&quot;MergeConfig&quot;,&quot;MergeObj&quot;,&quot;MergeStructure&quot;,&quot;CancelProject&quot;,&quot;ChangeConfigStatus&quot;,&quot;SyncObjects&quot;,&quot;SPXSAPSync&quot;,&quot;SDxConnSync&quot;,&quot;ExampleClientAPIRoute&quot;,&quot;HistoryViewRoute&quot;,&quot;ExampleClientAPIAction&quot;,&quot;ExampleClientAPIModal&quot;,&quot;HistoryViewModal&quot;,&quot;ExampleClientAPIWidget&quot;],&quot;ObjectObidAndDomains&quot;:[&quot;${TC020_ViewDocDeatils6IQY000A}&quot;]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">3752</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs[0]||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils6IQY000A} ${TC020_ViewDocDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils6IQY000A} ${TC020_ViewDocDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils6IQY000A} ${TC020_ViewDocDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils6IQY000A} ${TC020_ViewDocDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils&apos;6IQY000A&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils&apos;6IQY000A&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils&apos;6IQY000A&apos;} ${TC020_ViewDocDeatils&apos;6IQY000A&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils&apos;6IQY000A&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY002A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ShowInboxForObject&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY002A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils6IQY002A} ${TC020_ViewDocDeatils6IQY002A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils6IQY002A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils&apos;6IQY002A&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ShowInboxForObject&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils&apos;6IQY002A&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils&apos;6IQY002A&apos;} ${TC020_ViewDocDeatils&apos;6IQY002A&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils&apos;6IQY002A&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetDefaultMethod()" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;obid&quot;:&quot;${TC020_ViewDocDeatils6IQY000A}&quot;}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetDefaultMethod()</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">19</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/FDWDocuments" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$filter</stringProp>
                          <stringProp name="Argument.value">Originating_Organization%20eq%20%27AB%27</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$count</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$skip" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$skip</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$top</stringProp>
                          <stringProp name="Argument.value">25</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/FDWDocuments</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">
String DynamicOBID;
DynamicOBID = vars.get(&quot;DynamicOBID_ALL&quot;);
DynamicOBID = &quot;\&quot;&quot;+ DynamicOBID.replaceAll(&quot;,&quot;,&quot;\&quot;,\&quot;&quot;) + &quot;\&quot;&quot;;
vars.put(&quot;DynamicOBIDs&quot;, DynamicOBID);</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQZ09XA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep119&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQZ09XA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils6IQZ09XA} ${TC020_ViewDocDeatils6IQZ09XA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils6IQZ09XA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils6IQY000A} ${TC020_ViewDocDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils6IQY000A} ${TC020_ViewDocDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils6IQY000A} ${TC020_ViewDocDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils6IQY000A} ${TC020_ViewDocDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQZ08CA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep100&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQZ08CA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils6IQZ08CA} ${TC020_ViewDocDeatils6IQZ08CA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils6IQZ08CA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQZ096A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.Name == &quot;C-INGR.HSV-AB-000-LT-001_Rep110&quot;)].Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQZ096A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils6IQZ096A} ${TC020_ViewDocDeatils6IQZ096A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils6IQZ096A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
                    <stringProp name="delimiter">,</stringProp>
                    <stringProp name="fileEncoding"></stringProp>
                    <stringProp name="filename">${InputPath}SearchFDWDocuments20.csv</stringProp>
                    <boolProp name="ignoreFirstLine">false</boolProp>
                    <boolProp name="quotedData">false</boolProp>
                    <boolProp name="recycle">true</boolProp>
                    <stringProp name="shareMode">shareMode.all</stringProp>
                    <boolProp name="stopThread">false</boolProp>
                    <stringProp name="variableNames">SearchFDWDocuments20</stringProp>
                  </CSVDataSet>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetTreeViewColumnSet" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ObjectObidAndDomains&quot;:[&quot;6IQY000A&quot;,&quot;6IQZ000A&quot;,&quot;6IQZ003A&quot;,&quot;6IQZ00UA&quot;,&quot;6IQZ08CA&quot;,&quot;6IQZ08FA&quot;,&quot;6IQZ08IA&quot;,&quot;6IQZ08LA&quot;,&quot;6IQZ08OA&quot;,&quot;6IQZ08RA&quot;,&quot;6IQZ08UA&quot;,&quot;6IQZ08XA&quot;,&quot;6IQZ090A&quot;,&quot;6IQZ093A&quot;,&quot;6IQZ00XA&quot;,&quot;${TC020_ViewDocDeatils6IQZ096A}&quot;,&quot;6IQZ099A&quot;,&quot;6IQZ09CA&quot;,&quot;6IQZ09FA&quot;,&quot;6IQZ09IA&quot;,&quot;6IQZ09LA&quot;,&quot;6IQZ09OA&quot;,&quot;6IQZ09RA&quot;,&quot;6IQZ09UA&quot;,&quot;6IQZ09XA&quot;]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetTreeViewColumnSet</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">301</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Key||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Key</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.Key</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils6IQY000A} ${TC020_ViewDocDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Key</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.Key</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils6IQY000A} ${TC020_ViewDocDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Key</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.Key</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils6IQY000A} ${TC020_ViewDocDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils&apos;6IQY000A&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Key</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils&apos;6IQY000A&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.Key</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils&apos;6IQY000A&apos;} ${TC020_ViewDocDeatils&apos;6IQY000A&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils&apos;6IQY000A&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Key</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.Key</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils6IQY000A} ${TC020_ViewDocDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQZ08CA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Key</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQZ08CA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.Key</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils6IQZ08CA} ${TC020_ViewDocDeatils6IQZ08CA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils6IQZ08CA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQZ096A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Key</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQZ096A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.Key</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils6IQZ096A} ${TC020_ViewDocDeatils6IQZ096A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils6IQZ096A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetForm" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;key&quot;:&quot;${TC020_ViewDocDeatils6IQY000A}&quot;,&quot;getTodoListTaskForm&quot;:false}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetForm</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">46</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..AssociatedObjectOBIDForUpdate||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..FormSections[?(@.Name == &quot;SDADocNameDesc_UI-Section&quot;)].AssociatedObjectOBIDForUpdate</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..AssociatedObjectOBIDForUpdate</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils6IQY000A} ${TC020_ViewDocDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..FormSections[?(@.Name == &quot;SDADocNameDesc_UI-Section&quot;)].AssociatedObjectOBIDForUpdate</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..AssociatedObjectOBIDForUpdate</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils6IQY000A} ${TC020_ViewDocDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..FormSections[?(@.Name == &quot;SDADocNameDesc_UI-Section&quot;)].AssociatedObjectOBIDForUpdate</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..AssociatedObjectOBIDForUpdate</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils6IQY000A} ${TC020_ViewDocDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils&apos;6IQY000A&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..FormSections[?(@.Name == &quot;SDADocNameDesc_UI-Section&quot;)].AssociatedObjectOBIDForUpdate</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils&apos;6IQY000A&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..AssociatedObjectOBIDForUpdate</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils&apos;6IQY000A&apos;} ${TC020_ViewDocDeatils&apos;6IQY000A&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils&apos;6IQY000A&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..FormSections[?(@.Name == &quot;SDADocNameDesc_UI-Section&quot;)].AssociatedObjectOBIDForUpdate</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..AssociatedObjectOBIDForUpdate</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils6IQY000A} ${TC020_ViewDocDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY002A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..FormSections[?(@.Name == &quot;SDADocRevision_I&quot;)].AssociatedObjectOBIDForUpdate</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils6IQY002A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..AssociatedObjectOBIDForUpdate</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils6IQY002A} ${TC020_ViewDocDeatils6IQY002A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils6IQY002A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils&apos;6IQY002A&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..FormSections[?(@.Name == &quot;SDADocRevision_I&quot;)].AssociatedObjectOBIDForUpdate</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC020_ViewDocDeatils&apos;6IQY002A&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..AssociatedObjectOBIDForUpdate</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC020_ViewDocDeatils&apos;6IQY002A&apos;} ${TC020_ViewDocDeatils&apos;6IQY002A&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC020_ViewDocDeatils&apos;6IQY002A&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Notifications" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$select" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$select</stringProp>
                          <stringProp name="Argument.value">OBID,Name,Description,CreationDate,SPFContextObjectOBID</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$top</stringProp>
                          <stringProp name="Argument.value">25</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$skip" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$skip</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$count</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$orderby" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$orderby</stringProp>
                          <stringProp name="Argument.value">CreationDate+desc</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Notifications</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json,application/vnd.intergraph.data+json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="AfterJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    SELECT
               DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255),DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  AS [SQL_Execution],
                   SUM(total_logical_reads)  AS [BufferGets],
                                 SUM(total_physical_reads)  AS [Physical Reads],
                 SUM(total_worker_time) AS [CPU Time Ms],
       SUM(total_elapsed_time)  AS [Elapsed Time]
      FROM sys.dm_exec_query_stats AS qs
    CROSS APPLY (
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  FROM sys.dm_exec_plan_attributes(qs.plan_handle)
                 WHERE attribute = N&apos;dbid&apos;) AS F_DB
               
    GROUP BY DatabaseID

)
SELECT 
       
                  [DatabaseID],[SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
                  [Elapsed Time] 
                  FROM DB_CPU_Stats
where DatabaseName= &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable">SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;

String TransName=&quot;ViewDocDeatils&quot;;
String SQLStartTime = JMeterUtils.getProperty(&quot;SQLStartTime-JP&quot;);
String SQLEndTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());

log.info(&quot;aSQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
//int DatabaseID = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;);
//log.info(&quot;DatabaseID = &gt; &quot;+DatabaseID);
//log.info(&quot;SQLStartTime = &gt; &quot;+SQLStartTime);
//log.info(&quot;SQLEndTime = &gt; &quot;+SQLEndTime);
Long aSQL_Execution = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;SQL_Execution&quot;);
//log.info(&quot;aSQL_Execution = &gt; &quot;+aSQL_Execution);

Long aBufferGets = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;BufferGets&quot;);
//log.info(&quot;aBufferGets = &gt; &quot;+aBufferGets);
Long aPhysicalReads = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Physical Reads&quot;);
//log.info(&quot;aPhysicalReads = &gt; &quot;+aPhysicalReads);
Long aCPUTimeMs = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;CPU Time Ms&quot;);
//log.info(&quot;aCPUTimeMs = &gt; &quot;+aCPUTimeMs);
Long aElapsedTime = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Elapsed Time&quot;);
//log.info(&quot;aElapsedTime = &gt; &quot;+aElapsedTime);

String BSQlStats = JMeterUtils.getProperty(&quot;SQlStats-JP&quot;);
//log.info(&quot;BSQlStats = &gt; &quot;+BSQlStats);

Long bSQL_Execution = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;SQL_Execution=&quot;)+14, BSQlStats.indexOf(&quot;, BufferGets=&quot;)));
//log.info(&quot;bSQL_Execution = &gt; &quot;+bSQL_Execution);

//Long.parseLong
Long bBufferGets = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11, BSQlStats.indexOf(&quot;}&quot;)));
//int bBufferGets = Integer.parseInt(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11,BSQlStats.indexOf(&quot;}&quot;)));
//log.info(&quot;bBufferGets = &gt; &quot;+bBufferGets);

Long bPhysicalReads = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Physical Reads=&quot;)+15, BSQlStats.indexOf(&quot;, DatabaseID&quot;)));
//log.info(&quot;bPhysicalReads = &gt; &quot;+bPhysicalReads);

Long bCPUTimeMs = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;CPU Time Ms=&quot;)+12, BSQlStats.indexOf(&quot;, Elapsed Time&quot;)));
//log.info(&quot;bCPUTimeMs = &gt; &quot;+bCPUTimeMs);

Long bElapsedTime = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Elapsed Time=&quot;)+13, BSQlStats.indexOf(&quot;, SQL_Execution&quot;)));
//log.info(&quot;bElapsedTime = &gt; &quot;+bElapsedTime);

//log.info(&quot;SQL_Execution = &gt; &quot;+(aSQL_Execution-bSQL_Execution));
//log.info(&quot;BufferGets = &gt; &quot;+(aBufferGets-bBufferGets));
//log.info(&quot;PhysicalReads = &gt; &quot;+(aPhysicalReads-bPhysicalReads));
//log.info(&quot;CPUTimeMs = &gt; &quot;+(aCPUTimeMs-bCPUTimeMs));
//log.info(&quot;ElapsedTime = &gt; &quot;+(aElapsedTime-bElapsedTime));
log.info(&quot;===================================================&quot;);
String Perfcsv = TransName +&quot;,&quot;+String.valueOf(vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;))+&quot;,&quot;+SQLStartTime+&quot;,&quot;+SQLEndTime+&quot;,&quot;+String.valueOf(aSQL_Execution-bSQL_Execution)+&quot;,&quot;+String.valueOf(aBufferGets-bBufferGets)+&quot;,&quot;+String.valueOf(aPhysicalReads-bPhysicalReads)+&quot;,&quot;+String.valueOf(aCPUTimeMs-bCPUTimeMs)+&quot;,&quot;+String.valueOf(aElapsedTime-bElapsedTime);

log.info(&quot;Perfcsv = &gt;&quot;+Perfcsv);
log.info(&quot;===================================================&quot;);
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLEndTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

String PerfCSVFile = vars.get(&quot;OutputPath&quot;) + vars.get(&quot;OutputFolderName&quot;) +&quot;perf.csv&quot;;
FileWriter fstream = new FileWriter(PerfCSVFile,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(Perfcsv);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="22" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">false</boolProp>
              </TransactionController>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="BeforeJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    Select 
     DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255), DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  As [SQL_Execution],
                   SUM(total_logical_reads)  As [BufferGets],
                                 SUM(total_physical_reads)  As [Physical Reads],
                 SUM(total_worker_time) As [CPU Time Ms],
       SUM(total_elapsed_time)  As [Elapsed Time]
      From sys.dm_exec_query_stats AS qs
    CROSS APPLY(
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  From sys.dm_exec_plan_attributes(qs.plan_handle)
                  Where Attribute = N&apos;dbid&apos;) As F_DB
               
    Group BY DatabaseID
)
Select 

       [DatabaseID], [SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
       [Elapsed Time] 
                  From DB_CPU_Stats
Where DatabaseName = &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable"> SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;
String SQLStartTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());
//log.info(&quot;SQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLStartTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

log.info(&quot;Before SQlStats = &gt; &quot;+JMeterUtils.getProperty(&quot;SQlStats-JP&quot;));</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_DocViewNative" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">false</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;CreateObj&quot;,&quot;ManageFiles&quot;,&quot;ManageSignedFiles&quot;,&quot;CopyObj&quot;,&quot;CreateClassObj&quot;,&quot;CreateClassObjAndRel&quot;,&quot;CreateObjAndRel&quot;,&quot;CreateClassObjAndLoad&quot;,&quot;SDxCreateClassObjAndLoad&quot;,&quot;CreateWizardClassObj&quot;,&quot;CreateSignWizardClassObj&quot;,&quot;CreateObjectFromSelectedObjects&quot;,&quot;CreateSignObjectFromSelectedObjects&quot;,&quot;EditObj&quot;,&quot;EditWizardObj&quot;,&quot;EditSignWizardObj&quot;,&quot;ShowInbox&quot;,&quot;ReplaceFiles&quot;,&quot;CheckInFiles&quot;,&quot;TaskReassignmentConfiguration&quot;,&quot;SDARelationshipBuilder&quot;,&quot;CreateEntryPointFromQFind&quot;,&quot;AdminEntryPoints&quot;,&quot;ShowWorkflow&quot;,&quot;SDxWorkflowTemplateEditor&quot;,&quot;SDxCreateWorkflowTemplate&quot;,&quot;ListEditContextMenu&quot;,&quot;FTRSearch&quot;,&quot;AssignRecipients&quot;,&quot;Revise&quot;,&quot;UploadDocument&quot;,&quot;EditObjWithClassification&quot;,&quot;SDAManageDataTree&quot;,&quot;ShowInboxForObject&quot;,&quot;SDACopyDataBookContent&quot;,&quot;ConfigRoleAssignment&quot;,&quot;DashboardCreatePage&quot;,&quot;DashboardUpdatePage&quot;,&quot;InsertHistRev&quot;,&quot;CopyDistributionMatrix&quot;,&quot;MultiStepReAssign&quot;,&quot;AddRecipient&quot;,&quot;ExpandDocNestedStructure&quot;,&quot;ExpandFileNestedStructure&quot;,&quot;TabOutletManagement&quot;,&quot;CompareWorkflowTemplates&quot;,&quot;MaintainCalendar&quot;,&quot;EditObjModal&quot;,&quot;RegenerateMetadata&quot;,&quot;QueryEntity&quot;,&quot;ShareUrl&quot;,&quot;ShowObj&quot;,&quot;TerminateObj&quot;,&quot;DeleteObj&quot;,&quot;AttachWorkflow&quot;,&quot;CancelDocument&quot;,&quot;UnCancelDocument&quot;,&quot;ExecuteSavedReportFromObject&quot;,&quot;UndoEditFiles&quot;,&quot;EditFiles&quot;,&quot;XmtlCancel&quot;,&quot;XmtlUndoCancel&quot;,&quot;StepRejectAction&quot;,&quot;StepAcceptAction&quot;,&quot;StepClaim&quot;,&quot;SharepointCreateDocument&quot;,&quot;SharepointDownloadFile&quot;,&quot;SharepointViewNative&quot;,&quot;GenerateAlternateRendition&quot;,&quot;OpenXMLWordReport&quot;,&quot;SignOff&quot;,&quot;SignOffWithForm&quot;,&quot;UndoSignOff&quot;,&quot;SPFExchangeData&quot;,&quot;LaunchURLWithDynamicArgs&quot;,&quot;SDARelationshipBuilder&quot;,&quot;LaunchURLFromFeatureSet&quot;,&quot;WebClientExtensibility&quot;,&quot;GenerateMergedRendition&quot;,&quot;ListEditUncontrolledItems&quot;,&quot;WorkflowDetailsReport&quot;,&quot;ShareFile&quot;,&quot;CopyToLocalFile&quot;,&quot;GenerateMergedRenditionForFiles&quot;,&quot;PrintFile&quot;,&quot;UnlockUserAccount&quot;,&quot;StartScheduler&quot;,&quot;StopScheduler&quot;,&quot;SPFCopyConfigAccess&quot;,&quot;Dashboard&quot;,&quot;UpdateReferences&quot;,&quot;UpdateReferredBy&quot;,&quot;RelationshipManagement&quot;,&quot;GenerateThumbnail&quot;,&quot;EditFilesOnline&quot;,&quot;FinishEditOnline&quot;,&quot;FinishEditOnlineSignOff&quot;,&quot;UndoEditOnline&quot;,&quot;ViewOnline&quot;,&quot;GoToOneDrive&quot;,&quot;UpdateWidget&quot;,&quot;ReplaceEditableCopyWithMasterCopy&quot;,&quot;RequestForESign&quot;,&quot;CompleteESign&quot;,&quot;CompareDocuments&quot;,&quot;CreateWebGLSchedulerTask&quot;,&quot;SDACompareFiles&quot;,&quot;Navigate&quot;,&quot;ViewInDocument&quot;,&quot;SmartPlantReview&quot;,&quot;ViewBatchRenditionLog&quot;,&quot;ClearBravaCache&quot;,&quot;ViewInVisualReport&quot;,&quot;SCLBQualityAssuranceReviewDetails&quot;,&quot;SCLBManageQualityAssuranceReviewPlan&quot;,&quot;SCLBQualityAssuranceReview&quot;,&quot;SDAImpactAnalysis&quot;,&quot;ConflictResolution&quot;,&quot;SCLBCommunicationManagementDetails&quot;,&quot;SCLBCommunicationManagement&quot;,&quot;SOPSCommunicationManagementDetails&quot;,&quot;SOPSCommunicationManagement&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;SCLBQualityAssuranceRegister&quot;,&quot;SDAManageMarkupLayersForRendition&quot;,&quot;SOPSManageMarkupLayersForRendition&quot;,&quot;SDAImpactAnalysis&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;ConflictResolution&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;ProjectHandover&quot;,&quot;SDAShowMySDVJobs&quot;,&quot;SDxShowMySDVJobs&quot;,&quot;SDAApproveSDVJob&quot;,&quot;SDAViewSDVJobSummary&quot;,&quot;SDADeleteSDVJob&quot;,&quot;SDASDVDownloadValidationReport&quot;,&quot;LScanViewSite&quot;,&quot;LScanViewScan&quot;,&quot;LScanSynchronizeSiteData&quot;,&quot;LScanViewTagInScan&quot;,&quot;ViewConsolidatedDataForObject&quot;,&quot;ViewSharedData&quot;,&quot;CreateWorkAreaDefinition&quot;,&quot;EditWorkAreaDefinition&quot;,&quot;RunDanglingRelsReport&quot;,&quot;RegisterAuthoringTool&quot;,&quot;InconsistencyReportWithStartingObject&quot;,&quot;InconsistencyReportByQuery&quot;,&quot;InconsistencyReport&quot;,&quot;RegenerateCommonSchema&quot;,&quot;CancelChangeAction&quot;,&quot;SIOInconsistencyReportByQuery&quot;,&quot;RelateObjectsToWorkArea&quot;,&quot;ResolveDuplicateDocuments&quot;,&quot;SPFNContentExtraction&quot;,&quot;UnClaimObj&quot;,&quot;ClaimObj&quot;,&quot;MergeConfig&quot;,&quot;MergeObj&quot;,&quot;MergeStructure&quot;,&quot;CancelProject&quot;,&quot;ChangeConfigStatus&quot;,&quot;SyncObjects&quot;,&quot;SPXSAPSync&quot;,&quot;SDxConnSync&quot;,&quot;ExampleClientAPIRoute&quot;,&quot;HistoryViewRoute&quot;,&quot;ExampleClientAPIAction&quot;,&quot;ExampleClientAPIModal&quot;,&quot;HistoryViewModal&quot;,&quot;ExampleClientAPIWidget&quot;],&quot;ObjectObidAndDomains&quot;:[&quot;${TC020_ViewDocDeatils6IQY000A}&quot;]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">3752</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNativeFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC021_DocViewNative6IQY000A} ${TC021_DocViewNative6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC021_DocViewNative6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNativeFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC021_DocViewNative6IQY000A} ${TC021_DocViewNative6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC021_DocViewNative6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative&apos;6IQY000A&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNativeFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative&apos;6IQY000A&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC021_DocViewNative&apos;6IQY000A&apos;} ${TC021_DocViewNative&apos;6IQY000A&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC021_DocViewNative&apos;6IQY000A&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNativeFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC021_DocViewNative6IQY000A} ${TC021_DocViewNative6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC021_DocViewNative6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNativeFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC021_DocViewNative6IQY000A} ${TC021_DocViewNative6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC021_DocViewNative6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative000TSPA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Features[?(@.Name == &quot;SCLBQAReviewDetails&quot;)].MethodObid</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative000TSPA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..MethodObid</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC021_DocViewNative000TSPA} ${TC021_DocViewNative000TSPA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC021_DocViewNative000TSPA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY002A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;SCLBQAReviewDetails&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY002A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC021_DocViewNative6IQY002A} ${TC021_DocViewNative6IQY002A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC021_DocViewNative6IQY002A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative&apos;6IQY002A&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;SCLBQAReviewDetails&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative&apos;6IQY002A&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC021_DocViewNative&apos;6IQY002A&apos;} ${TC021_DocViewNative&apos;6IQY002A&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC021_DocViewNative&apos;6IQY002A&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetNavigationOptions" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;StartingObjectOBID&quot;:&quot;${TC013_SearchDocW3CharHSV6IQY000A}&quot;,&quot;RelLookAhead&quot;:true,&quot;EdgeLookAhead&quot;:true,&quot;IsInfoMap&quot;:false}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetNavigationOptions</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">92</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Transmittals&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC021_DocViewNative6IQY000A} ${TC021_DocViewNative6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC021_DocViewNative6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative&apos;6IQY000A&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Transmittals&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative&apos;6IQY000A&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC021_DocViewNative&apos;6IQY000A&apos;} ${TC021_DocViewNative&apos;6IQY000A&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC021_DocViewNative&apos;6IQY000A&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Transmittals&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC021_DocViewNative6IQY000A} ${TC021_DocViewNative6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC021_DocViewNative6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Transmittals&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC021_DocViewNative6IQY000A} ${TC021_DocViewNative6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC021_DocViewNative6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Transmittals&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC021_DocViewNative6IQY000A} ${TC021_DocViewNative6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC021_DocViewNative6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY002A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Areas&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY002A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC021_DocViewNative6IQY002A} ${TC021_DocViewNative6IQY002A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC021_DocViewNative6IQY002A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative&apos;6IQY002A&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Areas&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative&apos;6IQY002A&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC021_DocViewNative&apos;6IQY002A&apos;} ${TC021_DocViewNative&apos;6IQY002A&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC021_DocViewNative&apos;6IQY002A&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;CreateObj&quot;,&quot;ManageFiles&quot;,&quot;ManageSignedFiles&quot;,&quot;CopyObj&quot;,&quot;CreateClassObj&quot;,&quot;CreateClassObjAndRel&quot;,&quot;CreateObjAndRel&quot;,&quot;CreateClassObjAndLoad&quot;,&quot;SDxCreateClassObjAndLoad&quot;,&quot;CreateWizardClassObj&quot;,&quot;CreateSignWizardClassObj&quot;,&quot;CreateObjectFromSelectedObjects&quot;,&quot;CreateSignObjectFromSelectedObjects&quot;,&quot;EditObj&quot;,&quot;EditWizardObj&quot;,&quot;EditSignWizardObj&quot;,&quot;ShowInbox&quot;,&quot;ReplaceFiles&quot;,&quot;CheckInFiles&quot;,&quot;TaskReassignmentConfiguration&quot;,&quot;SDARelationshipBuilder&quot;,&quot;CreateEntryPointFromQFind&quot;,&quot;AdminEntryPoints&quot;,&quot;ShowWorkflow&quot;,&quot;SDxWorkflowTemplateEditor&quot;,&quot;SDxCreateWorkflowTemplate&quot;,&quot;ListEditContextMenu&quot;,&quot;FTRSearch&quot;,&quot;AssignRecipients&quot;,&quot;Revise&quot;,&quot;UploadDocument&quot;,&quot;EditObjWithClassification&quot;,&quot;SDAManageDataTree&quot;,&quot;ShowInboxForObject&quot;,&quot;SDACopyDataBookContent&quot;,&quot;ConfigRoleAssignment&quot;,&quot;DashboardCreatePage&quot;,&quot;DashboardUpdatePage&quot;,&quot;InsertHistRev&quot;,&quot;CopyDistributionMatrix&quot;,&quot;MultiStepReAssign&quot;,&quot;AddRecipient&quot;,&quot;ExpandDocNestedStructure&quot;,&quot;ExpandFileNestedStructure&quot;,&quot;TabOutletManagement&quot;,&quot;CompareWorkflowTemplates&quot;,&quot;MaintainCalendar&quot;,&quot;EditObjModal&quot;,&quot;RegenerateMetadata&quot;,&quot;QueryEntity&quot;,&quot;ShareUrl&quot;,&quot;ShowObj&quot;,&quot;TerminateObj&quot;,&quot;DeleteObj&quot;,&quot;AttachWorkflow&quot;,&quot;CancelDocument&quot;,&quot;UnCancelDocument&quot;,&quot;ExecuteSavedReportFromObject&quot;,&quot;UndoEditFiles&quot;,&quot;EditFiles&quot;,&quot;XmtlCancel&quot;,&quot;XmtlUndoCancel&quot;,&quot;StepRejectAction&quot;,&quot;StepAcceptAction&quot;,&quot;StepClaim&quot;,&quot;SharepointCreateDocument&quot;,&quot;SharepointDownloadFile&quot;,&quot;SharepointViewNative&quot;,&quot;GenerateAlternateRendition&quot;,&quot;OpenXMLWordReport&quot;,&quot;SignOff&quot;,&quot;SignOffWithForm&quot;,&quot;UndoSignOff&quot;,&quot;SPFExchangeData&quot;,&quot;LaunchURLWithDynamicArgs&quot;,&quot;SDARelationshipBuilder&quot;,&quot;LaunchURLFromFeatureSet&quot;,&quot;WebClientExtensibility&quot;,&quot;GenerateMergedRendition&quot;,&quot;ListEditUncontrolledItems&quot;,&quot;WorkflowDetailsReport&quot;,&quot;ShareFile&quot;,&quot;CopyToLocalFile&quot;,&quot;GenerateMergedRenditionForFiles&quot;,&quot;PrintFile&quot;,&quot;UnlockUserAccount&quot;,&quot;StartScheduler&quot;,&quot;StopScheduler&quot;,&quot;SPFCopyConfigAccess&quot;,&quot;Dashboard&quot;,&quot;UpdateReferences&quot;,&quot;UpdateReferredBy&quot;,&quot;RelationshipManagement&quot;,&quot;GenerateThumbnail&quot;,&quot;EditFilesOnline&quot;,&quot;FinishEditOnline&quot;,&quot;FinishEditOnlineSignOff&quot;,&quot;UndoEditOnline&quot;,&quot;ViewOnline&quot;,&quot;GoToOneDrive&quot;,&quot;UpdateWidget&quot;,&quot;ReplaceEditableCopyWithMasterCopy&quot;,&quot;RequestForESign&quot;,&quot;CompleteESign&quot;,&quot;CompareDocuments&quot;,&quot;CreateWebGLSchedulerTask&quot;,&quot;SDACompareFiles&quot;,&quot;Navigate&quot;,&quot;ViewInDocument&quot;,&quot;SmartPlantReview&quot;,&quot;ViewBatchRenditionLog&quot;,&quot;ClearBravaCache&quot;,&quot;ViewInVisualReport&quot;,&quot;SCLBQualityAssuranceReviewDetails&quot;,&quot;SCLBManageQualityAssuranceReviewPlan&quot;,&quot;SCLBQualityAssuranceReview&quot;,&quot;SDAImpactAnalysis&quot;,&quot;ConflictResolution&quot;,&quot;SCLBCommunicationManagementDetails&quot;,&quot;SCLBCommunicationManagement&quot;,&quot;SOPSCommunicationManagementDetails&quot;,&quot;SOPSCommunicationManagement&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;SCLBQualityAssuranceRegister&quot;,&quot;SDAManageMarkupLayersForRendition&quot;,&quot;SOPSManageMarkupLayersForRendition&quot;,&quot;SDAImpactAnalysis&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;ConflictResolution&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;ProjectHandover&quot;,&quot;SDAShowMySDVJobs&quot;,&quot;SDxShowMySDVJobs&quot;,&quot;SDAApproveSDVJob&quot;,&quot;SDAViewSDVJobSummary&quot;,&quot;SDADeleteSDVJob&quot;,&quot;SDASDVDownloadValidationReport&quot;,&quot;LScanViewSite&quot;,&quot;LScanViewScan&quot;,&quot;LScanSynchronizeSiteData&quot;,&quot;LScanViewTagInScan&quot;,&quot;ViewConsolidatedDataForObject&quot;,&quot;ViewSharedData&quot;,&quot;CreateWorkAreaDefinition&quot;,&quot;EditWorkAreaDefinition&quot;,&quot;RunDanglingRelsReport&quot;,&quot;RegisterAuthoringTool&quot;,&quot;InconsistencyReportWithStartingObject&quot;,&quot;InconsistencyReportByQuery&quot;,&quot;InconsistencyReport&quot;,&quot;RegenerateCommonSchema&quot;,&quot;CancelChangeAction&quot;,&quot;SIOInconsistencyReportByQuery&quot;,&quot;RelateObjectsToWorkArea&quot;,&quot;ResolveDuplicateDocuments&quot;,&quot;SPFNContentExtraction&quot;,&quot;UnClaimObj&quot;,&quot;ClaimObj&quot;,&quot;MergeConfig&quot;,&quot;MergeObj&quot;,&quot;MergeStructure&quot;,&quot;CancelProject&quot;,&quot;ChangeConfigStatus&quot;,&quot;SyncObjects&quot;,&quot;SPXSAPSync&quot;,&quot;SDxConnSync&quot;,&quot;ExampleClientAPIRoute&quot;,&quot;HistoryViewRoute&quot;,&quot;ExampleClientAPIAction&quot;,&quot;ExampleClientAPIModal&quot;,&quot;HistoryViewModal&quot;,&quot;ExampleClientAPIWidget&quot;],&quot;ObjectObidAndDomains&quot;:[&quot;${TC013_SearchDocW3CharHSV6IQY000A}&quot;]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">3752</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs[0]||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC021_DocViewNative6IQY000A} ${TC021_DocViewNative6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC021_DocViewNative6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC021_DocViewNative6IQY000A} ${TC021_DocViewNative6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC021_DocViewNative6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC021_DocViewNative6IQY000A} ${TC021_DocViewNative6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC021_DocViewNative6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC021_DocViewNative6IQY000A} ${TC021_DocViewNative6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC021_DocViewNative6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative&apos;6IQY000A&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative&apos;6IQY000A&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC021_DocViewNative&apos;6IQY000A&apos;} ${TC021_DocViewNative&apos;6IQY000A&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC021_DocViewNative&apos;6IQY000A&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY002A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ShowInboxForObject&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY002A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC021_DocViewNative6IQY002A} ${TC021_DocViewNative6IQY002A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC021_DocViewNative6IQY002A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative&apos;6IQY002A&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ShowInboxForObject&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative&apos;6IQY002A&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC021_DocViewNative&apos;6IQY002A&apos;} ${TC021_DocViewNative&apos;6IQY002A&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC021_DocViewNative&apos;6IQY002A&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/$batch" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">--batch_aed3ba30-8805-1438-5d34-18f771e58949&#xd;
Content-Type: application/http&#xd;
Content-Transfer-Encoding: binary&#xd;
&#xd;
GET https://${HostName}/${SPFServer}/api/v2/SDA/Objects?$filter=OBID eq &apos;${TC013_SearchDocW3CharHSV${TC013_SearchDocW3CharHSV&apos;6IQY000A&apos;}}&apos;&amp;$top=1 HTTP/1.1&#xd;
SPFConfigUID:${SPFConfigUID}&#xd;
SPFResolveDocumentsToVersion: false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/$batch</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">297</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">multipart/mixed;boundary=batch_aed3ba30-8805-1438-5d34-18f771e58949</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">SubmitalOBID</stringProp>
                      <stringProp name="RegexExtractor.regex">&quot;OBID&quot;:&quot;(.+?)&quot;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">Not FOUND</stringProp>
                      <stringProp name="RegexExtractor.match_number"> 1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetInterfacesForObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ObjectOBID&quot;:&quot;${TC013_SearchDocW3CharHSV6IQY000A}&quot;}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetInterfacesForObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">25</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/Objects" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$filter</stringProp>
                          <stringProp name="Argument.value">(OBID%20eq%20%27${TC021_DocViewNative6IQY000A}%27)</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$select" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$select</stringProp>
                          <stringProp name="Argument.value">OBID</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$top</stringProp>
                          <stringProp name="Argument.value">1000</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/Objects</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..OBID||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.OBID == &quot;6IQY000A&quot;)].OBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..OBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC021_DocViewNative6IQY000A} ${TC021_DocViewNative6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC021_DocViewNative6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.OBID == &quot;6IQY000A&quot;)].OBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..OBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC021_DocViewNative6IQY000A} ${TC021_DocViewNative6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC021_DocViewNative6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.OBID == &quot;6IQY000A&quot;)].OBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..OBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC021_DocViewNative6IQY000A} ${TC021_DocViewNative6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC021_DocViewNative6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/Objects(&apos;${TC021_DocViewNative&apos;6IQY000A&apos;}&apos;)/SPFFileComposition_21" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$filter</stringProp>
                          <stringProp name="Argument.value">SPFViewInd%20eq%20true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$top</stringProp>
                          <stringProp name="Argument.value">100</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$count</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/Objects(&apos;${TC021_DocViewNative&apos;6IQY000A&apos;}&apos;)/SPFFileComposition_21</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/Objects(&apos;${TC021_DocViewNative&apos;6IQY000A&apos;}&apos;)/SPFFileComposition_21" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$filter</stringProp>
                          <stringProp name="Argument.value">SPFViewInd%20eq%20true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$top</stringProp>
                          <stringProp name="Argument.value">1</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$count</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/Objects(&apos;${TC021_DocViewNative&apos;6IQY000A&apos;}&apos;)/SPFFileComposition_21</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json,application/vnd.intergraph.columnset.CS_CopyToLocalColumnSet+json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">prefer</stringProp>
                          <stringProp name="Header.value">odata.include-annotations=&quot;*&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/Files(&apos;${TC015_ClickonInfomapaDoc6ISG000A}&apos;)/Intergraph.SPF.Server.API.Model.RetrieveFileUris" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;purposes&quot;:[&quot;Primary&quot;],&quot;downloadFile&quot;:false}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/Files(&apos;6ISG000A&apos;)/Intergraph.SPF.Server.API.Model.RetrieveFileUris</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">45</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Uri" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">Uri </stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..Uri </stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFWC}/SDAClientServices/api/log/info" enabled="false">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&quot;File URIs retrieved for file INGRFile.&quot;</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFWC}/SDAClientServices/api/log/info</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">40</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFWC}/SDAClientServices/api/log/info" enabled="false">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&quot;Navigate: viewerOverride:NATIVE status:true&quot;</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFWC}/SDAClientServices/api/log/info</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">45</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;CreateObj&quot;,&quot;ManageFiles&quot;,&quot;ManageSignedFiles&quot;,&quot;CopyObj&quot;,&quot;CreateClassObj&quot;,&quot;CreateClassObjAndRel&quot;,&quot;CreateObjAndRel&quot;,&quot;CreateClassObjAndLoad&quot;,&quot;SDxCreateClassObjAndLoad&quot;,&quot;CreateWizardClassObj&quot;,&quot;CreateSignWizardClassObj&quot;,&quot;CreateObjectFromSelectedObjects&quot;,&quot;CreateSignObjectFromSelectedObjects&quot;,&quot;EditObj&quot;,&quot;EditWizardObj&quot;,&quot;EditSignWizardObj&quot;,&quot;ShowInbox&quot;,&quot;ReplaceFiles&quot;,&quot;CheckInFiles&quot;,&quot;TaskReassignmentConfiguration&quot;,&quot;SDARelationshipBuilder&quot;,&quot;CreateEntryPointFromQFind&quot;,&quot;AdminEntryPoints&quot;,&quot;ShowWorkflow&quot;,&quot;SDxWorkflowTemplateEditor&quot;,&quot;SDxCreateWorkflowTemplate&quot;,&quot;ListEditContextMenu&quot;,&quot;FTRSearch&quot;,&quot;AssignRecipients&quot;,&quot;Revise&quot;,&quot;UploadDocument&quot;,&quot;EditObjWithClassification&quot;,&quot;SDAManageDataTree&quot;,&quot;ShowInboxForObject&quot;,&quot;SDACopyDataBookContent&quot;,&quot;ConfigRoleAssignment&quot;,&quot;DashboardCreatePage&quot;,&quot;DashboardUpdatePage&quot;,&quot;InsertHistRev&quot;,&quot;CopyDistributionMatrix&quot;,&quot;MultiStepReAssign&quot;,&quot;AddRecipient&quot;,&quot;ExpandDocNestedStructure&quot;,&quot;ExpandFileNestedStructure&quot;,&quot;TabOutletManagement&quot;,&quot;CompareWorkflowTemplates&quot;,&quot;MaintainCalendar&quot;,&quot;EditObjModal&quot;,&quot;RegenerateMetadata&quot;,&quot;QueryEntity&quot;,&quot;ShareUrl&quot;,&quot;ShowObj&quot;,&quot;TerminateObj&quot;,&quot;DeleteObj&quot;,&quot;AttachWorkflow&quot;,&quot;CancelDocument&quot;,&quot;UnCancelDocument&quot;,&quot;ExecuteSavedReportFromObject&quot;,&quot;UndoEditFiles&quot;,&quot;EditFiles&quot;,&quot;XmtlCancel&quot;,&quot;XmtlUndoCancel&quot;,&quot;StepRejectAction&quot;,&quot;StepAcceptAction&quot;,&quot;StepClaim&quot;,&quot;SharepointCreateDocument&quot;,&quot;SharepointDownloadFile&quot;,&quot;SharepointViewNative&quot;,&quot;GenerateAlternateRendition&quot;,&quot;OpenXMLWordReport&quot;,&quot;SignOff&quot;,&quot;SignOffWithForm&quot;,&quot;UndoSignOff&quot;,&quot;SPFExchangeData&quot;,&quot;LaunchURLWithDynamicArgs&quot;,&quot;SDARelationshipBuilder&quot;,&quot;LaunchURLFromFeatureSet&quot;,&quot;WebClientExtensibility&quot;,&quot;GenerateMergedRendition&quot;,&quot;ListEditUncontrolledItems&quot;,&quot;WorkflowDetailsReport&quot;,&quot;ShareFile&quot;,&quot;CopyToLocalFile&quot;,&quot;GenerateMergedRenditionForFiles&quot;,&quot;PrintFile&quot;,&quot;UnlockUserAccount&quot;,&quot;StartScheduler&quot;,&quot;StopScheduler&quot;,&quot;SPFCopyConfigAccess&quot;,&quot;Dashboard&quot;,&quot;UpdateReferences&quot;,&quot;UpdateReferredBy&quot;,&quot;RelationshipManagement&quot;,&quot;GenerateThumbnail&quot;,&quot;EditFilesOnline&quot;,&quot;FinishEditOnline&quot;,&quot;FinishEditOnlineSignOff&quot;,&quot;UndoEditOnline&quot;,&quot;ViewOnline&quot;,&quot;GoToOneDrive&quot;,&quot;UpdateWidget&quot;,&quot;ReplaceEditableCopyWithMasterCopy&quot;,&quot;RequestForESign&quot;,&quot;CompleteESign&quot;,&quot;CompareDocuments&quot;,&quot;CreateWebGLSchedulerTask&quot;,&quot;SDACompareFiles&quot;,&quot;Navigate&quot;,&quot;ViewInDocument&quot;,&quot;SmartPlantReview&quot;,&quot;ViewBatchRenditionLog&quot;,&quot;ClearBravaCache&quot;,&quot;ViewInVisualReport&quot;,&quot;SCLBQualityAssuranceReviewDetails&quot;,&quot;SCLBManageQualityAssuranceReviewPlan&quot;,&quot;SCLBQualityAssuranceReview&quot;,&quot;SDAImpactAnalysis&quot;,&quot;ConflictResolution&quot;,&quot;SCLBCommunicationManagementDetails&quot;,&quot;SCLBCommunicationManagement&quot;,&quot;SOPSCommunicationManagementDetails&quot;,&quot;SOPSCommunicationManagement&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;SCLBQualityAssuranceRegister&quot;,&quot;SDAManageMarkupLayersForRendition&quot;,&quot;SOPSManageMarkupLayersForRendition&quot;,&quot;SDAImpactAnalysis&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;ConflictResolution&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;ProjectHandover&quot;,&quot;SDAShowMySDVJobs&quot;,&quot;SDxShowMySDVJobs&quot;,&quot;SDAApproveSDVJob&quot;,&quot;SDAViewSDVJobSummary&quot;,&quot;SDADeleteSDVJob&quot;,&quot;SDASDVDownloadValidationReport&quot;,&quot;LScanViewSite&quot;,&quot;LScanViewScan&quot;,&quot;LScanSynchronizeSiteData&quot;,&quot;LScanViewTagInScan&quot;,&quot;ViewConsolidatedDataForObject&quot;,&quot;ViewSharedData&quot;,&quot;CreateWorkAreaDefinition&quot;,&quot;EditWorkAreaDefinition&quot;,&quot;RunDanglingRelsReport&quot;,&quot;RegisterAuthoringTool&quot;,&quot;InconsistencyReportWithStartingObject&quot;,&quot;InconsistencyReportByQuery&quot;,&quot;InconsistencyReport&quot;,&quot;RegenerateCommonSchema&quot;,&quot;CancelChangeAction&quot;,&quot;SIOInconsistencyReportByQuery&quot;,&quot;RelateObjectsToWorkArea&quot;,&quot;ResolveDuplicateDocuments&quot;,&quot;SPFNContentExtraction&quot;,&quot;UnClaimObj&quot;,&quot;ClaimObj&quot;,&quot;MergeConfig&quot;,&quot;MergeObj&quot;,&quot;MergeStructure&quot;,&quot;CancelProject&quot;,&quot;ChangeConfigStatus&quot;,&quot;SyncObjects&quot;,&quot;SPXSAPSync&quot;,&quot;SDxConnSync&quot;,&quot;ExampleClientAPIRoute&quot;,&quot;HistoryViewRoute&quot;,&quot;ExampleClientAPIAction&quot;,&quot;ExampleClientAPIModal&quot;,&quot;HistoryViewModal&quot;,&quot;ExampleClientAPIWidget&quot;],&quot;ObjectObidAndDomains&quot;:[&quot;${TC020_ViewDocDeatils6IQZ08CA}&quot;]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">3752</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQZ08CA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC021_DocViewNative6IQZ08CA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC021_DocViewNative6IQZ08CA} ${TC021_DocViewNative6IQZ08CA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC021_DocViewNative6IQZ08CA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="AfterJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    SELECT
               DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255),DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  AS [SQL_Execution],
                   SUM(total_logical_reads)  AS [BufferGets],
                                 SUM(total_physical_reads)  AS [Physical Reads],
                 SUM(total_worker_time) AS [CPU Time Ms],
       SUM(total_elapsed_time)  AS [Elapsed Time]
      FROM sys.dm_exec_query_stats AS qs
    CROSS APPLY (
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  FROM sys.dm_exec_plan_attributes(qs.plan_handle)
                 WHERE attribute = N&apos;dbid&apos;) AS F_DB
               
    GROUP BY DatabaseID

)
SELECT 
       
                  [DatabaseID],[SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
                  [Elapsed Time] 
                  FROM DB_CPU_Stats
where DatabaseName= &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable">SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;

String TransName=&quot;DocViewNative&quot;;
String SQLStartTime = JMeterUtils.getProperty(&quot;SQLStartTime-JP&quot;);
String SQLEndTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());

log.info(&quot;aSQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
//int DatabaseID = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;);
//log.info(&quot;DatabaseID = &gt; &quot;+DatabaseID);
//log.info(&quot;SQLStartTime = &gt; &quot;+SQLStartTime);
//log.info(&quot;SQLEndTime = &gt; &quot;+SQLEndTime);
Long aSQL_Execution = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;SQL_Execution&quot;);
//log.info(&quot;aSQL_Execution = &gt; &quot;+aSQL_Execution);

Long aBufferGets = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;BufferGets&quot;);
//log.info(&quot;aBufferGets = &gt; &quot;+aBufferGets);
Long aPhysicalReads = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Physical Reads&quot;);
//log.info(&quot;aPhysicalReads = &gt; &quot;+aPhysicalReads);
Long aCPUTimeMs = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;CPU Time Ms&quot;);
//log.info(&quot;aCPUTimeMs = &gt; &quot;+aCPUTimeMs);
Long aElapsedTime = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Elapsed Time&quot;);
//log.info(&quot;aElapsedTime = &gt; &quot;+aElapsedTime);

String BSQlStats = JMeterUtils.getProperty(&quot;SQlStats-JP&quot;);
//log.info(&quot;BSQlStats = &gt; &quot;+BSQlStats);

Long bSQL_Execution = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;SQL_Execution=&quot;)+14, BSQlStats.indexOf(&quot;, BufferGets=&quot;)));
//log.info(&quot;bSQL_Execution = &gt; &quot;+bSQL_Execution);

//Long.parseLong
Long bBufferGets = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11, BSQlStats.indexOf(&quot;}&quot;)));
//int bBufferGets = Integer.parseInt(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11,BSQlStats.indexOf(&quot;}&quot;)));
//log.info(&quot;bBufferGets = &gt; &quot;+bBufferGets);

Long bPhysicalReads = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Physical Reads=&quot;)+15, BSQlStats.indexOf(&quot;, DatabaseID&quot;)));
//log.info(&quot;bPhysicalReads = &gt; &quot;+bPhysicalReads);

Long bCPUTimeMs = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;CPU Time Ms=&quot;)+12, BSQlStats.indexOf(&quot;, Elapsed Time&quot;)));
//log.info(&quot;bCPUTimeMs = &gt; &quot;+bCPUTimeMs);

Long bElapsedTime = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Elapsed Time=&quot;)+13, BSQlStats.indexOf(&quot;, SQL_Execution&quot;)));
//log.info(&quot;bElapsedTime = &gt; &quot;+bElapsedTime);

//log.info(&quot;SQL_Execution = &gt; &quot;+(aSQL_Execution-bSQL_Execution));
//log.info(&quot;BufferGets = &gt; &quot;+(aBufferGets-bBufferGets));
//log.info(&quot;PhysicalReads = &gt; &quot;+(aPhysicalReads-bPhysicalReads));
//log.info(&quot;CPUTimeMs = &gt; &quot;+(aCPUTimeMs-bCPUTimeMs));
//log.info(&quot;ElapsedTime = &gt; &quot;+(aElapsedTime-bElapsedTime));
log.info(&quot;===================================================&quot;);
String Perfcsv = TransName +&quot;,&quot;+String.valueOf(vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;))+&quot;,&quot;+SQLStartTime+&quot;,&quot;+SQLEndTime+&quot;,&quot;+String.valueOf(aSQL_Execution-bSQL_Execution)+&quot;,&quot;+String.valueOf(aBufferGets-bBufferGets)+&quot;,&quot;+String.valueOf(aPhysicalReads-bPhysicalReads)+&quot;,&quot;+String.valueOf(aCPUTimeMs-bCPUTimeMs)+&quot;,&quot;+String.valueOf(aElapsedTime-bElapsedTime);

log.info(&quot;Perfcsv = &gt;&quot;+Perfcsv);
log.info(&quot;===================================================&quot;);
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLEndTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

String PerfCSVFile = vars.get(&quot;OutputPath&quot;) + vars.get(&quot;OutputFolderName&quot;) +&quot;perf.csv&quot;;
FileWriter fstream = new FileWriter(PerfCSVFile,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(Perfcsv);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="23" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">false</boolProp>
              </TransactionController>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="BeforeJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    Select 
     DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255), DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  As [SQL_Execution],
                   SUM(total_logical_reads)  As [BufferGets],
                                 SUM(total_physical_reads)  As [Physical Reads],
                 SUM(total_worker_time) As [CPU Time Ms],
       SUM(total_elapsed_time)  As [Elapsed Time]
      From sys.dm_exec_query_stats AS qs
    CROSS APPLY(
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  From sys.dm_exec_plan_attributes(qs.plan_handle)
                  Where Attribute = N&apos;dbid&apos;) As F_DB
               
    Group BY DatabaseID
)
Select 

       [DatabaseID], [SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
       [Elapsed Time] 
                  From DB_CPU_Stats
Where DatabaseName = &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable"> SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;
String SQLStartTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());
//log.info(&quot;SQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLStartTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

log.info(&quot;Before SQlStats = &gt; &quot;+JMeterUtils.getProperty(&quot;SQlStats-JP&quot;));</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_OpenQAReviewDeatils" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">false</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;CreateObj&quot;,&quot;ManageFiles&quot;,&quot;ManageSignedFiles&quot;,&quot;CopyObj&quot;,&quot;CreateClassObj&quot;,&quot;CreateClassObjAndRel&quot;,&quot;CreateObjAndRel&quot;,&quot;CreateClassObjAndLoad&quot;,&quot;SDxCreateClassObjAndLoad&quot;,&quot;CreateWizardClassObj&quot;,&quot;CreateSignWizardClassObj&quot;,&quot;CreateObjectFromSelectedObjects&quot;,&quot;CreateSignObjectFromSelectedObjects&quot;,&quot;EditObj&quot;,&quot;EditWizardObj&quot;,&quot;EditSignWizardObj&quot;,&quot;ShowInbox&quot;,&quot;ReplaceFiles&quot;,&quot;CheckInFiles&quot;,&quot;TaskReassignmentConfiguration&quot;,&quot;SDARelationshipBuilder&quot;,&quot;CreateEntryPointFromQFind&quot;,&quot;AdminEntryPoints&quot;,&quot;ShowWorkflow&quot;,&quot;SDxWorkflowTemplateEditor&quot;,&quot;SDxCreateWorkflowTemplate&quot;,&quot;ListEditContextMenu&quot;,&quot;FTRSearch&quot;,&quot;AssignRecipients&quot;,&quot;Revise&quot;,&quot;UploadDocument&quot;,&quot;EditObjWithClassification&quot;,&quot;SDAManageDataTree&quot;,&quot;ShowInboxForObject&quot;,&quot;SDACopyDataBookContent&quot;,&quot;ConfigRoleAssignment&quot;,&quot;DashboardCreatePage&quot;,&quot;DashboardUpdatePage&quot;,&quot;InsertHistRev&quot;,&quot;CopyDistributionMatrix&quot;,&quot;MultiStepReAssign&quot;,&quot;AddRecipient&quot;,&quot;ExpandDocNestedStructure&quot;,&quot;ExpandFileNestedStructure&quot;,&quot;TabOutletManagement&quot;,&quot;CompareWorkflowTemplates&quot;,&quot;MaintainCalendar&quot;,&quot;EditObjModal&quot;,&quot;RegenerateMetadata&quot;,&quot;QueryEntity&quot;,&quot;ShareUrl&quot;,&quot;ShowObj&quot;,&quot;TerminateObj&quot;,&quot;DeleteObj&quot;,&quot;AttachWorkflow&quot;,&quot;CancelDocument&quot;,&quot;UnCancelDocument&quot;,&quot;ExecuteSavedReportFromObject&quot;,&quot;UndoEditFiles&quot;,&quot;EditFiles&quot;,&quot;XmtlCancel&quot;,&quot;XmtlUndoCancel&quot;,&quot;StepRejectAction&quot;,&quot;StepAcceptAction&quot;,&quot;StepClaim&quot;,&quot;SharepointCreateDocument&quot;,&quot;SharepointDownloadFile&quot;,&quot;SharepointViewNative&quot;,&quot;GenerateAlternateRendition&quot;,&quot;OpenXMLWordReport&quot;,&quot;SignOff&quot;,&quot;SignOffWithForm&quot;,&quot;UndoSignOff&quot;,&quot;SPFExchangeData&quot;,&quot;LaunchURLWithDynamicArgs&quot;,&quot;SDARelationshipBuilder&quot;,&quot;LaunchURLFromFeatureSet&quot;,&quot;WebClientExtensibility&quot;,&quot;GenerateMergedRendition&quot;,&quot;ListEditUncontrolledItems&quot;,&quot;WorkflowDetailsReport&quot;,&quot;ShareFile&quot;,&quot;CopyToLocalFile&quot;,&quot;GenerateMergedRenditionForFiles&quot;,&quot;PrintFile&quot;,&quot;UnlockUserAccount&quot;,&quot;StartScheduler&quot;,&quot;StopScheduler&quot;,&quot;SPFCopyConfigAccess&quot;,&quot;Dashboard&quot;,&quot;UpdateReferences&quot;,&quot;UpdateReferredBy&quot;,&quot;RelationshipManagement&quot;,&quot;GenerateThumbnail&quot;,&quot;EditFilesOnline&quot;,&quot;FinishEditOnline&quot;,&quot;FinishEditOnlineSignOff&quot;,&quot;UndoEditOnline&quot;,&quot;ViewOnline&quot;,&quot;GoToOneDrive&quot;,&quot;UpdateWidget&quot;,&quot;ReplaceEditableCopyWithMasterCopy&quot;,&quot;RequestForESign&quot;,&quot;CompleteESign&quot;,&quot;CompareDocuments&quot;,&quot;CreateWebGLSchedulerTask&quot;,&quot;SDACompareFiles&quot;,&quot;Navigate&quot;,&quot;ViewInDocument&quot;,&quot;SmartPlantReview&quot;,&quot;ViewBatchRenditionLog&quot;,&quot;ClearBravaCache&quot;,&quot;ViewInVisualReport&quot;,&quot;SCLBQualityAssuranceReviewDetails&quot;,&quot;SCLBManageQualityAssuranceReviewPlan&quot;,&quot;SCLBQualityAssuranceReview&quot;,&quot;SDAImpactAnalysis&quot;,&quot;ConflictResolution&quot;,&quot;SCLBCommunicationManagementDetails&quot;,&quot;SCLBCommunicationManagement&quot;,&quot;SOPSCommunicationManagementDetails&quot;,&quot;SOPSCommunicationManagement&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;SCLBQualityAssuranceRegister&quot;,&quot;SDAManageMarkupLayersForRendition&quot;,&quot;SOPSManageMarkupLayersForRendition&quot;,&quot;SDAImpactAnalysis&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;ConflictResolution&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;ProjectHandover&quot;,&quot;SDAShowMySDVJobs&quot;,&quot;SDxShowMySDVJobs&quot;,&quot;SDAApproveSDVJob&quot;,&quot;SDAViewSDVJobSummary&quot;,&quot;SDADeleteSDVJob&quot;,&quot;SDASDVDownloadValidationReport&quot;,&quot;LScanViewSite&quot;,&quot;LScanViewScan&quot;,&quot;LScanSynchronizeSiteData&quot;,&quot;LScanViewTagInScan&quot;,&quot;ViewConsolidatedDataForObject&quot;,&quot;ViewSharedData&quot;,&quot;CreateWorkAreaDefinition&quot;,&quot;EditWorkAreaDefinition&quot;,&quot;RunDanglingRelsReport&quot;,&quot;RegisterAuthoringTool&quot;,&quot;InconsistencyReportWithStartingObject&quot;,&quot;InconsistencyReportByQuery&quot;,&quot;InconsistencyReport&quot;,&quot;RegenerateCommonSchema&quot;,&quot;CancelChangeAction&quot;,&quot;SIOInconsistencyReportByQuery&quot;,&quot;RelateObjectsToWorkArea&quot;,&quot;ResolveDuplicateDocuments&quot;,&quot;SPFNContentExtraction&quot;,&quot;UnClaimObj&quot;,&quot;ClaimObj&quot;,&quot;MergeConfig&quot;,&quot;MergeObj&quot;,&quot;MergeStructure&quot;,&quot;CancelProject&quot;,&quot;ChangeConfigStatus&quot;,&quot;SyncObjects&quot;,&quot;SPXSAPSync&quot;,&quot;SDxConnSync&quot;,&quot;ExampleClientAPIRoute&quot;,&quot;HistoryViewRoute&quot;,&quot;ExampleClientAPIAction&quot;,&quot;ExampleClientAPIModal&quot;,&quot;HistoryViewModal&quot;,&quot;ExampleClientAPIWidget&quot;],&quot;ObjectObidAndDomains&quot;:[&quot;${TC021_DocViewNative6IQY000A}&quot;]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetFeatureSetsByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">3752</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNativeFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils6IQY000A} ${TC022_OpenQAReviewDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNativeFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils6IQY000A} ${TC022_OpenQAReviewDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils&apos;6IQY000A&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNativeFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils&apos;6IQY000A&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils&apos;6IQY000A&apos;} ${TC022_OpenQAReviewDeatils&apos;6IQY000A&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils&apos;6IQY000A&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNativeFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils6IQY000A} ${TC022_OpenQAReviewDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNativeFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils6IQY000A} ${TC022_OpenQAReviewDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils000TSPA</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..Features[?(@.Name == &quot;SCLBQAReviewDetails&quot;)].MethodObid</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils000TSPA-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..MethodObid</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils000TSPA} ${TC022_OpenQAReviewDeatils000TSPA-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils000TSPA&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY002A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;SCLBQAReviewDetails&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY002A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils6IQY002A} ${TC022_OpenQAReviewDeatils6IQY002A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils6IQY002A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils&apos;6IQY002A&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;SCLBQAReviewDetails&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils&apos;6IQY002A&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils&apos;6IQY002A&apos;} ${TC022_OpenQAReviewDeatils&apos;6IQY002A&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils&apos;6IQY002A&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetNavigationOptions" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;StartingObjectOBID&quot;:&quot;${TC013_SearchDocW3CharHSV6IQY000A}&quot;,&quot;RelLookAhead&quot;:true,&quot;EdgeLookAhead&quot;:true,&quot;IsInfoMap&quot;:false}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetNavigationOptions</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">92</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Transmittals&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils6IQY000A} ${TC022_OpenQAReviewDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils&apos;6IQY000A&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Transmittals&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils&apos;6IQY000A&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils&apos;6IQY000A&apos;} ${TC022_OpenQAReviewDeatils&apos;6IQY000A&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils&apos;6IQY000A&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Transmittals&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils6IQY000A} ${TC022_OpenQAReviewDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Transmittals&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils6IQY000A} ${TC022_OpenQAReviewDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Transmittals&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils6IQY000A} ${TC022_OpenQAReviewDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY002A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Areas&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY002A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils6IQY002A} ${TC022_OpenQAReviewDeatils6IQY002A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils6IQY002A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils&apos;6IQY002A&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value.[?(@.DisplayName == &quot;Areas&quot;)].StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils&apos;6IQY002A&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..StartingOBID</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils&apos;6IQY002A&apos;} ${TC022_OpenQAReviewDeatils&apos;6IQY002A&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils&apos;6IQY002A&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;CreateObj&quot;,&quot;ManageFiles&quot;,&quot;ManageSignedFiles&quot;,&quot;CopyObj&quot;,&quot;CreateClassObj&quot;,&quot;CreateClassObjAndRel&quot;,&quot;CreateObjAndRel&quot;,&quot;CreateClassObjAndLoad&quot;,&quot;SDxCreateClassObjAndLoad&quot;,&quot;CreateWizardClassObj&quot;,&quot;CreateSignWizardClassObj&quot;,&quot;CreateObjectFromSelectedObjects&quot;,&quot;CreateSignObjectFromSelectedObjects&quot;,&quot;EditObj&quot;,&quot;EditWizardObj&quot;,&quot;EditSignWizardObj&quot;,&quot;ShowInbox&quot;,&quot;ReplaceFiles&quot;,&quot;CheckInFiles&quot;,&quot;TaskReassignmentConfiguration&quot;,&quot;SDARelationshipBuilder&quot;,&quot;CreateEntryPointFromQFind&quot;,&quot;AdminEntryPoints&quot;,&quot;ShowWorkflow&quot;,&quot;SDxWorkflowTemplateEditor&quot;,&quot;SDxCreateWorkflowTemplate&quot;,&quot;ListEditContextMenu&quot;,&quot;FTRSearch&quot;,&quot;AssignRecipients&quot;,&quot;Revise&quot;,&quot;UploadDocument&quot;,&quot;EditObjWithClassification&quot;,&quot;SDAManageDataTree&quot;,&quot;ShowInboxForObject&quot;,&quot;SDACopyDataBookContent&quot;,&quot;ConfigRoleAssignment&quot;,&quot;DashboardCreatePage&quot;,&quot;DashboardUpdatePage&quot;,&quot;InsertHistRev&quot;,&quot;CopyDistributionMatrix&quot;,&quot;MultiStepReAssign&quot;,&quot;AddRecipient&quot;,&quot;ExpandDocNestedStructure&quot;,&quot;ExpandFileNestedStructure&quot;,&quot;TabOutletManagement&quot;,&quot;CompareWorkflowTemplates&quot;,&quot;MaintainCalendar&quot;,&quot;EditObjModal&quot;,&quot;RegenerateMetadata&quot;,&quot;QueryEntity&quot;,&quot;ShareUrl&quot;,&quot;ShowObj&quot;,&quot;TerminateObj&quot;,&quot;DeleteObj&quot;,&quot;AttachWorkflow&quot;,&quot;CancelDocument&quot;,&quot;UnCancelDocument&quot;,&quot;ExecuteSavedReportFromObject&quot;,&quot;UndoEditFiles&quot;,&quot;EditFiles&quot;,&quot;XmtlCancel&quot;,&quot;XmtlUndoCancel&quot;,&quot;StepRejectAction&quot;,&quot;StepAcceptAction&quot;,&quot;StepClaim&quot;,&quot;SharepointCreateDocument&quot;,&quot;SharepointDownloadFile&quot;,&quot;SharepointViewNative&quot;,&quot;GenerateAlternateRendition&quot;,&quot;OpenXMLWordReport&quot;,&quot;SignOff&quot;,&quot;SignOffWithForm&quot;,&quot;UndoSignOff&quot;,&quot;SPFExchangeData&quot;,&quot;LaunchURLWithDynamicArgs&quot;,&quot;SDARelationshipBuilder&quot;,&quot;LaunchURLFromFeatureSet&quot;,&quot;WebClientExtensibility&quot;,&quot;GenerateMergedRendition&quot;,&quot;ListEditUncontrolledItems&quot;,&quot;WorkflowDetailsReport&quot;,&quot;ShareFile&quot;,&quot;CopyToLocalFile&quot;,&quot;GenerateMergedRenditionForFiles&quot;,&quot;PrintFile&quot;,&quot;UnlockUserAccount&quot;,&quot;StartScheduler&quot;,&quot;StopScheduler&quot;,&quot;SPFCopyConfigAccess&quot;,&quot;Dashboard&quot;,&quot;UpdateReferences&quot;,&quot;UpdateReferredBy&quot;,&quot;RelationshipManagement&quot;,&quot;GenerateThumbnail&quot;,&quot;EditFilesOnline&quot;,&quot;FinishEditOnline&quot;,&quot;FinishEditOnlineSignOff&quot;,&quot;UndoEditOnline&quot;,&quot;ViewOnline&quot;,&quot;GoToOneDrive&quot;,&quot;UpdateWidget&quot;,&quot;ReplaceEditableCopyWithMasterCopy&quot;,&quot;RequestForESign&quot;,&quot;CompleteESign&quot;,&quot;CompareDocuments&quot;,&quot;CreateWebGLSchedulerTask&quot;,&quot;SDACompareFiles&quot;,&quot;Navigate&quot;,&quot;ViewInDocument&quot;,&quot;SmartPlantReview&quot;,&quot;ViewBatchRenditionLog&quot;,&quot;ClearBravaCache&quot;,&quot;ViewInVisualReport&quot;,&quot;SCLBQualityAssuranceReviewDetails&quot;,&quot;SCLBManageQualityAssuranceReviewPlan&quot;,&quot;SCLBQualityAssuranceReview&quot;,&quot;SDAImpactAnalysis&quot;,&quot;ConflictResolution&quot;,&quot;SCLBCommunicationManagementDetails&quot;,&quot;SCLBCommunicationManagement&quot;,&quot;SOPSCommunicationManagementDetails&quot;,&quot;SOPSCommunicationManagement&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;SCLBQualityAssuranceRegister&quot;,&quot;SDAManageMarkupLayersForRendition&quot;,&quot;SOPSManageMarkupLayersForRendition&quot;,&quot;SDAImpactAnalysis&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;ConflictResolution&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;ProjectHandover&quot;,&quot;SDAShowMySDVJobs&quot;,&quot;SDxShowMySDVJobs&quot;,&quot;SDAApproveSDVJob&quot;,&quot;SDAViewSDVJobSummary&quot;,&quot;SDADeleteSDVJob&quot;,&quot;SDASDVDownloadValidationReport&quot;,&quot;LScanViewSite&quot;,&quot;LScanViewScan&quot;,&quot;LScanSynchronizeSiteData&quot;,&quot;LScanViewTagInScan&quot;,&quot;ViewConsolidatedDataForObject&quot;,&quot;ViewSharedData&quot;,&quot;CreateWorkAreaDefinition&quot;,&quot;EditWorkAreaDefinition&quot;,&quot;RunDanglingRelsReport&quot;,&quot;RegisterAuthoringTool&quot;,&quot;InconsistencyReportWithStartingObject&quot;,&quot;InconsistencyReportByQuery&quot;,&quot;InconsistencyReport&quot;,&quot;RegenerateCommonSchema&quot;,&quot;CancelChangeAction&quot;,&quot;SIOInconsistencyReportByQuery&quot;,&quot;RelateObjectsToWorkArea&quot;,&quot;ResolveDuplicateDocuments&quot;,&quot;SPFNContentExtraction&quot;,&quot;UnClaimObj&quot;,&quot;ClaimObj&quot;,&quot;MergeConfig&quot;,&quot;MergeObj&quot;,&quot;MergeStructure&quot;,&quot;CancelProject&quot;,&quot;ChangeConfigStatus&quot;,&quot;SyncObjects&quot;,&quot;SPXSAPSync&quot;,&quot;SDxConnSync&quot;,&quot;ExampleClientAPIRoute&quot;,&quot;HistoryViewRoute&quot;,&quot;ExampleClientAPIAction&quot;,&quot;ExampleClientAPIModal&quot;,&quot;HistoryViewModal&quot;,&quot;ExampleClientAPIWidget&quot;],&quot;ObjectObidAndDomains&quot;:[&quot;${TC013_SearchDocW3CharHSV6IQY000A}&quot;]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">3752</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs[0]||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils6IQY000A} ${TC022_OpenQAReviewDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils6IQY000A} ${TC022_OpenQAReviewDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils6IQY000A} ${TC022_OpenQAReviewDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils6IQY000A} ${TC022_OpenQAReviewDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils&apos;6IQY000A&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils&apos;6IQY000A&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils&apos;6IQY000A&apos;} ${TC022_OpenQAReviewDeatils&apos;6IQY000A&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils&apos;6IQY000A&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY002A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ShowInboxForObject&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY002A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils6IQY002A} ${TC022_OpenQAReviewDeatils6IQY002A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils6IQY002A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils&apos;6IQY002A&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ShowInboxForObject&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils&apos;6IQY002A&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils&apos;6IQY002A&apos;} ${TC022_OpenQAReviewDeatils&apos;6IQY002A&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils&apos;6IQY002A&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.ValidateMethodAccess" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApi&quot;:&quot;SCLBQualityAssuranceReviewDetails&quot;,&quot;MethodObid&quot;:&quot;${TC021_DocViewNative000TSPA}&quot;,&quot;ObjectObidAndDomains&quot;:[&quot;${TC014_FilterDocsByContract6IQY002A}&quot;]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.ValidateMethodAccess</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">108</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject" enabled="false">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;CreateObj&quot;,&quot;ManageFiles&quot;,&quot;ManageSignedFiles&quot;,&quot;CopyObj&quot;,&quot;CreateClassObj&quot;,&quot;CreateClassObjAndRel&quot;,&quot;CreateObjAndRel&quot;,&quot;CreateClassObjAndLoad&quot;,&quot;SDxCreateClassObjAndLoad&quot;,&quot;CreateWizardClassObj&quot;,&quot;CreateSignWizardClassObj&quot;,&quot;CreateObjectFromSelectedObjects&quot;,&quot;CreateSignObjectFromSelectedObjects&quot;,&quot;EditObj&quot;,&quot;EditWizardObj&quot;,&quot;EditSignWizardObj&quot;,&quot;ShowInbox&quot;,&quot;ReplaceFiles&quot;,&quot;CheckInFiles&quot;,&quot;TaskReassignmentConfiguration&quot;,&quot;SDARelationshipBuilder&quot;,&quot;CreateEntryPointFromQFind&quot;,&quot;AdminEntryPoints&quot;,&quot;ShowWorkflow&quot;,&quot;SDxWorkflowTemplateEditor&quot;,&quot;SDxCreateWorkflowTemplate&quot;,&quot;ListEditContextMenu&quot;,&quot;FTRSearch&quot;,&quot;AssignRecipients&quot;,&quot;Revise&quot;,&quot;UploadDocument&quot;,&quot;EditObjWithClassification&quot;,&quot;SDAManageDataTree&quot;,&quot;ShowInboxForObject&quot;,&quot;SDACopyDataBookContent&quot;,&quot;ConfigRoleAssignment&quot;,&quot;DashboardCreatePage&quot;,&quot;DashboardUpdatePage&quot;,&quot;InsertHistRev&quot;,&quot;CopyDistributionMatrix&quot;,&quot;MultiStepReAssign&quot;,&quot;AddRecipient&quot;,&quot;ExpandDocNestedStructure&quot;,&quot;ExpandFileNestedStructure&quot;,&quot;TabOutletManagement&quot;,&quot;CompareWorkflowTemplates&quot;,&quot;MaintainCalendar&quot;,&quot;EditObjModal&quot;,&quot;RegenerateMetadata&quot;,&quot;QueryEntity&quot;,&quot;ShareUrl&quot;,&quot;ShowObj&quot;,&quot;TerminateObj&quot;,&quot;DeleteObj&quot;,&quot;AttachWorkflow&quot;,&quot;CancelDocument&quot;,&quot;UnCancelDocument&quot;,&quot;ExecuteSavedReportFromObject&quot;,&quot;UndoEditFiles&quot;,&quot;EditFiles&quot;,&quot;XmtlCancel&quot;,&quot;XmtlUndoCancel&quot;,&quot;StepRejectAction&quot;,&quot;StepAcceptAction&quot;,&quot;StepClaim&quot;,&quot;SharepointCreateDocument&quot;,&quot;SharepointDownloadFile&quot;,&quot;SharepointViewNative&quot;,&quot;GenerateAlternateRendition&quot;,&quot;OpenXMLWordReport&quot;,&quot;SignOff&quot;,&quot;SignOffWithForm&quot;,&quot;UndoSignOff&quot;,&quot;SPFExchangeData&quot;,&quot;LaunchURLWithDynamicArgs&quot;,&quot;SDARelationshipBuilder&quot;,&quot;LaunchURLFromFeatureSet&quot;,&quot;WebClientExtensibility&quot;,&quot;GenerateMergedRendition&quot;,&quot;ListEditUncontrolledItems&quot;,&quot;WorkflowDetailsReport&quot;,&quot;ShareFile&quot;,&quot;CopyToLocalFile&quot;,&quot;GenerateMergedRenditionForFiles&quot;,&quot;PrintFile&quot;,&quot;UnlockUserAccount&quot;,&quot;StartScheduler&quot;,&quot;StopScheduler&quot;,&quot;SPFCopyConfigAccess&quot;,&quot;Dashboard&quot;,&quot;UpdateReferences&quot;,&quot;UpdateReferredBy&quot;,&quot;RelationshipManagement&quot;,&quot;GenerateThumbnail&quot;,&quot;EditFilesOnline&quot;,&quot;FinishEditOnline&quot;,&quot;FinishEditOnlineSignOff&quot;,&quot;UndoEditOnline&quot;,&quot;ViewOnline&quot;,&quot;GoToOneDrive&quot;,&quot;UpdateWidget&quot;,&quot;ReplaceEditableCopyWithMasterCopy&quot;,&quot;RequestForESign&quot;,&quot;CompleteESign&quot;,&quot;CompareDocuments&quot;,&quot;CreateWebGLSchedulerTask&quot;,&quot;SDACompareFiles&quot;,&quot;Navigate&quot;,&quot;ViewInDocument&quot;,&quot;SmartPlantReview&quot;,&quot;ViewBatchRenditionLog&quot;,&quot;ClearBravaCache&quot;,&quot;ViewInVisualReport&quot;,&quot;SCLBQualityAssuranceReviewDetails&quot;,&quot;SCLBManageQualityAssuranceReviewPlan&quot;,&quot;SCLBQualityAssuranceReview&quot;,&quot;SDAImpactAnalysis&quot;,&quot;ConflictResolution&quot;,&quot;SCLBCommunicationManagementDetails&quot;,&quot;SCLBCommunicationManagement&quot;,&quot;SOPSCommunicationManagementDetails&quot;,&quot;SOPSCommunicationManagement&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;SCLBQualityAssuranceRegister&quot;,&quot;SDAManageMarkupLayersForRendition&quot;,&quot;SOPSManageMarkupLayersForRendition&quot;,&quot;SDAImpactAnalysis&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;ConflictResolution&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;ProjectHandover&quot;,&quot;SDAShowMySDVJobs&quot;,&quot;SDxShowMySDVJobs&quot;,&quot;SDAApproveSDVJob&quot;,&quot;SDAViewSDVJobSummary&quot;,&quot;SDADeleteSDVJob&quot;,&quot;SDASDVDownloadValidationReport&quot;,&quot;LScanViewSite&quot;,&quot;LScanViewScan&quot;,&quot;LScanSynchronizeSiteData&quot;,&quot;LScanViewTagInScan&quot;,&quot;ViewConsolidatedDataForObject&quot;,&quot;ViewSharedData&quot;,&quot;CreateWorkAreaDefinition&quot;,&quot;EditWorkAreaDefinition&quot;,&quot;RunDanglingRelsReport&quot;,&quot;RegisterAuthoringTool&quot;,&quot;InconsistencyReportWithStartingObject&quot;,&quot;InconsistencyReportByQuery&quot;,&quot;InconsistencyReport&quot;,&quot;RegenerateCommonSchema&quot;,&quot;CancelChangeAction&quot;,&quot;SIOInconsistencyReportByQuery&quot;,&quot;RelateObjectsToWorkArea&quot;,&quot;ResolveDuplicateDocuments&quot;,&quot;SPFNContentExtraction&quot;,&quot;UnClaimObj&quot;,&quot;ClaimObj&quot;,&quot;MergeConfig&quot;,&quot;MergeObj&quot;,&quot;MergeStructure&quot;,&quot;CancelProject&quot;,&quot;ChangeConfigStatus&quot;,&quot;SyncObjects&quot;,&quot;SPXSAPSync&quot;,&quot;SDxConnSync&quot;,&quot;ExampleClientAPIRoute&quot;,&quot;HistoryViewRoute&quot;,&quot;ExampleClientAPIAction&quot;,&quot;ExampleClientAPIModal&quot;,&quot;HistoryViewModal&quot;,&quot;ExampleClientAPIWidget&quot;],&quot;ObjectObidAndDomains&quot;:[&quot;${TC013_SearchDocW3CharHSV6IQZ096A}&quot;]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">3752</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQZ096A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQZ096A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils6IQZ096A} ${TC022_OpenQAReviewDeatils6IQZ096A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils6IQZ096A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject" enabled="false">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;CreateObj&quot;,&quot;ManageFiles&quot;,&quot;ManageSignedFiles&quot;,&quot;CopyObj&quot;,&quot;CreateClassObj&quot;,&quot;CreateClassObjAndRel&quot;,&quot;CreateObjAndRel&quot;,&quot;CreateClassObjAndLoad&quot;,&quot;SDxCreateClassObjAndLoad&quot;,&quot;CreateWizardClassObj&quot;,&quot;CreateSignWizardClassObj&quot;,&quot;CreateObjectFromSelectedObjects&quot;,&quot;CreateSignObjectFromSelectedObjects&quot;,&quot;EditObj&quot;,&quot;EditWizardObj&quot;,&quot;EditSignWizardObj&quot;,&quot;ShowInbox&quot;,&quot;ReplaceFiles&quot;,&quot;CheckInFiles&quot;,&quot;TaskReassignmentConfiguration&quot;,&quot;SDARelationshipBuilder&quot;,&quot;CreateEntryPointFromQFind&quot;,&quot;AdminEntryPoints&quot;,&quot;ShowWorkflow&quot;,&quot;SDxWorkflowTemplateEditor&quot;,&quot;SDxCreateWorkflowTemplate&quot;,&quot;ListEditContextMenu&quot;,&quot;FTRSearch&quot;,&quot;AssignRecipients&quot;,&quot;Revise&quot;,&quot;UploadDocument&quot;,&quot;EditObjWithClassification&quot;,&quot;SDAManageDataTree&quot;,&quot;ShowInboxForObject&quot;,&quot;SDACopyDataBookContent&quot;,&quot;ConfigRoleAssignment&quot;,&quot;DashboardCreatePage&quot;,&quot;DashboardUpdatePage&quot;,&quot;InsertHistRev&quot;,&quot;CopyDistributionMatrix&quot;,&quot;MultiStepReAssign&quot;,&quot;AddRecipient&quot;,&quot;ExpandDocNestedStructure&quot;,&quot;ExpandFileNestedStructure&quot;,&quot;TabOutletManagement&quot;,&quot;CompareWorkflowTemplates&quot;,&quot;MaintainCalendar&quot;,&quot;EditObjModal&quot;,&quot;RegenerateMetadata&quot;,&quot;QueryEntity&quot;,&quot;ShareUrl&quot;,&quot;ShowObj&quot;,&quot;TerminateObj&quot;,&quot;DeleteObj&quot;,&quot;AttachWorkflow&quot;,&quot;CancelDocument&quot;,&quot;UnCancelDocument&quot;,&quot;ExecuteSavedReportFromObject&quot;,&quot;UndoEditFiles&quot;,&quot;EditFiles&quot;,&quot;XmtlCancel&quot;,&quot;XmtlUndoCancel&quot;,&quot;StepRejectAction&quot;,&quot;StepAcceptAction&quot;,&quot;StepClaim&quot;,&quot;SharepointCreateDocument&quot;,&quot;SharepointDownloadFile&quot;,&quot;SharepointViewNative&quot;,&quot;GenerateAlternateRendition&quot;,&quot;OpenXMLWordReport&quot;,&quot;SignOff&quot;,&quot;SignOffWithForm&quot;,&quot;UndoSignOff&quot;,&quot;SPFExchangeData&quot;,&quot;LaunchURLWithDynamicArgs&quot;,&quot;SDARelationshipBuilder&quot;,&quot;LaunchURLFromFeatureSet&quot;,&quot;WebClientExtensibility&quot;,&quot;GenerateMergedRendition&quot;,&quot;ListEditUncontrolledItems&quot;,&quot;WorkflowDetailsReport&quot;,&quot;ShareFile&quot;,&quot;CopyToLocalFile&quot;,&quot;GenerateMergedRenditionForFiles&quot;,&quot;PrintFile&quot;,&quot;UnlockUserAccount&quot;,&quot;StartScheduler&quot;,&quot;StopScheduler&quot;,&quot;SPFCopyConfigAccess&quot;,&quot;Dashboard&quot;,&quot;UpdateReferences&quot;,&quot;UpdateReferredBy&quot;,&quot;RelationshipManagement&quot;,&quot;GenerateThumbnail&quot;,&quot;EditFilesOnline&quot;,&quot;FinishEditOnline&quot;,&quot;FinishEditOnlineSignOff&quot;,&quot;UndoEditOnline&quot;,&quot;ViewOnline&quot;,&quot;GoToOneDrive&quot;,&quot;UpdateWidget&quot;,&quot;ReplaceEditableCopyWithMasterCopy&quot;,&quot;RequestForESign&quot;,&quot;CompleteESign&quot;,&quot;CompareDocuments&quot;,&quot;CreateWebGLSchedulerTask&quot;,&quot;SDACompareFiles&quot;,&quot;Navigate&quot;,&quot;ViewInDocument&quot;,&quot;SmartPlantReview&quot;,&quot;ViewBatchRenditionLog&quot;,&quot;ClearBravaCache&quot;,&quot;ViewInVisualReport&quot;,&quot;SCLBQualityAssuranceReviewDetails&quot;,&quot;SCLBManageQualityAssuranceReviewPlan&quot;,&quot;SCLBQualityAssuranceReview&quot;,&quot;SDAImpactAnalysis&quot;,&quot;ConflictResolution&quot;,&quot;SCLBCommunicationManagementDetails&quot;,&quot;SCLBCommunicationManagement&quot;,&quot;SOPSCommunicationManagementDetails&quot;,&quot;SOPSCommunicationManagement&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;SCLBQualityAssuranceRegister&quot;,&quot;SDAManageMarkupLayersForRendition&quot;,&quot;SOPSManageMarkupLayersForRendition&quot;,&quot;SDAImpactAnalysis&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;ConflictResolution&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;ProjectHandover&quot;,&quot;SDAShowMySDVJobs&quot;,&quot;SDxShowMySDVJobs&quot;,&quot;SDAApproveSDVJob&quot;,&quot;SDAViewSDVJobSummary&quot;,&quot;SDADeleteSDVJob&quot;,&quot;SDASDVDownloadValidationReport&quot;,&quot;LScanViewSite&quot;,&quot;LScanViewScan&quot;,&quot;LScanSynchronizeSiteData&quot;,&quot;LScanViewTagInScan&quot;,&quot;ViewConsolidatedDataForObject&quot;,&quot;ViewSharedData&quot;,&quot;CreateWorkAreaDefinition&quot;,&quot;EditWorkAreaDefinition&quot;,&quot;RunDanglingRelsReport&quot;,&quot;RegisterAuthoringTool&quot;,&quot;InconsistencyReportWithStartingObject&quot;,&quot;InconsistencyReportByQuery&quot;,&quot;InconsistencyReport&quot;,&quot;RegenerateCommonSchema&quot;,&quot;CancelChangeAction&quot;,&quot;SIOInconsistencyReportByQuery&quot;,&quot;RelateObjectsToWorkArea&quot;,&quot;ResolveDuplicateDocuments&quot;,&quot;SPFNContentExtraction&quot;,&quot;UnClaimObj&quot;,&quot;ClaimObj&quot;,&quot;MergeConfig&quot;,&quot;MergeObj&quot;,&quot;MergeStructure&quot;,&quot;CancelProject&quot;,&quot;ChangeConfigStatus&quot;,&quot;SyncObjects&quot;,&quot;SPXSAPSync&quot;,&quot;SDxConnSync&quot;,&quot;ExampleClientAPIRoute&quot;,&quot;HistoryViewRoute&quot;,&quot;ExampleClientAPIAction&quot;,&quot;ExampleClientAPIModal&quot;,&quot;HistoryViewModal&quot;,&quot;ExampleClientAPIWidget&quot;],&quot;ObjectObidAndDomains&quot;:[&quot;${TC013_SearchDocW3CharHSV6IQZ096A}&quot;]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">3752</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQZ096A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQZ096A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils6IQZ096A} ${TC022_OpenQAReviewDeatils6IQZ096A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils6IQZ096A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject" enabled="false">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;ClientApis&quot;:[&quot;CreateObj&quot;,&quot;ManageFiles&quot;,&quot;ManageSignedFiles&quot;,&quot;CopyObj&quot;,&quot;CreateClassObj&quot;,&quot;CreateClassObjAndRel&quot;,&quot;CreateObjAndRel&quot;,&quot;CreateClassObjAndLoad&quot;,&quot;SDxCreateClassObjAndLoad&quot;,&quot;CreateWizardClassObj&quot;,&quot;CreateSignWizardClassObj&quot;,&quot;CreateObjectFromSelectedObjects&quot;,&quot;CreateSignObjectFromSelectedObjects&quot;,&quot;EditObj&quot;,&quot;EditWizardObj&quot;,&quot;EditSignWizardObj&quot;,&quot;ShowInbox&quot;,&quot;ReplaceFiles&quot;,&quot;CheckInFiles&quot;,&quot;TaskReassignmentConfiguration&quot;,&quot;SDARelationshipBuilder&quot;,&quot;CreateEntryPointFromQFind&quot;,&quot;AdminEntryPoints&quot;,&quot;ShowWorkflow&quot;,&quot;SDxWorkflowTemplateEditor&quot;,&quot;SDxCreateWorkflowTemplate&quot;,&quot;ListEditContextMenu&quot;,&quot;FTRSearch&quot;,&quot;AssignRecipients&quot;,&quot;Revise&quot;,&quot;UploadDocument&quot;,&quot;EditObjWithClassification&quot;,&quot;SDAManageDataTree&quot;,&quot;ShowInboxForObject&quot;,&quot;SDACopyDataBookContent&quot;,&quot;ConfigRoleAssignment&quot;,&quot;DashboardCreatePage&quot;,&quot;DashboardUpdatePage&quot;,&quot;InsertHistRev&quot;,&quot;CopyDistributionMatrix&quot;,&quot;MultiStepReAssign&quot;,&quot;AddRecipient&quot;,&quot;ExpandDocNestedStructure&quot;,&quot;ExpandFileNestedStructure&quot;,&quot;TabOutletManagement&quot;,&quot;CompareWorkflowTemplates&quot;,&quot;MaintainCalendar&quot;,&quot;EditObjModal&quot;,&quot;RegenerateMetadata&quot;,&quot;QueryEntity&quot;,&quot;ShareUrl&quot;,&quot;ShowObj&quot;,&quot;TerminateObj&quot;,&quot;DeleteObj&quot;,&quot;AttachWorkflow&quot;,&quot;CancelDocument&quot;,&quot;UnCancelDocument&quot;,&quot;ExecuteSavedReportFromObject&quot;,&quot;UndoEditFiles&quot;,&quot;EditFiles&quot;,&quot;XmtlCancel&quot;,&quot;XmtlUndoCancel&quot;,&quot;StepRejectAction&quot;,&quot;StepAcceptAction&quot;,&quot;StepClaim&quot;,&quot;SharepointCreateDocument&quot;,&quot;SharepointDownloadFile&quot;,&quot;SharepointViewNative&quot;,&quot;GenerateAlternateRendition&quot;,&quot;OpenXMLWordReport&quot;,&quot;SignOff&quot;,&quot;SignOffWithForm&quot;,&quot;UndoSignOff&quot;,&quot;SPFExchangeData&quot;,&quot;LaunchURLWithDynamicArgs&quot;,&quot;SDARelationshipBuilder&quot;,&quot;LaunchURLFromFeatureSet&quot;,&quot;WebClientExtensibility&quot;,&quot;GenerateMergedRendition&quot;,&quot;ListEditUncontrolledItems&quot;,&quot;WorkflowDetailsReport&quot;,&quot;ShareFile&quot;,&quot;CopyToLocalFile&quot;,&quot;GenerateMergedRenditionForFiles&quot;,&quot;PrintFile&quot;,&quot;UnlockUserAccount&quot;,&quot;StartScheduler&quot;,&quot;StopScheduler&quot;,&quot;SPFCopyConfigAccess&quot;,&quot;Dashboard&quot;,&quot;UpdateReferences&quot;,&quot;UpdateReferredBy&quot;,&quot;RelationshipManagement&quot;,&quot;GenerateThumbnail&quot;,&quot;EditFilesOnline&quot;,&quot;FinishEditOnline&quot;,&quot;FinishEditOnlineSignOff&quot;,&quot;UndoEditOnline&quot;,&quot;ViewOnline&quot;,&quot;GoToOneDrive&quot;,&quot;UpdateWidget&quot;,&quot;ReplaceEditableCopyWithMasterCopy&quot;,&quot;RequestForESign&quot;,&quot;CompleteESign&quot;,&quot;CompareDocuments&quot;,&quot;CreateWebGLSchedulerTask&quot;,&quot;SDACompareFiles&quot;,&quot;Navigate&quot;,&quot;ViewInDocument&quot;,&quot;SmartPlantReview&quot;,&quot;ViewBatchRenditionLog&quot;,&quot;ClearBravaCache&quot;,&quot;ViewInVisualReport&quot;,&quot;SCLBQualityAssuranceReviewDetails&quot;,&quot;SCLBManageQualityAssuranceReviewPlan&quot;,&quot;SCLBQualityAssuranceReview&quot;,&quot;SDAImpactAnalysis&quot;,&quot;ConflictResolution&quot;,&quot;SCLBCommunicationManagementDetails&quot;,&quot;SCLBCommunicationManagement&quot;,&quot;SOPSCommunicationManagementDetails&quot;,&quot;SOPSCommunicationManagement&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;SCLBQualityAssuranceRegister&quot;,&quot;SDAManageMarkupLayersForRendition&quot;,&quot;SOPSManageMarkupLayersForRendition&quot;,&quot;SDAImpactAnalysis&quot;,&quot;SOPSPABCommunicationManagement&quot;,&quot;ConflictResolution&quot;,&quot;SOPSPABImpactAnalysis&quot;,&quot;ProjectHandover&quot;,&quot;SDAShowMySDVJobs&quot;,&quot;SDxShowMySDVJobs&quot;,&quot;SDAApproveSDVJob&quot;,&quot;SDAViewSDVJobSummary&quot;,&quot;SDADeleteSDVJob&quot;,&quot;SDASDVDownloadValidationReport&quot;,&quot;LScanViewSite&quot;,&quot;LScanViewScan&quot;,&quot;LScanSynchronizeSiteData&quot;,&quot;LScanViewTagInScan&quot;,&quot;ViewConsolidatedDataForObject&quot;,&quot;ViewSharedData&quot;,&quot;CreateWorkAreaDefinition&quot;,&quot;EditWorkAreaDefinition&quot;,&quot;RunDanglingRelsReport&quot;,&quot;RegisterAuthoringTool&quot;,&quot;InconsistencyReportWithStartingObject&quot;,&quot;InconsistencyReportByQuery&quot;,&quot;InconsistencyReport&quot;,&quot;RegenerateCommonSchema&quot;,&quot;CancelChangeAction&quot;,&quot;SIOInconsistencyReportByQuery&quot;,&quot;RelateObjectsToWorkArea&quot;,&quot;ResolveDuplicateDocuments&quot;,&quot;SPFNContentExtraction&quot;,&quot;UnClaimObj&quot;,&quot;ClaimObj&quot;,&quot;MergeConfig&quot;,&quot;MergeObj&quot;,&quot;MergeStructure&quot;,&quot;CancelProject&quot;,&quot;ChangeConfigStatus&quot;,&quot;SyncObjects&quot;,&quot;SPXSAPSync&quot;,&quot;SDxConnSync&quot;,&quot;ExampleClientAPIRoute&quot;,&quot;HistoryViewRoute&quot;,&quot;ExampleClientAPIAction&quot;,&quot;ExampleClientAPIModal&quot;,&quot;HistoryViewModal&quot;,&quot;ExampleClientAPIWidget&quot;],&quot;ObjectObidAndDomains&quot;:[&quot;${TC013_SearchDocW3CharHSV6IQZ096A}&quot;]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.GetShortcutFeaturesByObject</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">3752</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQZ096A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..[?(@.Name==&quot;ViewNavigateFiles&quot;)].ContextObjectOBIDs[0]</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQZ096A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..ContextObjectOBIDs</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils6IQZ096A} ${TC022_OpenQAReviewDeatils6IQZ096A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils6IQZ096A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/$batch" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">--batch_e555f23b-76c2-8b6a-2083-5766ff358f52&#xd;
Content-Type: application/http&#xd;
Content-Transfer-Encoding: binary&#xd;
&#xd;
GET https://${HostName}/${SPFServer}/api/v2/SDA/Objects?$filter=OBID eq &apos;${TC014_FilterDocsByContract${TC014_FilterDocsByContract&apos;6IQY002A&apos;}}&apos;&amp;$top=1 HTTP/1.1&#xd;
SPFConfigUID:${SPFConfigUID}&#xd;
SPFResolveDocumentsToVersion: false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/$batch</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">297</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">multipart/mixed;boundary=batch_e555f23b-76c2-8b6a-2083-5766ff358f52</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">SubmitalOBID</stringProp>
                      <stringProp name="RegexExtractor.regex">&quot;OBID&quot;:&quot;(.+?)&quot;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">Not FOUND</stringProp>
                      <stringProp name="RegexExtractor.match_number"> 1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetDocumentReviewDetailsByDocument" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="DocumentOBID" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">DocumentOBID</stringProp>
                          <stringProp name="Argument.value">%27${TC022_OpenQAReviewDeatils6IQY002A}%27</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="ColumnSetUID" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">ColumnSetUID</stringProp>
                          <stringProp name="Argument.value">%27CS_SCLBQADocReviewColumnSet%27</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="CreateTQMethodUID" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">CreateTQMethodUID</stringProp>
                          <stringProp name="Argument.value">%27MTH_SCLBCreateDocumentInternalTechnicalQuery%27</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="LaunchMarkupFromHyperlinkMethod" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">LaunchMarkupFromHyperlinkMethod</stringProp>
                          <stringProp name="Argument.value">%27MTH_FileViewNavigate%27</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="LaunchMarkupFromSupportingInformationMethod" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">LaunchMarkupFromSupportingInformationMethod</stringProp>
                          <stringProp name="Argument.value">%27MTH_FileViewNavigate%27</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="ManageActionMarkupsMethodViewOnlyUID" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">ManageActionMarkupsMethodViewOnlyUID</stringProp>
                          <stringProp name="Argument.value">%27MTH_SCLBManageActionMarkupLayersReadOnly%27</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="ManageDocumentMarkupsMethodViewOnlyUID" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">ManageDocumentMarkupsMethodViewOnlyUID</stringProp>
                          <stringProp name="Argument.value">%27MTH_SCLBManageDocMarkupLayersReadOnly%27</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="ReviewMode" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">ReviewMode</stringProp>
                          <stringProp name="Argument.value">Intergraph.SPF.Server.API.ClientSupport.Types.QualityAssurance.DocumentReview.ReviewMode%270%27</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="ExposeConsolidatorReview" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">ExposeConsolidatorReview</stringProp>
                          <stringProp name="Argument.value">false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="ActionRejectStatusParam" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">ActionRejectStatusParam</stringProp>
                          <stringProp name="Argument.value">%27e1XmtlIssueStateDRAFTREJECTED%27</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetDocumentReviewDetailsByDocument</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/GetForm" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;key&quot;:&quot;${TC013_SearchDocW3CharHSV6IQY000A}&quot;,&quot;getTodoListTaskForm&quot;:false}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/GetForm</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-length</stringProp>
                          <stringProp name="Header.value">46</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">origin</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfcreateconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFCreateConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">spfqueryconfiguid</stringProp>
                          <stringProp name="Header.value">${SPFQueryConfigUID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..AssociatedObjectOBIDForUpdate||</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..FormSections[?(@.Name == &quot;SDADocNameDesc_UI-Section&quot;)].AssociatedObjectOBIDForUpdate</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..AssociatedObjectOBIDForUpdate</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils6IQY000A} ${TC022_OpenQAReviewDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..FormSections[?(@.Name == &quot;SDADocNameDesc_UI-Section&quot;)].AssociatedObjectOBIDForUpdate</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..AssociatedObjectOBIDForUpdate</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils6IQY000A} ${TC022_OpenQAReviewDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..FormSections[?(@.Name == &quot;SDADocNameDesc_UI-Section&quot;)].AssociatedObjectOBIDForUpdate</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..AssociatedObjectOBIDForUpdate</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils6IQY000A} ${TC022_OpenQAReviewDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils&apos;6IQY000A&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..FormSections[?(@.Name == &quot;SDADocNameDesc_UI-Section&quot;)].AssociatedObjectOBIDForUpdate</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils&apos;6IQY000A&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..AssociatedObjectOBIDForUpdate</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils&apos;6IQY000A&apos;} ${TC022_OpenQAReviewDeatils&apos;6IQY000A&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils&apos;6IQY000A&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..FormSections[?(@.Name == &quot;SDADocNameDesc_UI-Section&quot;)].AssociatedObjectOBIDForUpdate</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY000A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..AssociatedObjectOBIDForUpdate</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils6IQY000A} ${TC022_OpenQAReviewDeatils6IQY000A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils6IQY000A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY002A</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..FormSections[?(@.Name == &quot;SDADocRevision_I&quot;)].AssociatedObjectOBIDForUpdate</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils6IQY002A-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..AssociatedObjectOBIDForUpdate</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils6IQY002A} ${TC022_OpenQAReviewDeatils6IQY002A-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils6IQY002A&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils&apos;6IQY002A&apos;</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..FormSections[?(@.Name == &quot;SDADocRevision_I&quot;)].AssociatedObjectOBIDForUpdate</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">TC022_OpenQAReviewDeatils&apos;6IQY002A&apos;-ALL</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..AssociatedObjectOBIDForUpdate</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters">${TC022_OpenQAReviewDeatils&apos;6IQY002A&apos;} ${TC022_OpenQAReviewDeatils&apos;6IQY002A&apos;-ALL}</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String First = bsh.args[0];
String Second = bsh.args[1];
if(!(First.contains(&quot;NULL&quot;)))
{
}
else
{
vars.put(&quot;TC022_OpenQAReviewDeatils&apos;6IQY002A&apos;&quot;, Second);}
</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Notifications" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="false">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="$select" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$select</stringProp>
                          <stringProp name="Argument.value">OBID,Name,Description,CreationDate,SPFContextObjectOBID</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$top" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$top</stringProp>
                          <stringProp name="Argument.value">25</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$skip" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$skip</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$count" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$count</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="$orderby" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">$orderby</stringProp>
                          <stringProp name="Argument.value">CreationDate+desc</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Notifications</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/json,application/vnd.intergraph.data+json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept-language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,ja;q=0.8,de-DE;q=0.7,de;q=0.6</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${Bearer}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">referer</stringProp>
                          <stringProp name="Header.value">https://imqa-perf-sdx.ingrnet.com/SDxEISWC/</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua</stringProp>
                          <stringProp name="Header.value">${HostName}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                          <stringProp name="Header.value">?0</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                          <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">sec-fetch-site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">user-agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor11" enabled="false">
                      <stringProp name="JSONPostProcessor.referenceNames">DynamicOBID</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.value..</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                      <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="AfterJDBC" enabled="true">
                  <stringProp name="dataSource">QUERYRESULT1</stringProp>
                  <stringProp name="query">WITH DB_CPU_Stats
AS
(
    SELECT
               DatabaseID, isnull(DB_Name(DatabaseID),case DatabaseID when 32767 then &apos;Internal ResourceDB&apos; else CONVERT(varchar(255),DatabaseID)end) AS [DatabaseName], 
      SUM(execution_count)  AS [SQL_Execution],
                   SUM(total_logical_reads)  AS [BufferGets],
                                 SUM(total_physical_reads)  AS [Physical Reads],
                 SUM(total_worker_time) AS [CPU Time Ms],
       SUM(total_elapsed_time)  AS [Elapsed Time]
      FROM sys.dm_exec_query_stats AS qs
    CROSS APPLY (
                    SELECT CONVERT(int, value) AS [DatabaseID] 
                  FROM sys.dm_exec_plan_attributes(qs.plan_handle)
                 WHERE attribute = N&apos;dbid&apos;) AS F_DB
               
    GROUP BY DatabaseID

)
SELECT 
       
                  [DatabaseID],[SQL_Execution],
       [BufferGets],
       [Physical Reads],
       [CPU Time Ms],
                  [Elapsed Time] 
                  FROM DB_CPU_Stats
where DatabaseName= &apos;${DBName}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable">SQlStats</stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import java.io;

String TransName=&quot;OpenQAReviewDeatils&quot;;
String SQLStartTime = JMeterUtils.getProperty(&quot;SQLStartTime-JP&quot;);
String SQLEndTime = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy HH:mm : ss.SSS&quot;).format(prev.getStartTime());

log.info(&quot;aSQlStats = &gt; &quot;+vars.get(&quot;SQlStats&quot;));
//int DatabaseID = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;);
//log.info(&quot;DatabaseID = &gt; &quot;+DatabaseID);
//log.info(&quot;SQLStartTime = &gt; &quot;+SQLStartTime);
//log.info(&quot;SQLEndTime = &gt; &quot;+SQLEndTime);
Long aSQL_Execution = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;SQL_Execution&quot;);
//log.info(&quot;aSQL_Execution = &gt; &quot;+aSQL_Execution);

Long aBufferGets = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;BufferGets&quot;);
//log.info(&quot;aBufferGets = &gt; &quot;+aBufferGets);
Long aPhysicalReads = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Physical Reads&quot;);
//log.info(&quot;aPhysicalReads = &gt; &quot;+aPhysicalReads);
Long aCPUTimeMs = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;CPU Time Ms&quot;);
//log.info(&quot;aCPUTimeMs = &gt; &quot;+aCPUTimeMs);
Long aElapsedTime = vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;Elapsed Time&quot;);
//log.info(&quot;aElapsedTime = &gt; &quot;+aElapsedTime);

String BSQlStats = JMeterUtils.getProperty(&quot;SQlStats-JP&quot;);
//log.info(&quot;BSQlStats = &gt; &quot;+BSQlStats);

Long bSQL_Execution = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;SQL_Execution=&quot;)+14, BSQlStats.indexOf(&quot;, BufferGets=&quot;)));
//log.info(&quot;bSQL_Execution = &gt; &quot;+bSQL_Execution);

//Long.parseLong
Long bBufferGets = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11, BSQlStats.indexOf(&quot;}&quot;)));
//int bBufferGets = Integer.parseInt(BSQlStats.substring(BSQlStats.indexOf(&quot;BufferGets=&quot;)+11,BSQlStats.indexOf(&quot;}&quot;)));
//log.info(&quot;bBufferGets = &gt; &quot;+bBufferGets);

Long bPhysicalReads = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Physical Reads=&quot;)+15, BSQlStats.indexOf(&quot;, DatabaseID&quot;)));
//log.info(&quot;bPhysicalReads = &gt; &quot;+bPhysicalReads);

Long bCPUTimeMs = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;CPU Time Ms=&quot;)+12, BSQlStats.indexOf(&quot;, Elapsed Time&quot;)));
//log.info(&quot;bCPUTimeMs = &gt; &quot;+bCPUTimeMs);

Long bElapsedTime = Long.parseLong(BSQlStats.substring(BSQlStats.indexOf(&quot;Elapsed Time=&quot;)+13, BSQlStats.indexOf(&quot;, SQL_Execution&quot;)));
//log.info(&quot;bElapsedTime = &gt; &quot;+bElapsedTime);

//log.info(&quot;SQL_Execution = &gt; &quot;+(aSQL_Execution-bSQL_Execution));
//log.info(&quot;BufferGets = &gt; &quot;+(aBufferGets-bBufferGets));
//log.info(&quot;PhysicalReads = &gt; &quot;+(aPhysicalReads-bPhysicalReads));
//log.info(&quot;CPUTimeMs = &gt; &quot;+(aCPUTimeMs-bCPUTimeMs));
//log.info(&quot;ElapsedTime = &gt; &quot;+(aElapsedTime-bElapsedTime));
log.info(&quot;===================================================&quot;);
String Perfcsv = TransName +&quot;,&quot;+String.valueOf(vars.getObject(&quot;SQlStats&quot;).get(0).get(&quot;DatabaseID&quot;))+&quot;,&quot;+SQLStartTime+&quot;,&quot;+SQLEndTime+&quot;,&quot;+String.valueOf(aSQL_Execution-bSQL_Execution)+&quot;,&quot;+String.valueOf(aBufferGets-bBufferGets)+&quot;,&quot;+String.valueOf(aPhysicalReads-bPhysicalReads)+&quot;,&quot;+String.valueOf(aCPUTimeMs-bCPUTimeMs)+&quot;,&quot;+String.valueOf(aElapsedTime-bElapsedTime);

log.info(&quot;Perfcsv = &gt;&quot;+Perfcsv);
log.info(&quot;===================================================&quot;);
JMeterUtils.setProperty(&quot;SQLStartTime-JP&quot;, SQLEndTime);
JMeterUtils.setProperty(&quot;SQlStats-JP&quot;, vars.get(&quot;SQlStats&quot;));

String PerfCSVFile = vars.get(&quot;OutputPath&quot;) + vars.get(&quot;OutputFolderName&quot;) +&quot;perf.csv&quot;;
FileWriter fstream = new FileWriter(PerfCSVFile,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(Perfcsv);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename">${OutputPath}${OutputFolderName}Single-FinalResults.jtl</stringProp>
          </ResultCollector>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_Logout" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.LogoutUser-516" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;SessionID&quot;:&quot;${SessionID_Logout}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/User/Intergraph.SPF.Server.API.Model.LogoutUser</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${HostName}/${SPFWC}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${HostName}</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">text/plain</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/${SPFServer}/api/v2/SDA/description-517" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${SPFServer}/api/v2/SDA/description</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${HostName}/${SPFWC}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/sam/oauth/.well-known/openid-configuration-518" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SAMHostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/sam/oauth/.well-known/openid-configuration</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${HostName}/${SPFWC}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/sam/oauth/connect/endsession-519" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="id_token_hint" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">id_token_hint</stringProp>
                    <stringProp name="Argument.value">${id_token}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="post_logout_redirect_uri" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">post_logout_redirect_uri</stringProp>
                    <stringProp name="Argument.value">https://${HostName}/${SPFWC}/</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SAMHostName}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/sam/oauth/connect/endsession</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${HostName}/${SPFWC}/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-User" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                    <stringProp name="Header.value">?1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Edg/88.0.705.63</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
